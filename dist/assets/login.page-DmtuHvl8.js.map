{"version":3,"file":"login.page-DmtuHvl8.js","sources":["../../src/hooks/message.hook.ts","../../src/pages/login.page.tsx"],"sourcesContent":["import { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useRootSelector } from './selector.hook';\nimport { clearMessageAction } from '@/redux/slicers/api-message.slice';\n\nexport function useWatchMessage(...keys: string[]) {\n  const box = useRootSelector((state) => {\n    const box = state.apiMessage.box;\n    return keys.map((key) => box[key]);\n  });\n  const dispatch = useDispatch();\n\n  const _keys = useMemo(() => {\n    return keys;\n  }, [...keys]);\n\n  useEffect(() => {\n    return () => {\n      dispatch(clearMessageAction(_keys));\n    };\n  }, [dispatch, _keys]);\n\n  return useMemo(() => {\n    const errors = [];\n    const successes = [];\n    for (const { type, messages } of box.filter(Boolean) as MessageOptions[]) {\n      if (type === 'error') {\n        errors.push(...messages);\n      } else {\n        successes.push(...messages);\n      }\n    }\n    return {\n      errors,\n      successes,\n    };\n  }, [...box]);\n}\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, Form, Input } from 'antd';\nimport type { FormProps } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { CustomIcon } from '@/components/icons';\nimport { useAuth } from '@/hooks/auth.hook';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useWatchMessage } from '@/hooks/message.hook';\nimport { Message } from '@/components/message';\nimport { Fragment } from 'react';\n\ntype FieldType = {\n  username: string;\n  password: string;\n};\n\nexport default function LoginPage() {\n  const { formatMessage } = useLocale();\n  const { login } = useAuth();\n  const [loading] = useWatchLoading(['login-loading', false]);\n  const { errors } = useWatchMessage('login-message');\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    const { username, password } = values;\n    login(username, password);\n  };\n\n  return (\n    <Fragment>\n      <div css={formContainerStyle}>\n        <div css={formContentStyle}>\n          <CustomIcon type=\"logo\" width={90} height={90} />\n          <h3 css={loginTitleStyle}>{formatMessage({ id: 'title.form.login' })}</h3>\n          <Form\n            name=\"login\"\n            layout=\"vertical\"\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n            autoComplete=\"off\"\n            css={formStyle}\n          >\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>{formatMessage({ id: 'form.auth.username' })}</span>}\n              name=\"username\"\n              rules={[\n                { required: true, message: formatMessage({ id: 'form.input.require.username' }) },\n              ]}\n            >\n              <Input size=\"large\" autoComplete=\"email\" />\n            </Form.Item>\n\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>{formatMessage({ id: 'form.auth.password' })}</span>}\n              name=\"password\"\n              rules={[\n                { required: true, message: formatMessage({ id: 'form.input.require.password' }) },\n              ]}\n            >\n              <Input.Password size=\"large\" autoComplete=\"current-password\" />\n            </Form.Item>\n            <Message type=\"error\">{errors[0]}</Message>\n            <Form.Item>\n              <Button\n                loading={loading}\n                size=\"large\"\n                css={submitBtnStyle}\n                type=\"primary\"\n                htmlType=\"submit\"\n              >\n                {formatMessage({ id: 'title.form.login' })}\n              </Button>\n            </Form.Item>\n            <Link to=\"/auth/forgot-password\" css={forgotPasswordLink}>\n              {formatMessage({ id: 'title.form.forgotPassword' })}\n            </Link>\n          </Form>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nconst formContainerStyle = css`\n  display: flex;\n  justify-content: center;\n`;\n\nconst formContentStyle = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  border-radius: 0.8rem;\n  padding: 2rem;\n  box-shadow: 0.04px 0.1px 6px #d9dadb;\n  background: #fff;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n`;\n\nconst submitBtnStyle = css`\n  margin-top: 2rem;\n  width: 100%;\n  background: #0070b8;\n\n  &:hover {\n    background: #0070b8 !important;\n    opacity: 0.9;\n  }\n`;\n\nconst formStyle = css`\n  margin-top: 2rem;\n  min-width: 34rem;\n`;\n\nconst loginTitleStyle = css`\n  font-weight: 500;\n  font-size: 2.6rem;\n  line-height: 2.8rem;\n  margin-top: 2rem;\n`;\n\nconst forgotPasswordLink = css`\n  width: 100%;\n  display: block;\n  text-align: center;\n  color: #0070b8;\n  &:hover {\n    color: #0070b8;\n    opacity: 0.85;\n  }\n`;\n"],"names":["useWatchMessage","keys","box","useRootSelector","state","apiMessage","map","key","dispatch","useDispatch","_keys","useMemo","useEffect","clearMessageAction","errors","successes","type","messages","filter","Boolean","push","LoginPage","formatMessage","login","username","password","values","formContainerStyle","loginTitleStyle","formContentStyle","jsx","CustomIcon","jsxs","Form","labelFormItem","onFinish","id","formStyle","process","Input","_EMOTION_STRINGIFIED_CSS_ERROR__","NODE_ENV","Message","Button","loading","submitBtnStyle","toString"],"mappings":"oPAKO,SAASA,KAAmBC,EAAgB,CAC3CC,MAAAA,EAAMC,EAA2BC,GAAA,CAC/BF,MAAAA,EAAME,EAAMC,WAAWH,IAC7B,OAAOD,EAAKK,IAAaJ,GAAAA,EAAIK,CAAG,CAAC,CAAA,CAClC,EACKC,EAAWC,IAEXC,EAAQC,EAAAA,QAAQ,IACbV,EACN,CAAC,GAAGA,CAAI,CAAC,EAEZW,OAAAA,EAAAA,UAAU,IACD,IAAM,CACFC,EAAAA,EAAmBH,CAAK,CAAC,CAAA,EAEnC,CAACF,EAAUE,CAAK,CAAC,EAEbC,UAAQ,IAAM,CACnB,MAAMG,EAAS,CAAA,EACTC,EAAY,CAAA,EACP,SAAA,CAAEC,KAAAA,EAAMC,SAAAA,CAAAA,IAAcf,EAAIgB,OAAOC,OAAO,EAC7CH,IAAS,QACJI,EAAAA,KAAK,GAAGH,CAAQ,EAEbG,EAAAA,KAAK,GAAGH,CAAQ,EAGvB,MAAA,CACLH,OAAAA,EACAC,UAAAA,CAAAA,CACF,EACC,CAAC,GAAGb,CAAG,CAAC,CACb,CC3BA,SAAwBmB,GAAA,CAUhB,KAAA,CAAoB,cAAAC,GAAAA,EAAAA,EAAA,CACpB,MAAAC,GAAQA,EAAAA,8BACR,CAAET,OAAAA,CAAAA,EAAAA,EAAAA,eAAAA,IAAAA,GAAAA,OAGA,SAAAU,EAAAA,SAAAA,CAAAC,EAAAA,EAAAF,EAAAG,EAAAA,CAAAA,CAAAA,EAAYD,SAAAA,EAAAA,SAAAA,CAEpB,kBAOS,IAAAE,EAA8C,WAAAC,MAAAA,CAAA,IAAAC,EAAA,SAAA,CAAAC,EAAAC,EAAA,sBAS5C,OACuD,EAAA,KAGX,MAAM,IAAAH,EAAA,SAA+BN,2BAOxE,EAAAU,EAAAC,EAAA,CAAUC,KAAAA,QAGJ,OAAA,WAAkE,cAAA,CAG3D,SAAA,EAAqB,EAWnB,SAAAC,eAAA,MAAAC,IAAAC,EAAA,SAAA,CAAAP,EAAAG,EAAA,KAAA,CAIF,QAAA,OAAA,OAK/B,SAAAX,EAAA,CAIoB,GAAA,oBAAA,CAAA,CAAA,GAKF,KAAA,WAAA,MAAA,CAAA,CAAA,SAAA,GAAA,QAAAA,EAAA,CAAA,GAAA,6BAAA,CAWHgB,CAAAA,CAAA,EAAA,WAAAC,EAAA,CAAA,KAAA,QAAA,aAAA,OAAA,CAAA,CAAA,CAAA,EAAAT,EAAAG,EAAA,KAAA,CAAAO,QAAAA,OAAAA,CAAA,IAAAN,EAAAI,SAAAA,EAAAG,CAAA,GAAA,oBAAA,CAAA,CAAA,CAAA,EAAA,KAAA,WAAA,MAAA,CAAA,CAAA,SAAA,GAAAD,QAAAA,EAAAA,CAAA,GAAA,6BAAA,CAMCF,CAAAA,CAAA,EAAA,SAAAR,EAAAS,EAAA,SAAA,CAAA,KAAA,QAAA,aAAA,kBAAA,CAAA,CAAA,CAAA,EAAAT,EAAAY,EAAA,CAAAF,KAAAA,QAAA,SAAA1B,EAAA,CAAA,CAAA,CAWLwB,EAAAG,EAAAA,EAAAA,KAAAA,CAAA,WAAAE,EAAA,CAAA,QAAAC,EAAA,KAAA,QAAA,IAAAC,EAAA,KAAA,UAAA,SAAA,SAAAL,SAAAA,EAAAA,CAAA,GAAA,kBAAA,CAKMA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,GAAAA,wBAAAA,IAAAA,EAAAA,SAAAA,EAAAA,CAAAA,GAAAA,2BAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAOGF,CAAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAAX,EAAA,CAAArB,KAAA,SAAAwC,OAAAN,qCAAA"}