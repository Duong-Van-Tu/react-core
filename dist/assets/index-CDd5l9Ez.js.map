{"version":3,"file":"index-CDd5l9Ez.js","sources":["../../src/modules/sales/components/modals/relationship/delete-relationship.modal.tsx","../../src/modules/sales/components/modals/relationship/add-relationship.modal.tsx","../../src/modules/sales/components/modals/relationship/report-relationship.tsx","../../src/modules/sales/components/modals/relationship/index.tsx","../../src/modules/sales/components/dropdown/relationship.dropdown.tsx","../../src/modules/sales/pages/relationship/columns/index.tsx","../../src/modules/sales/pages/relationship/table-relationship.tsx","../../src/modules/sales/pages/relationship/index.tsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { Pagination } from '@/constants/pagination';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { useRelationship } from '@/modules/sales/services/relationship.service';\nimport { css } from '@emotion/react';\nimport { Button, Row, Space } from 'antd';\nimport { useLocation } from 'react-router-dom';\n\ntype DeleteRelationshipProps = {\n  closeModal: () => void;\n  relationshipIds: string[];\n  data?: DataRelationshipType;\n};\nexport const DeleteRelationship = ({\n  closeModal,\n  relationshipIds,\n  data,\n}: DeleteRelationshipProps) => {\n  const { deleteRelationship, getAllRelationship } = useRelationship();\n  const pageIndex = useRootSelector((state) => state.sale.kpi.pagination?.pageIndex) ?? 0;\n  const [loading] = useWatchLoading(['delete-relationship', false]);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const tab = searchParams.get('tab');\n\n  const handleDeleteRelationship = async () => {\n    const deleteGoal = await deleteRelationship(!!data ? [data.id!] : relationshipIds);\n    if (deleteGoal) {\n      closeModal();\n      if (relationshipIds.length === Pagination.PAGESIZE) {\n        getAllRelationship({\n          pageIndex: pageIndex - 1 || 1,\n          pageSize: Pagination.PAGESIZE,\n          roleType: tab!,\n        });\n      }\n    }\n  };\n\n  return (\n    <div css={rootStyle}>\n      <h3 css={titleStyle}>Đồng ý xoá quyền lợi đã chọn?</h3>\n      <Row justify=\"center\">\n        <Space>\n          <Button onClick={() => closeModal()}>Huỷ</Button>\n          <Button loading={loading} type=\"primary\" danger onClick={handleDeleteRelationship}>\n            Xoá\n          </Button>\n        </Space>\n      </Row>\n    </div>\n  );\n};\n\nconst rootStyle = css`\n  margin-top: 2rem;\n  padding: 0 2rem;\n`;\n\nconst titleStyle = css`\n  font-size: 1.8rem;\n  line-height: 2rem;\n  text-align: center;\n  margin-bottom: 2.4rem;\n  font-weight: 500;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { useRelationship } from '@/modules/sales/services/relationship.service';\nimport { css } from '@emotion/react';\nimport { Button, Col, Form, FormProps, Input, InputNumber, Row, Select, Space } from 'antd';\nimport { Fragment, useEffect, useMemo } from 'react';\n\ntype FieldType = DataAddRelationship;\n\ntype AddRelationshipProps = {\n  closeModal: () => void;\n};\n\nexport const AddRelationship = ({ closeModal }: AddRelationshipProps) => {\n  const { getListCustomer, addRelationship, getAllLevel } = useRelationship();\n  const [loading] = useWatchLoading(['add-relationship', false]);\n  const [form] = Form.useForm();\n  const { customer: customers, level } = useRootSelector((state) => state.sale.relationship);\n  const user = useRootSelector((state) => state.auth.user);\n\n  const customerOptions =\n    useMemo(\n      () =>\n        customers?.map((customer) => ({\n          value: customer.id,\n          label: customer.fullname,\n        })),\n      [customers],\n    ) ?? [];\n\n  const levelOptions =\n    useMemo(\n      () =>\n        level?.map((levelItem) => ({\n          value: levelItem.id,\n          label: levelItem.code,\n        })),\n      [level],\n    ) ?? [];\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const { point } = values;\n    const dataAddRelationship: DataAddRelationship = {\n      ...values,\n      point: point.toString(),\n      applicationUserId: user?.id!,\n    };\n    const add = await addRelationship(dataAddRelationship);\n\n    if (add) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n\n  useEffect(() => {\n    getListCustomer();\n    getAllLevel();\n  }, [getListCustomer, getAllLevel]);\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}> Thêm đề xuất mối quan hệ</h3>\n      <Form\n        form={form}\n        css={formStyle}\n        name=\"add-Relationship\"\n        onFinish={onFinish}\n        layout=\"vertical\"\n      >\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Công ty</span>}\n          name=\"customerId\"\n          rules={[\n            {\n              required: true,\n              message: 'Vui lòng nhập công ty!',\n            },\n          ]}\n        >\n          <Select size=\"middle\" placeholder=\"Chọn công ty\" options={customerOptions} />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Họ tên khách hàng</span>}\n          name=\"customerName\"\n          rules={[\n            {\n              required: true,\n              message: 'Vui lòng nhập họ tên khách hàng!',\n            },\n          ]}\n        >\n          <Input size=\"middle\" placeholder=\"Nhập họ tên khách hàng\" />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Vị trí</span>}\n          name=\"position\"\n          rules={[\n            {\n              required: true,\n              message: 'Vui lòng nhập vị trí!',\n            },\n          ]}\n        >\n          <Input size=\"middle\" placeholder=\"Nhập vị trí\" />\n        </Form.Item>\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Mối quan hệ hiện tại</span>}\n              name=\"currentRelationshipId\"\n              rules={[{ required: true, message: 'Vui lòng nhập mối quan hệ hiện tại!' }]}\n            >\n              <Select\n                size=\"middle\"\n                options={levelOptions}\n                placeholder=\"Nhập mối quan hệ hiện tại\"\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Mối quan hệ mục tiêu</span>}\n              name=\"targetRelationshipId\"\n              rules={[{ required: true, message: 'Vui lòng nhập mối quan hệ mục tiêu!' }]}\n            >\n              <Select\n                size=\"middle\"\n                options={levelOptions}\n                placeholder=\"Nhập mối quan hệ mục tiêu\"\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Lý do cần phải nâng cấp quan hệ</span>}\n          name=\"reason\"\n          rules={[\n            {\n              required: true,\n              message: 'Vui lòng nhập lý do cần phải nâng cấp quan hệ!',\n            },\n          ]}\n        >\n          <Input.TextArea size=\"middle\" placeholder=\"Nhập lý do cần phải nâng cấp quan hệ\" />\n        </Form.Item>\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Điểm mục tiêu</span>}\n          name=\"point\"\n          rules={[\n            {\n              required: true,\n              message: 'Vui lòng nhập điểm mục tiêu!',\n            },\n          ]}\n        >\n          <InputNumber css={inputStyle} size=\"middle\" placeholder=\"Nhập điểm mục tiêu\" />\n        </Form.Item>\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem;\n  .ant-form-item {\n    margin-bottom: 1.4rem;\n  }\n`;\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n  color: #101828;\n`;\n\nconst inputStyle = css`\n  width: 100%;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, Col, Row } from 'antd';\nimport { LocaleFormatter } from '@/components/locale-formatter';\nimport { StatusRelationship } from '@/modules/sales/enum/status.enum';\nimport { Message } from '@/components/message';\n\ntype ReportRelationshipProps = {\n  closeModal: () => void;\n  data: DataRelationshipType;\n};\n\nexport const ReportRelationship = ({ closeModal, data }: ReportRelationshipProps) => {\n  let messageType: MessageType;\n  switch (data?.relationshipStatus.code) {\n    case StatusRelationship.Completed:\n      messageType = 'success';\n      break;\n    case StatusRelationship.Pending:\n    case StatusRelationship.Processing:\n      messageType = 'info';\n      break;\n    default:\n      messageType = 'warning';\n  }\n\n  return (\n    <div css={rootStyle}>\n      <h3 css={titleStyle}>Báo cáo đề xuất mối quan hệ với khách hàng</h3>\n      <div css={contentStyle}>\n        <Row justify=\"space-between\">\n          <Col>Họ và tên</Col>\n          <Col>{data?.applicationUser?.fullName}</Col>\n        </Row>\n        <Row justify=\"space-between\">\n          <Col>Vị trí làm việc</Col>\n          <Col>{data?.position}</Col>\n        </Row>\n        <Row justify=\"space-between\">\n          <Col>Mức độ QH hiện tại</Col>\n          <Col>{data?.currentRelationshipLevel}</Col>\n        </Row>\n        <Row justify=\"space-between\">\n          <Col>Mức độ QH mục tiêu</Col>\n          <Col>{data?.targetRelationshipLevel}</Col>\n        </Row>\n        <Row justify=\"space-between\">\n          <Col>Lý do cần phải nâng cấp quan hệ</Col>\n          <Col>{data?.reason}</Col>\n        </Row>\n        <Row justify=\"space-between\">\n          <Col>Điểm mục tiêu</Col>\n          <Col>{data?.point}</Col>\n        </Row>\n        <Row justify=\"space-between\" align=\"bottom\">\n          <Col>\n            <LocaleFormatter id=\"title.status\" />\n          </Col>\n          <Col>\n            {data.relationshipStatus ? (\n              <Message hasBackground type={messageType}>\n                {data.relationshipStatus.name!}\n              </Message>\n            ) : (\n              ''\n            )}\n          </Col>\n        </Row>\n\n        <Button css={btnConfirmReport} type=\"primary\" onClick={() => closeModal()}>\n          Xác nhận\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nconst rootStyle = css`\n  padding: 1rem;\n`;\n\nconst contentStyle = css`\n  display: flex;\n  flex-direction: column;\n  gap: 1.4rem;\n  font-weight: 500;\n`;\n\nconst titleStyle = css`\n  margin-top: 2rem;\n  font-size: 2rem;\n  line-height: 2.8rem;\n  text-align: center;\n  margin-bottom: 2rem;\n  font-weight: 500;\n`;\n\nconst btnConfirmReport = css`\n  width: 100%;\n  margin-top: 2rem;\n`;\n","import { ModalRelationshipType } from '@/modules/sales/enum/modal.enum';\nimport { Modal } from 'antd';\nimport { ReactNode, createContext, useContext, useState } from 'react';\nimport { DeleteRelationship } from './delete-relationship.modal';\nimport { AddRelationship } from './add-relationship.modal';\nimport { ReportRelationship } from './report-relationship';\n\ntype ModalContextType = {\n  openModal: (modalName: string, data?: DataRelationshipType, relationshipIds?: string[]) => void;\n  closeModal: () => void;\n};\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\n\nexport const useModalRelationship = () => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error('useModalRelationship must be used within a ModalRelationshipProvider');\n  }\n  return context;\n};\n\ntype ModalProviderProps = {\n  children?: ReactNode;\n};\nexport const ModalRelationshipProvider = ({ children }: ModalProviderProps) => {\n  const [currentModal, setCurrentModal] = useState<\n    { modalName: string; data?: DataRelationshipType; relationshipIds?: string[] } | undefined\n  >();\n  const [open, setOpen] = useState<boolean>(false);\n\n  const openModal = (\n    modalName: string,\n    data?: DataRelationshipType,\n    relationshipIds?: string[],\n  ) => {\n    setCurrentModal({ modalName, data, relationshipIds });\n    setOpen(true);\n  };\n\n  const closeModal = () => {\n    setCurrentModal(undefined);\n    setOpen(false);\n  };\n\n  return (\n    <ModalContext.Provider value={{ openModal, closeModal }}>\n      {children}\n      <Modal\n        width={\n          currentModal?.modalName === ModalRelationshipType.DeleteRelationship\n            ? '38rem'\n            : currentModal?.modalName === ModalRelationshipType.ReportRelationship\n              ? '50rem'\n              : '54rem'\n        }\n        open={open}\n        onCancel={closeModal}\n        footer={null}\n      >\n        {currentModal?.modalName === ModalRelationshipType.DeleteRelationship && (\n          <DeleteRelationship\n            closeModal={closeModal}\n            data={currentModal.data!}\n            relationshipIds={currentModal.relationshipIds!}\n          />\n        )}\n\n        {currentModal?.modalName === ModalRelationshipType.AddRelationship && (\n          <AddRelationship closeModal={closeModal} />\n        )}\n\n        {currentModal?.modalName === ModalRelationshipType.ReportRelationship && (\n          <ReportRelationship closeModal={closeModal} data={currentModal.data!} />\n        )}\n      </Modal>\n    </ModalContext.Provider>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, Dropdown } from 'antd';\nimport type { MenuProps } from 'antd';\nimport { CustomIcon } from '@/components/icons';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { useModalRelationship } from '../modals/relationship';\nimport { ModalRelationshipType } from '../../enum/modal.enum';\nimport { useNavigate } from 'react-router-dom';\nimport { getTenant } from '@/utils/common';\n\nenum MenuItem {\n  Report,\n}\n\ntype RelationshipDropdownProps = {\n  data?: DataRelationshipType;\n};\n\nexport function RelationshipDropdown({ data }: RelationshipDropdownProps) {\n  const { openModal } = useModalRelationship();\n  const { formatMessage } = useLocale();\n  const navigate = useNavigate();\n  const tenant = getTenant();\n\n  const handleItemClick = (key: number) => {\n    switch (key) {\n      case MenuItem.Report:\n        openModal(ModalRelationshipType.ReportRelationship, data);\n        break;\n      default:\n        break;\n    }\n  };\n  const items: MenuProps['items'] = [\n    {\n      key: '1',\n      label: <span>{formatMessage({ id: 'title.dropdown.relationship.update' })}</span>,\n      onClick: () => navigate(`/sales/relationship/gains/${data?.id}?tenant=${tenant}`),\n    },\n    {\n      key: '2',\n      label: <span>{formatMessage({ id: 'title.dropdown.relationship.evaluate' })}</span>,\n\n      onClick: () =>\n        navigate(`/sales/relationship/relationshipGainsQuestion/${data?.id}?tenant=${tenant}`),\n    },\n    {\n      key: '3',\n      label: <span>{formatMessage({ id: 'title.dropdown.relationship.report' })}</span>,\n      onClick: () => handleItemClick(MenuItem.Report),\n    },\n  ];\n\n  return (\n    <Dropdown menu={{ items }} placement=\"bottomRight\">\n      <Button css={actionIconBtn}>\n        <CustomIcon type=\"three-dot\" width={16} height={18} />\n      </Button>\n    </Dropdown>\n  );\n}\n\nconst actionIconBtn = css`\n  background: none;\n  border: none;\n  box-shadow: unset;\n  padding: 0;\n`;\n","import { TableProps } from 'antd';\nimport { LocaleFormatter } from '@/components/locale-formatter';\nimport { RelationshipDropdown } from '@/modules/sales/components/dropdown/relationship.dropdown';\n\ntype ColumnsType<T> = TableProps<T>['columns'];\nconst columns: ColumnsType<DataRelationshipType> = [\n  {\n    title: <LocaleFormatter id=\"table.column.relationship.jobPosition\" />,\n    dataIndex: 'position',\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.relationship.targetLevel\" />,\n    dataIndex: 'targetRelationshipLevel',\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.relationship.upgrade\" />,\n    dataIndex: 'reason',\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.relationship.responsiblePerson\" />,\n    dataIndex: ['applicationUser', 'firstName'],\n  },\n\n  {\n    title: <LocaleFormatter id=\"table.column.targetPoint\" />,\n    dataIndex: 'point',\n    render: (targetPoint) => targetPoint,\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.status\" />,\n    dataIndex: ['relationshipStatus', 'name'],\n    render: (status) => status,\n  },\n  {\n    title: '',\n    dataIndex: 'calculationMethod',\n    fixed: 'right',\n    width: '6%',\n    render: (__, record) => <RelationshipDropdown data={record} />,\n  },\n];\n\nexport default columns;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect, useMemo, useState } from 'react';\nimport { TableCustom } from '@/components/table';\nimport columns from './columns';\nimport { Search, SearchParams } from '@/components/search';\nimport { Button, Col, Row } from 'antd';\nimport { CustomIcon } from '@/components/icons';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { Pagination } from '@/constants/pagination';\nimport { Key } from 'antd/es/table/interface';\nimport { usePermission } from '@/hooks/permission.hook';\nimport { RoleType } from '@/enum/role.enum';\nimport { useQuery } from '@/hooks/query.hook';\nimport { useRelationship } from '../../services/relationship.service';\nimport { useModalRelationship } from '../../components/modals/relationship';\nimport { ModalRelationshipType } from '../../enum/modal.enum';\n\nexport default function TableRelationship() {\n  const { getAllRelationship, getAllStatusRelationship } = useRelationship();\n  const { openModal } = useModalRelationship();\n  const [loading, loadingStatus] = useWatchLoading(\n    ['get-relationship', true],\n    ['status-relationship', true],\n  );\n\n  const { data, pagination, status, totalExtend } = useRootSelector(\n    (state) => state.sale.relationship,\n  );\n  const { isSaleDirector, isSale } = usePermission();\n  const [relationshipIds, setRelationshipIds] = useState<string[]>();\n  const { tab, textSearch, time, statusId } = useQuery();\n\n  const columnTable = useMemo(() => {\n    if (isSaleDirector && tab === RoleType.MySelf) {\n      return columns?.slice(1);\n    }\n    return columns;\n  }, [tab, isSaleDirector]);\n\n  const rowSelection = {\n    onChange: (_selectedRowKeys: Key[], selectedRows: DataRelationshipType[]) => {\n      setRelationshipIds(selectedRows.map((row) => row.id!));\n    },\n  };\n\n  const handleSearch = ({ textSearch, statusId, time }: SearchParams) => {\n    getAllRelationship({\n      pageIndex: pagination?.pageIndex ?? Pagination.PAGEINDEX,\n      pageSize: Pagination.PAGESIZE,\n      textSearch,\n      statusId,\n      time,\n      roleType: tab!,\n    });\n  };\n\n  const handleTableChange = (page: number) => {\n    getAllRelationship({\n      pageIndex: page,\n      pageSize: Pagination.PAGESIZE,\n      roleType: tab!,\n      textSearch: textSearch ? decodeURI(textSearch).replace(/\\+/g, ' ') : undefined,\n      time,\n      statusId,\n    });\n  };\n\n  useEffect(() => {\n    getAllRelationship({\n      pageIndex: Pagination.PAGEINDEX,\n      pageSize: Pagination.PAGESIZE,\n      roleType: tab!,\n    });\n    getAllStatusRelationship();\n  }, [getAllRelationship, getAllStatusRelationship, tab]);\n\n  const addRelationshipBtnStyle = isSale\n    ? addRelationshipBtnStyleSale\n    : addRelationshipBtnStyleBase;\n  return (\n    <div css={rootStyle}>\n      {(isSaleDirector || isSale) && tab !== RoleType.Employee && (\n        <Button\n          onClick={() => openModal(ModalRelationshipType.AddRelationship)}\n          type=\"primary\"\n          css={addRelationshipBtnStyle}\n          iconPosition=\"start\"\n          size=\"large\"\n        >\n          <CustomIcon color=\"#fff\" width={16} height={16} type=\"circle-plus\" />\n          <span>Thêm mối quan hệ</span>\n        </Button>\n      )}\n\n      <div css={searchContainer}>\n        <Search onSearch={handleSearch} status={status as any} loadingStatus={loadingStatus} />\n      </div>\n      <Row css={rowHeaderStyle} justify=\"space-between\" align=\"bottom\">\n        <Col>\n          <Button\n            onClick={() =>\n              openModal(ModalRelationshipType.DeleteRelationship, undefined, relationshipIds)\n            }\n            disabled={!relationshipIds}\n            size=\"middle\"\n            danger\n          >\n            Xoá mối quan hệ đã chọn\n          </Button>\n        </Col>\n        <Col>Tổng điểm đạt được: {totalExtend ?? 0}</Col>\n      </Row>\n      <TableCustom\n        rowSelection={rowSelection}\n        columns={columnTable}\n        dataSource={data}\n        loading={loading}\n        rowKey={(record) => record.id}\n        onTableChange={(page) => handleTableChange(page)}\n        pagination={{\n          current: pagination?.pageIndex,\n          pageSize: Pagination.PAGESIZE,\n          total: pagination?.totalRecords,\n          position: ['bottomCenter'],\n        }}\n        scroll={{ x: 1450 }}\n      />\n    </div>\n  );\n}\n\nconst rootStyle = css`\n  position: relative;\n`;\n\nconst addRelationshipBtnStyleBase = css`\n  position: absolute;\n  right: 0;\n  top: -9rem;\n  background: #0070b8;\n  display: flex;\n  align-items: center;\n  gap: 0.2rem;\n  &:hover {\n    background: #0070b8 !important;\n    opacity: 0.9;\n  }\n`;\n\nconst addRelationshipBtnStyleSale = css`\n  ${addRelationshipBtnStyleBase}\n  top: -5rem;\n`;\n\nconst rowHeaderStyle = css`\n  margin: 2.4rem 0 1.4rem 0;\n`;\n\nconst searchContainer = css`\n  margin-top: 2.6rem;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setBreadcrumbItemsAction } from '@/redux/slicers/breadcrumb.slice';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { CustomIcon } from '@/components/icons';\nimport { Tabs, TabsProps } from 'antd';\nimport TableRelationship from './table-relationship';\nimport { usePermission } from '@/hooks/permission.hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useQuery } from '@/hooks/query.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { getTenant } from '@/utils/common';\nimport { RoleType } from '@/enum/role.enum';\nimport { ModalRelationshipProvider } from '../../components/modals/relationship';\n\nexport default function RelationshipPage() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { formatMessage } = useLocale();\n  const { isAdmin, isSaleDirector } = usePermission();\n  const tenant = getTenant();\n  const totalRecords = useRootSelector((state) => state.sale.relationship.pagination?.totalRecords);\n  const { tab: activeKey } = useQuery();\n\n  const items: TabsProps['items'] = [\n    {\n      key: isAdmin ? RoleType.Manager : RoleType.MySelf,\n      label: isAdmin\n        ? 'Mối quan hệ của giám đốc'\n        : formatMessage({ id: 'title.tab.relationship.my' }),\n      children: <TableRelationship />,\n    },\n    {\n      key: RoleType.Employee,\n      label: formatMessage({ id: 'title.tab.relationship.employee' }),\n      children: <TableRelationship />,\n    },\n  ];\n\n  const onChange = (key: string) => {\n    navigate(`?tab=${key}&tenant=${tenant}`);\n  };\n\n  useEffect(() => {\n    if (!activeKey) {\n      navigate(`?tab=${isAdmin ? RoleType.Manager : RoleType.MySelf}&tenant=${tenant}`);\n    }\n  }, [activeKey]);\n\n  useEffect(() => {\n    const breadCrumbItems = [\n      {\n        title: {\n          vi_VN: 'Sale',\n          en_US: 'Sale',\n        },\n      },\n      {\n        title: {\n          vi_VN: 'Mối quan hệ',\n          en_US: 'relationship',\n        },\n      },\n    ];\n\n    dispatch(setBreadcrumbItemsAction(breadCrumbItems));\n  }, [dispatch]);\n\n  return (\n    <ModalRelationshipProvider>\n      <h3 css={titleStyle}>{formatMessage({ id: 'title.document.relationship' })}</h3>\n      <div css={subTitleStyle}>\n        <span>{formatMessage({ id: 'title.document.relationship' })}</span>\n        <CustomIcon width={8} height={8} type=\"dot\" />\n        <span>\n          {totalRecords} {formatMessage({ id: 'title.document.relationship' })}\n        </span>\n      </div>\n      {(isAdmin || isSaleDirector) && (\n        <Tabs activeKey={activeKey} items={items} onChange={onChange} />\n      )}\n      {!(isAdmin || isSaleDirector) && <TableRelationship />}\n    </ModalRelationshipProvider>\n  );\n}\n\nconst subTitleStyle = css`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  font-size: 1.4rem;\n`;\nconst titleStyle = css`\n  font-size: 1.8rem;\n  line-height: 2.3rem;\n  font-weight: 600;\n`;\n"],"names":["DeleteRelationship","closeModal","deleteRelationship","getAllRelationship","pageIndex","pagination","useWatchLoading","state","location","tab","get","rootStyle","jsx","titleStyle","process","Space","Button","NODE_ENV","loading","data","relationshipIds","Pagination","PAGESIZE","roleType","pageSize","_EMOTION_STRINGIFIED_CSS_ERROR__","styles","map","useRelationship","addRelationship","getAllLevel","Form","customers","form","level","useRootSelector","user","customer","id","fullname","levelItem","onFinish","values","code","point","add","dataAddRelationship","useEffect","oncancel","getListCustomer","formTitleStyle","jsxs","formStyle","labelFormItem","required","ReportRelationship","messageType","Completed","StatusRelationship","Processing","contentStyle","Row","Col","_a","LocaleFormatter","Message","ModalContext","createContext","context","ModalRelationshipProvider","currentModal","useState","modalName","setOpen","openModal","children","setCurrentModal","ModalRelationshipType","MenuItem","formatMessage","navigate","useNavigate","tenant","key","handleItemClick","items","label","onClick","name","Dropdown","CustomIcon","columns","title","dataIndex","render","targetPoint","status","fixed","width","__","record","RelationshipDropdown","TableRelationship","getAllStatusRelationship","loadingStatus","totalExtend","isSaleDirector","RoleType","isSale","textSearch","time","handleSearch","statusId","onChange","handleTableChange","page","addRelationshipBtnStyleBase","PAGEINDEX","addRelationshipBtnStyle","total","position","Search","TableCustom","rowSelection","RelationshipPage","dispatch","isAdmin","getTenant","totalRecords","activeKey","Manager","MySelf","useQuery","Employee","setBreadcrumbItemsAction","breadCrumbItems","vi_VN","en_US","subTitleStyle","Tabs","toString"],"mappings":"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"}