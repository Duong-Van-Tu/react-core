{"version":3,"file":"index-BkcqfjNh.js","sources":["../../src/modules/category/enum/question-gains.enum.ts","../../src/modules/category/services/question-gain.service.ts","../../src/modules/category/components/modals/question-gains/add-questionGain.modal.tsx","../../src/modules/category/components/modals/question-gains/delete-questionGain.modal.tsx","../../src/modules/category/components/modals/question-gains/update-questionGain.modal.tsx","../../src/modules/category/components/modals/question-gains/index.tsx","../../src/modules/category/components/dropdown/question-gains.dropdown.tsx","../../src/modules/category/pages/questions-gains/column/question-gains.column.tsx","../../src/modules/category/pages/questions-gains/table-questionGain.tsx","../../src/modules/category/pages/questions-gains/index.tsx"],"sourcesContent":["export enum ModalQuestionGainsType {\n  EditQuestion = 'Edit Question',\n  DeleteQuestion = 'Delete Question',\n  AddQuestion = 'Add Question',\n}\n","import { useApi, useCaller } from '@/hooks/api.hook';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { convertToUppercaseFirstLetter } from '@/utils/get-pathCode';\nimport { Pagination } from '@/constants/pagination';\nimport { generateUrlParams, getTenant } from '@/utils/common';\nimport dayjs from 'dayjs';\nimport {\n  setListQuestionGainAction,\n  addQuestionGainAction,\n  updateQuestionGainAction,\n  deleteQuestionGainAction,\n} from '../reducers/slicers/question-gain.slice';\n\ntype FilterKPIType = {\n  pageIndex: number;\n  pageSize: number;\n  textSearch?: string;\n  statusId?: string;\n  time?: string;\n  roleType: string;\n};\n\nexport const useQuestionGain = () => {\n  const api = useApi('');\n  const caller = useCaller();\n  const dispatch = useDispatch();\n  const tenant = getTenant();\n  const user = useRootSelector((state) => state.auth.user);\n\n  const getAllQuestionGain = useCallback(\n    async ({\n      pageIndex = Pagination.PAGEINDEX,\n      pageSize = Pagination.PAGESIZE,\n      textSearch,\n      statusId,\n      time = dayjs().year().toString(),\n      roleType,\n    }: FilterKPIType) => {\n      const queryParams: { [key: string]: string | undefined } = {\n        PageIndex: pageIndex.toString(),\n        PageSize: pageSize.toString(),\n        UserId: user?.id,\n        RoleId: user?.applicationRoles[0].id,\n        StatusId: statusId,\n        Time: `1-1-${time}`, // value is first day Of year\n        TextSearch: textSearch,\n        tenant: tenant,\n        roleType,\n      };\n\n      const urlParams = generateUrlParams(queryParams);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/GainsQuestion/get-list-with-pagination?${urlParams}`),\n        {\n          loadingKey: 'get-questionGain',\n        },\n      );\n      if (succeeded) {\n        const { items, totalRecords, pageIndex, totalPages, totalExtend } = data;\n        dispatch(\n          setListQuestionGainAction({\n            data: items,\n            pagination: {\n              pageIndex,\n              totalRecords,\n              totalPages,\n            },\n            totalExtend,\n          }),\n        );\n      }\n    },\n    [caller, api],\n  );\n\n  const addQuestionGain = useCallback(\n    async (values: DataQuestionGainsType) => {\n      const dataAddQuestionGain = convertToUppercaseFirstLetter({ ...values });\n\n      const { data, succeeded } = await caller(\n        () =>\n          api.post(`/GainsQuestion/add-or-update?tenant=${tenant}`, [\n            { data: dataAddQuestionGain },\n          ]),\n        { loadingKey: 'add-questionGain' },\n      );\n\n      if (succeeded) {\n        dispatch(addQuestionGainAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const deleteQuestionGain = useCallback(\n    async (questionIds: string[]) => {\n      const ids = questionIds.join(',');\n      const ApplicationUserId = `${user?.id}?tenant=${tenant}`;\n      const { succeeded } = await caller(\n        () => api.del(`/GainsQuestion/delete-by-ids/${ids}/${ApplicationUserId}`),\n        { loadingKey: 'delete-questionGain' },\n      );\n\n      if (succeeded !== null && succeeded) {\n        dispatch(deleteQuestionGainAction(questionIds));\n        return true;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const updateQuestionGain = useCallback(\n    async (values: DataQuestionGainsType) => {\n      const dataUpdateQuestionGain = convertToUppercaseFirstLetter({ ...values });\n\n      const { data, succeeded } = await caller(\n        () =>\n          api.post(`/GainsQuestion/add-or-update?tenant=${tenant}`, [\n            { id: values.id, data: dataUpdateQuestionGain },\n          ]),\n        { loadingKey: 'edit-questionGain' },\n      );\n\n      if (succeeded) {\n        dispatch(updateQuestionGainAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  return { getAllQuestionGain, addQuestionGain, deleteQuestionGain, updateQuestionGain };\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Fragment } from 'react';\nimport { Button, Form, FormProps, Input, Row, Space } from 'antd';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useQuestionGain } from '@/modules/category/services/question-gain.service';\n\ntype FieldType = {\n  code: number;\n  content: string;\n  description: string;\n};\n\ntype AddQuestionGainProps = {\n  closeModal: () => void;\n};\n\nexport const AddQuestionGain = ({ closeModal }: AddQuestionGainProps) => {\n  const [form] = Form.useForm();\n  const { addQuestionGain } = useQuestionGain();\n  const [loading] = useWatchLoading(['add-questionGain', false]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const dataAddQuestionGain = {\n      ...values,\n      code: values.code.toString(),\n    };\n    const add = await addQuestionGain(dataAddQuestionGain);\n    if (add) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n    form.resetFields();\n  };\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Thêm câu hỏi bằng GAIN</h3>\n      <Form\n        form={form}\n        css={formAddQuestionGainStyle}\n        name=\"add-questionGain\"\n        onFinish={onFinish}\n        layout=\"vertical\"\n      >\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Số thứ tự</span>}\n          name=\"code\"\n          rules={[{ required: false, message: 'Vui lòng nhập số thứ tự!' }]}\n        >\n          <Input placeholder=\"Nhập số thứ tự\" />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Câu hỏi</span>}\n          name=\"content\"\n          rules={[{ required: true, message: 'Vui lòng nhập câu hỏi!' }]}\n        >\n          <Input placeholder=\"Nhập tên câu hỏi\" />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Mô tả</span>}\n          name=\"description\"\n          rules={[{ required: false, message: 'Vui lòng nhập mô tả!' }]}\n        >\n          <Input placeholder=\"Nhập mô tả\" />\n        </Form.Item>\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst formAddQuestionGainStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { Pagination } from '@/constants/pagination';\nimport { css } from '@emotion/react';\nimport { Button, Row, Space } from 'antd';\nimport { useLocation } from 'react-router-dom';\nimport { useQuestionGain } from '@/modules/category/services/question-gain.service';\ntype DeleteQuestionGainProps = {\n  closeModal: () => void;\n  data?: DataQuestionGainsType;\n  questionIds: string[];\n};\nexport const DeleteQuestionGain = ({ closeModal, questionIds }: DeleteQuestionGainProps) => {\n  const { deleteQuestionGain, getAllQuestionGain } = useQuestionGain();\n  const pageIndex =\n    useRootSelector((state) => state.category.questionGain.pagination?.pageIndex) ?? 0;\n  const [loading] = useWatchLoading(['delete-questionGain', false]);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const tab = searchParams.get('tab');\n  const handledeleteQuestionGain = async () => {\n    const deleteclient = await deleteQuestionGain(questionIds);\n    if (deleteclient) {\n      getAllQuestionGain({\n        pageIndex: pageIndex || 1,\n        pageSize: Pagination.PAGESIZE,\n        roleType: tab!,\n      });\n\n      closeModal();\n    } else {\n      console.error('Failed to delete question');\n    }\n  };\n  return (\n    <div css={rootStyle}>\n      <h3 css={titleStyle}>Đồng ý xoá các mục tiêu đã chọn?</h3>\n      <Row justify=\"center\">\n        <Space>\n          <Button onClick={() => closeModal()}>Huỷ</Button>\n          <Button loading={loading} type=\"primary\" danger onClick={handledeleteQuestionGain}>\n            Xoá\n          </Button>\n        </Space>\n      </Row>\n    </div>\n  );\n};\n\nconst rootStyle = css`\n  margin-top: 2rem;\n  padding: 0 2rem;\n`;\n\nconst titleStyle = css`\n  font-size: 1.8rem;\n  line-height: 2rem;\n  text-align: center;\n  margin-bottom: 2.4rem;\n  font-weight: 500;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Fragment, useEffect } from 'react';\nimport { Button, Form, FormProps, Input, Row, Space } from 'antd';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useQuestionGain } from '@/modules/category/services/question-gain.service';\n\ntype FieldType = {\n  id?: string;\n  code: number;\n  content: string;\n  description: string;\n};\n\ntype UpdateQuestionGainProps = {\n  closeModal: () => void;\n  data: DataQuestionGainsType;\n};\n\nexport const UpdateQuestionGain = ({ closeModal, data }: UpdateQuestionGainProps) => {\n  const [form] = Form.useForm();\n  const { updateQuestionGain } = useQuestionGain();\n  const [loading] = useWatchLoading(['edit-questionGain', false]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const dataUpdateQuestionGain = {\n      ...values,\n      id: data.id,\n      code: values.code.toString(),\n    };\n    const edit = await updateQuestionGain(dataUpdateQuestionGain);\n    if (edit) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n\n  useEffect(() => {\n    form.setFieldsValue(data);\n  }, [data]);\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Thêm câu hỏi bằng GAIN</h3>\n      <Form\n        form={form}\n        css={formUpdateQuestionGainStyle}\n        name=\"add-questionGain\"\n        onFinish={onFinish}\n        layout=\"vertical\"\n      >\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Số thứ tự</span>}\n          name=\"code\"\n          rules={[{ required: false, message: 'Vui lòng nhập số thứ tự!' }]}\n        >\n          <Input placeholder=\"Nhập số thứ tự\" disabled />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Câu hỏi</span>}\n          name=\"content\"\n          rules={[{ required: true, message: 'Vui lòng nhập câu hỏi!' }]}\n        >\n          <Input placeholder=\"Nhập tên câu hỏi\" />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Mô tả</span>}\n          name=\"description\"\n          rules={[{ required: false, message: 'Vui lòng nhập mô tả!' }]}\n        >\n          <Input placeholder=\"Nhập mô tả\" />\n        </Form.Item>\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst formUpdateQuestionGainStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n`;\n","import { ModalQuestionGainsType } from '@/modules/category/enum/question-gains.enum';\nimport { Modal } from 'antd';\nimport { ReactNode, createContext, useContext, useState } from 'react';\nimport { AddQuestionGain } from './add-questionGain.modal';\nimport { DeleteQuestionGain } from './delete-questionGain.modal';\nimport { UpdateQuestionGain } from './update-questionGain.modal';\n\ntype ModalContexttype = {\n  openModal: (modalName: string, data?: DataQuestionGainsType, questionIds?: string[]) => void;\n  closeModal: () => void;\n};\nconst ModalContext = createContext<ModalContexttype | undefined>(undefined);\n\nexport const useModalQuestionGains = () => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error('useModalQuestionGains must be used within a ModalQuestionGainsProvider');\n  }\n  return context;\n};\n\ntype ModalQuestionGainsProviderProps = {\n  children?: ReactNode;\n};\n\nexport const ModalQuestionGainsProvider = ({ children }: ModalQuestionGainsProviderProps) => {\n  const [currentModal, setCurrentModal] = useState<\n    { modalName: string; data?: DataQuestionGainsType; questionIds?: string[] } | undefined\n  >();\n  const [open, setOpen] = useState<boolean>(false);\n\n  const openModal = (modalName: string, data?: DataQuestionGainsType, questionIds?: string[]) => {\n    setCurrentModal({ modalName, data, questionIds });\n    setOpen(true);\n  };\n\n  const closeModal = () => {\n    setCurrentModal(undefined);\n    setOpen(false);\n  };\n\n  return (\n    <ModalContext.Provider value={{ openModal, closeModal }}>\n      {children}\n      <Modal open={open} onCancel={closeModal} footer={null}>\n        {currentModal?.modalName === ModalQuestionGainsType.EditQuestion && (\n          <UpdateQuestionGain closeModal={closeModal} data={currentModal.data!} />\n        )}\n        {currentModal?.modalName === ModalQuestionGainsType.DeleteQuestion && (\n          <DeleteQuestionGain\n            closeModal={closeModal}\n            data={currentModal.data!}\n            questionIds={currentModal.questionIds!}\n          />\n        )}\n        {currentModal?.modalName === ModalQuestionGainsType.AddQuestion && (\n          <AddQuestionGain closeModal={closeModal} />\n        )}\n      </Modal>\n    </ModalContext.Provider>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, Dropdown } from 'antd';\nimport type { MenuProps } from 'antd';\nimport { CustomIcon } from '@/components/icons';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { ModalQuestionGainsType } from '../../enum/question-gains.enum';\nimport { useModalQuestionGains } from '../modals/question-gains';\n\nenum MenuItem {\n  EditQuestion = 1,\n}\n\ntype QuestionGainsDropdownProps = {\n  data?: DataQuestionGainsType;\n  questionIds?: string[];\n};\n\nexport function QuestionGainsDropdown({ data }: QuestionGainsDropdownProps) {\n  const { openModal } = useModalQuestionGains();\n  const { formatMessage } = useLocale();\n\n  const handleItemClick = (key: number) => {\n    switch (key) {\n      case MenuItem.EditQuestion:\n        openModal(ModalQuestionGainsType.EditQuestion, data);\n        break;\n      default:\n        break;\n    }\n  };\n  const items: MenuProps['items'] = [\n    {\n      key: '1',\n      label: <span>{formatMessage({ id: 'dropdown.edit' })}</span>,\n      onClick: () => handleItemClick(MenuItem.EditQuestion),\n    },\n  ];\n\n  return (\n    <Dropdown menu={{ items }} placement=\"bottomRight\">\n      <Button css={actionIconBtn}>\n        <CustomIcon type=\"three-dot\" width={16} height={18} />\n      </Button>\n    </Dropdown>\n  );\n}\n\nconst actionIconBtn = css`\n  background: none;\n  border: none;\n  box-shadow: unset;\n  padding: 0;\n`;\n","import { TableProps } from 'antd';\nimport { LocaleFormatter } from '@/components/locale-formatter';\nimport { QuestionGainsDropdown } from '@/modules/category/components/dropdown/question-gains.dropdown';\n\ntype ColumnsType<T> = TableProps<T>['columns'];\nexport const questionGainsColumns: ColumnsType<DataQuestionGainsType> = [\n  {\n    title: <LocaleFormatter id=\"table.column.questionGainsCode\" />,\n    dataIndex: 'code',\n    render: (code) => code,\n  },\n\n  {\n    title: <LocaleFormatter id=\"table.column.questionGainsQuestion\" />,\n    dataIndex: 'content',\n    render: (content) => content,\n  },\n\n  {\n    title: '',\n    dataIndex: 'calculationMethod',\n    fixed: 'right',\n    width: '6%',\n    render: (__, record) => <QuestionGainsDropdown data={record} />,\n  },\n];\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { TableCustom } from '@/components/table';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Button } from 'antd';\nimport { Search, SearchParams } from '@/components/search';\nimport { CustomIcon } from '@/components/icons';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { Key } from 'antd/es/table/interface';\nimport { Pagination } from '@/constants/pagination';\nimport { useRootSelector } from '@/hooks/selector.hook';\n\nimport { questionGainsColumns } from './column/question-gains.column';\nimport { useModalQuestionGains } from '../../components/modals/question-gains';\nimport { useQuestionGain } from '../../services/question-gain.service';\n\nexport default function TableQuestionGains() {\n  const [questionIds, setQuestionIds] = useState<string[]>();\n  const { openModal } = useModalQuestionGains();\n  const { getAllQuestionGain } = useQuestionGain();\n  const [loading] = useWatchLoading(['get-questionGain', true]);\n  const { data, pagination } = useRootSelector((state) => state.category.questionGain);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const tab = searchParams.get('tab');\n\n  const handleSearch = ({ textSearch, time }: SearchParams) => {\n    getAllQuestionGain({\n      pageIndex: pagination?.pageIndex ?? Pagination.PAGEINDEX,\n      pageSize: Pagination.PAGESIZE,\n      textSearch,\n      time,\n      roleType: tab!,\n    });\n  };\n\n  const handleTableChange = (page: number) => {\n    getAllQuestionGain({\n      pageIndex: page,\n      pageSize: Pagination.PAGESIZE,\n      roleType: tab!,\n    });\n  };\n\n  const rowSelection = {\n    onChange: (_selectedRowKeys: Key[], selectedRows: DataReationshipLevelType[]) => {\n      setQuestionIds(selectedRows.map((row) => row.id!));\n    },\n  };\n\n  const handleDeleteSupplier = () => {\n    openModal('Delete Question', undefined, questionIds);\n  };\n\n  useEffect(() => {\n    getAllQuestionGain({\n      pageIndex: Pagination.PAGEINDEX,\n      pageSize: Pagination.PAGESIZE,\n      roleType: tab!,\n    });\n  }, [getAllQuestionGain, tab]);\n\n  return (\n    <div css={rootStyle}>\n      <Button\n        onClick={() => openModal('Add Question')}\n        type=\"primary\"\n        css={addRelationshipLvStyle}\n        iconPosition=\"start\"\n        size=\"large\"\n      >\n        <CustomIcon color=\"#fff\" width={16} height={16} type=\"circle-plus\" />\n        <span>Thêm câu hỏi</span>\n      </Button>\n\n      <div css={searchContainer}>\n        <Search onSearch={handleSearch} />\n      </div>\n      <div css={checkBoxStyle}>\n        <Button disabled={!questionIds} onClick={() => handleDeleteSupplier()} size=\"large\" danger>\n          Xoá mục tiêu đã chọn\n        </Button>\n      </div>\n      <TableCustom\n        rowSelection={rowSelection}\n        columns={questionGainsColumns}\n        dataSource={data}\n        loading={loading}\n        rowKey={(record) => record.id}\n        onTableChange={(page) => handleTableChange(page)}\n        pagination={{\n          current: pagination?.pageIndex,\n          pageSize: Pagination.PAGESIZE,\n          total: pagination?.totalRecords,\n          position: ['bottomCenter'],\n        }}\n        scroll={{ x: 1450 }}\n      />\n    </div>\n  );\n}\n\nconst rootStyle = css`\n  position: relative;\n`;\n\nconst addRelationshipLvStyle = css`\n  position: absolute;\n  right: 0;\n  top: -6.5rem;\n  background: #0070b8;\n  display: flex;\n  align-items: center;\n  gap: 0.2rem;\n  &:hover {\n    background: #0070b8 !important;\n    opacity: 0.9;\n  }\n`;\n\nconst searchContainer = css`\n  margin-top: 2.6rem;\n`;\n\nconst checkBoxStyle = css`\n  margin: 1.1rem 0;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect } from 'react';\nimport { setBreadcrumbItemsAction } from '@/redux/slicers/breadcrumb.slice';\nimport { useDispatch } from 'react-redux';\nimport { ModalQuestionGainsProvider } from '../../components/modals/question-gains';\nimport TableQuestionGains from './table-questionGain';\nexport default function QuestionrPage() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const breadCrumbItems = [\n      {\n        title: {\n          vi_VN: 'Danh mục',\n          en_US: 'Category',\n        },\n      },\n      {\n        title: {\n          vi_VN: 'Câu hỏi bằng GAINS',\n          en_US: 'Questions using GAINS',\n        },\n      },\n    ];\n    dispatch(setBreadcrumbItemsAction(breadCrumbItems));\n  }, [dispatch]);\n  return (\n    <ModalQuestionGainsProvider>\n      <h3 css={titleStyle}>Câu hỏi bảng GAIN</h3>\n      <TableQuestionGains />\n    </ModalQuestionGainsProvider>\n  );\n}\nconst titleStyle = css`\n  font-size: 2.4rem;\n  line-height: 2.8rem;\n  font-weight: 600;\n  color: rgba(16, 24, 40, 1);\n  margin-bottom: 0.5rem;\n`;\n"],"names":["ModalQuestionGainsType","EditQuestion","DeleteQuestion","AddQuestion","useQuestionGain","api","useApi","caller","useCaller","dispatch","useDispatch","tenant","getTenant","user","useRootSelector","state","auth","getAllQuestionGain","useCallback","pageIndex","Pagination","PAGEINDEX","pageSize","PAGESIZE","textSearch","statusId","time","dayjs","year","toString","roleType","queryParams","PageIndex","PageSize","UserId","id","RoleId","applicationRoles","StatusId","Time","TextSearch","urlParams","generateUrlParams","data","succeeded","post","loadingKey","items","totalRecords","totalPages","totalExtend","setListQuestionGainAction","pagination","addQuestionGain","values","dataAddQuestionGain","convertToUppercaseFirstLetter","addQuestionGainAction","deleteQuestionGain","questionIds","ids","join","ApplicationUserId","del","deleteQuestionGainAction","updateQuestionGain","dataUpdateQuestionGain","updateQuestionGainAction","Row","closeModal","form","Form","code","loading","useWatchLoading","onFinish","add","oncancel","Fragment","jsx","formTitleStyle","jsxs","formAddQuestionGainStyle","_EMOTION_STRINGIFIED_CSS_ERROR__","process","labelFormItem","DeleteQuestionGain","_a","location","useLocation","searchParams","rootStyle","titleStyle","Space","Button","NODE_ENV","deleteclient","console","styles","map","edit","useEffect","formUpdateQuestionGainStyle","ModalContext","createContext","context","ModalQuestionGainsProvider","children","currentModal","setCurrentModal","useState","setOpen","modalName","openModal","MenuItem","formatMessage","handleItemClick","label","onClick","actionIconBtn","CustomIcon","questionGainsColumns","title","LocaleFormatter","dataIndex","render","content","fixed","width","__","record","QuestionGainsDropdown","TableQuestionGains","setQuestionIds","tab","get","handleTableChange","page","rowSelection","_selectedRowKeys","selectedRows","onChange","current","total","position","searchContainer","handleSearch","checkBoxStyle","TableCustom","QuestionrPage","setBreadcrumbItemsAction","vi_VN","en_US","name"],"mappings":"wsBAAYA,IAAAA,GAAAA,IACVC,EAAAA,aAAe,gBACfC,EAAAA,eAAiB,kBACjBC,EAAAA,YAAc,eAHJH,IAAAA,GAAAA,CAAAA,CAAAA,ECwBL,MAAMI,EAAkBA,IAAM,CAC7BC,MAAAA,EAAMC,EAAO,EAAE,EACfC,EAASC,IACTC,EAAWC,IACXC,EAASC,IACTC,EAAOC,EAA2BC,GAAAA,EAAMC,KAAKH,IAAI,EAEjDI,EAAqBC,EAAAA,YACzB,MAAO,CACLC,UAAAA,EAAYC,EAAWC,UACvBC,SAAAA,EAAWF,EAAWG,SACtBC,WAAAA,EACAC,SAAAA,EACAC,KAAAA,EAAOC,GAAAA,EAAQC,KAAAA,EAAOC,SAAS,EAC/BC,SAAAA,CAAAA,IACmB,CACnB,MAAMC,EAAqD,CACzDC,UAAWb,EAAUU,SAAS,EAC9BI,SAAUX,EAASO,SAAS,EAC5BK,OAAQrB,GAAAA,YAAAA,EAAMsB,GACdC,OAAQvB,GAAAA,YAAAA,EAAMwB,iBAAiB,GAAGF,GAClCG,SAAUb,EACVc,KAAO,OAAMb,CAAK,GAClBc,WAAYhB,EACZb,OAAAA,EACAmB,SAAAA,CAAAA,EAGIW,EAAYC,EAAkBX,CAAW,EAEzC,CAAEY,KAAAA,EAAMC,UAAAA,CAAAA,EAAc,MAAMrC,EAChC,IAAMF,EAAIwC,KAAM,2CAA0CJ,CAAU,EAAC,EACrE,CACEK,WAAY,kBAAA,CAEhB,EACA,GAAIF,EAAW,CACP,KAAA,CAAEG,MAAAA,EAAOC,aAAAA,EAAc7B,UAAAA,EAAW8B,WAAAA,EAAYC,YAAAA,CAAgBP,EAAAA,EACpElC,EACE0C,EAA0B,CACxBR,KAAMI,EACNK,WAAY,CACVjC,UAAAA,EACA6B,aAAAA,EACAC,WAAAA,CACF,EACAC,YAAAA,CACD,CAAA,CACH,CACF,CAAA,EAEF,CAAC3C,EAAQF,CAAG,CACd,EAEMgD,EAAkBnC,cACtB,MAAOoC,GAAkC,CACvC,MAAMC,EAAsBC,EAA8B,CAAE,GAAGF,CAAAA,CAAQ,EAEjE,CAAEX,KAAAA,EAAMC,UAAAA,CAAAA,EAAc,MAAMrC,EAChC,IACEF,EAAIwC,KAAM,uCAAsClC,CAAO,GAAG,CACxD,CAAEgC,KAAMY,CAAqB,CAAA,CAC9B,EACH,CAAET,WAAY,kBAAA,CAChB,EAEA,OAAIF,GACFnC,EAASgD,EAAsBd,EAAK,CAAC,CAAC,CAAC,EAChCC,GAEF,EAAA,EAGT,CAACvC,EAAKE,CAAM,CACd,EAEMmD,EAAqBxC,cACzB,MAAOyC,GAA0B,CACzBC,MAAAA,EAAMD,EAAYE,KAAK,GAAG,EAC1BC,EAAqB,GAAEjD,GAAAA,YAAAA,EAAMsB,EAAG,WAAUxB,CAAO,GACjD,CAAEiC,UAAAA,CAAU,EAAI,MAAMrC,EAC1B,IAAMF,EAAI0D,IAAK,gCAA+BH,CAAI,IAAGE,CAAkB,EAAC,EACxE,CAAEhB,WAAY,qBAAA,CAChB,EAEIF,OAAAA,IAAc,MAAQA,GACfoB,EAAAA,EAAyBL,CAAW,CAAC,EACvC,IAEF,EAAA,EAGT,CAACtD,EAAKE,CAAM,CACd,EAEM0D,EAAqB/C,cACzB,MAAOoC,GAAkC,CACvC,MAAMY,EAAyBV,EAA8B,CAAE,GAAGF,CAAAA,CAAQ,EAEpE,CAAEX,KAAAA,EAAMC,UAAAA,CAAAA,EAAc,MAAMrC,EAChC,IACEF,EAAIwC,KAAM,uCAAsClC,CAAO,GAAG,CACxD,CAAEwB,GAAImB,EAAOnB,GAAIQ,KAAMuB,CAAwB,CAAA,CAChD,EACH,CAAEpB,WAAY,mBAAA,CAChB,EAEA,OAAIF,GACFnC,EAAS0D,EAAyBxB,EAAK,CAAC,CAAC,CAAC,EACnCC,GAEF,EAAA,EAGT,CAACvC,EAAKE,CAAM,CACd,EAEO,MAAA,CAAEU,mBAAAA,EAAoBoC,gBAAAA,EAAiBK,mBAAAA,EAAoBO,mBAAAA,CAAAA,CACpE,EC3IyCG,GAAAA,CAAAA,CAoBrC,WAAAC,CAA4B,IAAAA,CAAA,KAAA,CAAAC,CAAA,EAAAC,EAAA,QAAA,EACvBjB,CACHkB,gBAAAA,GAAAA,EAAAA,EAA2B,CAAAC,CAAA,EAAAC,EAAA,CAAA,mBAAA,EAAA,CAAA,EAC7BC,EAAA,UAEIC,MAAAA,EAAK,CACPN,GAAAA,EACW,KAAAhB,EAAAA,KAAAA,SAAAA,CAAAA,EAEf,MAAAD,EAAAE,CAAA,IAGae,EAAA,YAAA,EACMD,IACnB,EAIKQ,EAAA,IAAA,KAWuBP,EAAA,YAAA,CAAA,EAAgB,SAAAQ,EAAAA,SAAA,CAQ5B,UAAYC,EAAwC,KAAA,CAAC,IAAAC,GAK/D,SAAA,wBAAA,CAaI,EAAAC,EAEJV,EAAA,CAIR,KAAAD,EAAA,IAAAY,GAAA,KAEoB,mBAAA,SAAAP,EAAAQ,OAAAA,WAAAA,SAAAA,CAAAA,EAAAA,EAAAA,KAAAA,CAOUC,QAAAA,OAAAA,CAAA,IAAAC,EAAA,SAAA,WAAA,CAAA,EAAA,KAAA,OAQX,MAAA,CAAA,CAAA,SAAA,sCAAA,8zBChGgBC,GAAA,CAAA,CAQyD,WAAAjB,EAAAA,YAAAA,CAAAA,IAAAV,CAAA,KAAA,CACpF,mBAAAD,EAAAA,mBAAAA,GAAAzC,EAAAA,EAAAE,EAAAL,EAAAC,UAAA,OAAAwE,EAAAxE,EAAA,SAAA,aAAA,aAAA,YAAAwE,EAAA,UAAA,GAAA,EAAE7B,CAAAA,CAAAA,EAAoBzC,EAAAA,CAAAA,wBAAAA,CAAAA,EAAuCuE,EAAAC,IAG7DC,oCAA6BF,KAAAA,EAgBjC,SAAA,MAAA,CAGA,IAAAG,GACG,SAAA,CAAAZ,EAAAa,KAAAA,CACA,IAAAA,GAGG,SAAA,kCAAA,CAIJ,EAAAb,KAGN,QAEe,SAAA,WAAAc,EAAA,CAAA,SAAA,CAAAd,EAAAe,EAAA,CAAAV,QAAAA,IAAAA,EAAAW,EAAA,SAAA,KAAA,CAAA,EAAAhB,EAAAe,EAAA,CAAA,QAAArB,EAAA,KAAA,UAAA,OAAA,GAAA,QAhCgB,SAAA,SACYe,CAAAA,MAGlB,UAAArE,GAAA,EACjB6E,WAAc,SACG1E,SAAAF,CAAAA,CAAAG,EACO8C,KAKf,QAAA,MAAA,2BAAA,CACN4B,EAmBId,SAAAA,KAAAA,CAAA,CAAA,CAAA,CAKCC,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAO,GAAA,CAAAO,KAAA,QAAAC,OAAA,gCAAA,uHCpDyB/B,GAAAA,CAAAA,CAuBhCd,WAAAA,EAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,EAAAA,QAAAA,GAEHkB,mBAAAA,GAAAA,EAAAA,EAA2B,CAAAC,CAAA,EAAAC,EAAA,CAAA,oBAAA,EAAA,CAAA,EAC7BC,EAAA,UAEIyB,MAAAA,EAAM,CACR9B,GAAAA,EACW,GAAAhB,EAAAA,GACbnB,KAAAA,EAAAA,KAAAA,SAAAA,CAAAA,EAGF,MAAA8B,EAAAC,CAAA,IAEAI,EAAA,YAAA,EAEgBD,MAIhBQ,EAAA,IAAA,MAagBwB,OAAAA,EAAAA,UAAA,IAAA,CAAuDA,EAAAA,eAE9D1D,CAAA,CAAA,EACH2B,CAAAA,MAKsBQ,EAAAA,SAAA,CAAe,UAGrCC,EAKU,KAAA,CAAA,IAAAC,GAAY,SAAA,wBAAA,CAc1B,EAAAC,EAAAV,EAAA,CAIgB,KAAAD,EAAA,IAAAgC,GAAA,KAAA,mBAAA,SAAA3B,EAOaS,OAAAA,WAAAA,SAAAW,CAAAA,EAAAA,EAAAA,KAAAA,CAAA,QAAA,OAAA,CAAA,IAAAV,EAAA,SAAA,WAAA,CAAA,EAQd,KAAA,OAAA,MAAA,CAAA,CAAA,SAAA,g3BCvGnBkB,EAAmCC,EAAAA,cAAA,MAAA,EAYzBD,EAAkF,IAAA,CAEnFE,MAAAA,gBAAAA,EACTA,GAAAA,CAAAA,EAMO,0FAAsF,OAAAA,CAC3F,EAGAC,GAAA,CAAA,CAGkD,SAAAC,CAAA,IAAAA,CAAA,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAChDC,CAAAA,EAAAA,CAAAA,EAAYD,EAAA,SAAA,EAAA,EAIZD,EAAyB,CAAAG,IAAArD,IAAA,CAE3BkD,EAAAI,CAGG,UAAAD,EAAAA,KAAAA,EAAArE,YAAAA,CAAAA,CAAAgB,EAAAoD,EAAA,EAAA,CAA+BE,EAAW5C,EAAAA,IAAAA,CACxCsC,QAAAA,EACDE,EAAAA,EAAAA,CACiBG,EAEd,OAAA/B,EAAAsB,EAAA,SAAA,CAWH,MACF,CAAAU,UAAAA,EAAA5C,WAAAA,CAEJsC,EAAAA,SAAAA,CAAAA,EAAAA,EAAAA,GAAAA,+SCpDKO,SAAAA,GAAAA,CAUyC,KAAAvE,CAAA,EAAAA,CAAA,KAAA,CACtC,UAAAsE,GAAAA,EAAAA,EAAA,CAAEE,cAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAEFC,OAAAA,EAAAA,CACJ,IAAA,GACOF,EAAAA,EAAAA,aAAAA,CAAAA,EACOlH,KAGV,CAAA,EAEN+C,EAAA,CAAA,CACA,QAGIsE,QAAO,OAAA,CAAuBlF,SAAIgF,EAAA,CAAA,GAAA,eAAA,CAAA,CAAA,CAAmBG,EACrDA,QAAAA,IAAAA,EAAAA,CAAAA,CAAAA,GAKmCvE,SAAAA,GAAAA,MAClC,CAOY,MAAAA,CAAA,EAAA,UAAA,cAAA,WAAA+C,EAAA,CAAA,IAAAyB,GAAA,WAAAC,EAAA,CAAA,KAAA,YAAA,MAAA,GAAArC,OAAAA,EAAAA,CAAA,CAAA,8FC3CNsC,GAA2D,CACtE,CACEC,MAAO3C,EAAC4C,EAAgB,CAAA,GAAG,gCAAmC,CAAA,EAC9DC,UAAW,OACXC,OAAkBrD,GAAAA,CACpB,EAEA,CACEkD,MAAO3C,EAAC4C,EAAgB,CAAA,GAAG,oCAAuC,CAAA,EAClEC,UAAW,UACXC,OAAqBC,GAAAA,CACvB,EAEA,CACEJ,MAAO,GACPE,UAAW,oBACXG,MAAO,QACPC,MAAO,KACPH,OAAQA,CAACI,EAAIC,IAAYnD,EAAAoD,GAAA,CAAsB,KAAMD,EAAO,CAC9D,CAAC,ECTH,SAAgCE,IAAA,CAG9B,KAAA,CAAAzE,EAAA0E,CAAyD,EAAAvB,EAAA,SAAA,EACnD,CAAEG,UAAAA,GAAAA,EAAAA,EAAAA,CAAoC,mBAAAhG,GAAAA,EAAAA,EAAA,CAAAwD,CAAA,EAAAC,EAAA,CAAA,mBAAA,EAAA,CAAA,EACtC,CAAEzD,KAAAA,EAAAA,WAAAA,CAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,YAAAA,EAAAA,EAAAA,IACFyE,EADyC,IAAA,gBAAAF,EAAA,MAAA,MACZA,KAAAA,EAC7B8C,EAAAC,CAAAA,CAAQnF,WAAAA,EAAAA,KAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAA0CrC,WAAAA,GAAAA,YAAAA,EAAAA,YAAAA,EAAAA,UACxDI,SAAAA,EAA6BA,SAC7BG,WAAAA,EACMgH,KAAAA,EAEN5G,SAAAA,CAAAA,CAAAA,CAAAA,EAAuD8G,EAAAC,GAAA,CAEnDtH,EAAAA,CACqBI,UAAAA,EACrBC,SAAAA,EAAAA,SACAE,SAAAA,CAAAA,CAAAA,CAAAA,EAGJgH,EAAA,CAGqB,SAAA,CAAAC,EAAAC,IAAA,CAAAC,EACNJ,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CACXnH,CAAAA,EACUgH,EAAAA,IAAAA,qBAIO,OAAA3E,CAAA,CAAA,EAEjB0E,OAAAA,EAAAA,UAAAA,IAAAA,CAEJpH,EAAA,uBAGYE,WAAAE,SACZC,SAAAF,CAAAA,CAAAG,CAAAA,EAGqB,CAAAN,EAAAqH,CAAA,CAAA,IACKjH,MAAAA,CAGxB,IAAAsE,GACE1E,SAAAA,CAGFgE,EAAAa,EAAA,8CA4BMgD,IAAAA,GAEAC,aAAAA,+BASKhE,EAAAyC,EAAA,OAIapC,uBAAApC,GAAAgG,KAAAA,aAAAA,CAAA,EAAAjE,EAAA,OAAA,CAAA,SAAA,cAAA,CAAA,CAAA,CAAA,CAAAI,EAAAA,EAAAA,MAAAA,CAc5B,IAAA8D,GAAqBtD,WAAAI,GAAA,CAAA,SAAAmD,CAAA,CAAA,CAAA,CAAA,EAAAnE,EAAA,MAAA,CAAA,IAAAoE,GAAA,WAAArD,EAAA,CAAA,SAAA,CAAAnC,EAAAwB,QAAAA,IAAAA,EAAAA,EAAA,KAAA,QAAAC,OAAAA,GAAA,SAAA,sBAAA,CAAA,CAAA,CAAA,EAAAL,EAAAqE,GAAA,CAAA,aAAAV,EAAA,QAAAjB,GAAA,WAAA9E,EAAAwC,QAAAA,EAAA,UAAA+C,EAAA,ifClHrB,SAAwBmB,IAAgB,CACtC,MAAM5I,EAAWC,IACjB2F,OAAAA,EAAAA,UAAU,IAAM,CAeLiD,EAAAA,GAde,CACtB,CACE5B,MAAO,CACL6B,MAAO,WACPC,MAAO,UACT,CAAA,EAEF,CACE9B,MAAO,CACL6B,MAAO,qBACPC,MAAO,uBACT,CAAA,CACD,CAE8C,CAAC,CAAA,EACjD,CAAC/I,CAAQ,CAAC,IAEViG,GACC,CAAA,SAAA,GAAC,KAAA,CAAG,IAAKd,GAAY,SAAiB,oBAAA,IACrCwC,GAAkB,EAAA,GACrB,CAEJ,CACA,MAAMxC,GAAU,CAAA6D,KAAA,SAAAvD,OAAA,oGAAA"}