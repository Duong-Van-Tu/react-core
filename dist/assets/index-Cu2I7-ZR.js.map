{"version":3,"file":"index-Cu2I7-ZR.js","sources":["../../src/modules/sales/enum/privileges.enum.ts","../../src/modules/sales/services/benefit.service.ts","../../src/modules/sales/components/modals/privileges/add-privileges.modal.tsx","../../src/modules/sales/components/modals/privileges/report-privileges.tsx","../../src/modules/sales/components/modals/privileges/suggestedEdit-privileges.tsx","../../src/modules/sales/components/modals/privileges/edit-privileges.modal.tsx","../../src/modules/sales/components/modals/privileges/delete-privileges.modal.tsx","../../src/modules/sales/components/modals/privileges/update-totalPrivileges.modal.tsx","../../src/modules/sales/components/modals/privileges/finalize-privileges.modal.tsx","../../src/modules/sales/components/modals/privileges/index.tsx","../../src/modules/sales/components/dropdown/privileges.dropdown.tsx","../../src/modules/sales/pages/privileges/columns/index.tsx","../../src/modules/sales/pages/privileges/table-privileges.tsx","../../src/modules/sales/pages/privileges/index.tsx"],"sourcesContent":["export enum ModalPrivilegesType {\n  EditPrivileges = 'Edit Privileges',\n  Delete = 'Delete Privileges',\n  SuggestedEdit = 'Suggested Edit',\n  Report = 'Report',\n  AddPrivileges = 'Add Privileges',\n  TotalPrivileges = 'Total Privileges',\n  FinalizePrivileges = 'Finalize Privileges',\n}\n","import { Pagination } from '@/constants/pagination';\nimport { useApi, useCaller } from '@/hooks/api.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { generateUrlParams, getTenant } from '@/utils/common';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport dayjs from 'dayjs';\nimport {\n  addBenefitAction,\n  deleteBenefitAction,\n  setDataBenefitDetailAction,\n  setDataStatusAction,\n  setDataUserBenefitAction,\n  setListBenefitAction,\n  updateBenefitAction,\n} from '../reducers/slicers/benefit.slice';\nimport { convertToUppercaseFirstLetter } from '@/utils/get-pathCode';\nimport { RoleType } from '@/enum/role.enum';\nimport { StatusBenefit } from '../enum/status.enum';\n\ntype FilterPrivilegesType = {\n  pageIndex: number;\n  pageSize: number;\n  textSearch?: string;\n  statusId?: string;\n  time?: string;\n  roleType?: string;\n};\n\nexport const useBenefit = () => {\n  const api = useApi('');\n  const caller = useCaller();\n  const dispatch = useDispatch();\n  const tenant = getTenant();\n  const user = useRootSelector((state) => state.auth.user);\n\n  const getAllBenefit = useCallback(\n    async ({\n      pageIndex = Pagination.PAGEINDEX,\n      pageSize = Pagination.PAGESIZE,\n      textSearch,\n      statusId,\n      time = dayjs().year().toString(),\n      roleType = RoleType.MySelf,\n    }: FilterPrivilegesType) => {\n      const queryParams: { [key: string]: string | undefined } = {\n        PageIndex: pageIndex.toString(),\n        PageSize: pageSize.toString(),\n        UserId: user?.id,\n        RoleId: user?.applicationRoles[0].id,\n        StatusId: statusId,\n        Time: `1-1-${time}`, // value is first day Of year\n        TextSearch: textSearch,\n        RoleType: roleType,\n        tenant: tenant,\n      };\n\n      const urlParams = generateUrlParams(queryParams);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/Benefit/get-list-with-pagination?${urlParams}`),\n        {\n          loadingKey: 'get-benefit',\n        },\n      );\n      if (succeeded) {\n        const { items, totalRecords, pageIndex, totalPages, totalExtend } = data;\n        dispatch(\n          setListBenefitAction({\n            data: items,\n            pagination: {\n              pageIndex,\n              totalRecords,\n              totalPages,\n            },\n            totalExtend,\n          }),\n        );\n      }\n    },\n    [caller, api],\n  );\n\n  const getBenefitById = useCallback(\n    async (id: string) => {\n      const { data, succeeded } = await caller(() => api.get(`/Benefit/get-by-id/${id}`), {\n        loadingKey: 'get-benefitDetail',\n        messageKey: 'benefitDetail-message',\n      });\n      if (succeeded) {\n        dispatch(setDataBenefitDetailAction(data));\n      }\n    },\n    [caller, api],\n  );\n\n  const addBenefit = useCallback(\n    async (values: DataBenefitType) => {\n      const dataAddBenefit = convertToUppercaseFirstLetter({\n        ...values,\n      });\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/Benefit/add-or-update?tenant=${tenant}`, [{ data: dataAddBenefit }]),\n        { loadingKey: 'add-benefit', messageKey: 'addBenefit-message' },\n      );\n\n      if (succeeded) {\n        dispatch(addBenefitAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const updateBenefit = useCallback(\n    async (values: DataBenefitType) => {\n      const { id, ...rest } = values;\n      const dataAddBenefit = convertToUppercaseFirstLetter(rest);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/Benefit/add-or-update?tenant=${tenant}`, [{ id, data: dataAddBenefit }]),\n        { loadingKey: 'edit-benefit', messageKey: 'editBenefit-message' },\n      );\n\n      if (succeeded) {\n        dispatch(updateBenefitAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const updateTotalBenefit = useCallback(\n    async (values: DataBenefitType) => {\n      const { id, ...rest } = values;\n      const dataAddBenefit = convertToUppercaseFirstLetter(rest);\n\n      const { data, succeeded } = await caller(\n        () =>\n          api.put(`/Benefit/update-total-benefit?tenant=${tenant}`, [{ id, data: dataAddBenefit }]),\n        { loadingKey: 'edit-totalBenefit', messageKey: 'editBenefit-message' },\n      );\n\n      if (succeeded) {\n        dispatch(updateBenefitAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const deleteBenefit = useCallback(\n    async (benefitIds: string[]) => {\n      const deleteIds = benefitIds.join(',');\n      const { succeeded } = await caller(\n        () => api.del(`/Benefit/delete-by-ids/${deleteIds}/${user?.id}?tenant=${tenant}`),\n        { loadingKey: 'delete-benefit' },\n      );\n\n      if (succeeded) {\n        dispatch(deleteBenefitAction(benefitIds));\n\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  // status\n  const updateStatusBenefit = useCallback(\n    async (values: DataBenefitType) => {\n      const dataUpdateStatusBenefit = convertToUppercaseFirstLetter(values);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/BenefitStatus/add-or-update?tenant=${tenant}`, dataUpdateStatusBenefit),\n        { loadingKey: 'edit-statusBenefit' },\n      );\n\n      if (succeeded) {\n        dispatch(updateBenefitAction(data));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const updateStatusById = useCallback(\n    async (values: DataBenefitType) => {\n      const dataUpdateStatusBenefit = convertToUppercaseFirstLetter(values);\n\n      const { data, succeeded } = await caller(\n        () => api.put(`/Benefit/update-status-by-id?tenant=${tenant}`, dataUpdateStatusBenefit),\n        { loadingKey: 'edit-statusById' },\n      );\n\n      if (succeeded) {\n        dispatch(updateBenefitAction(data));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const refuseEditBenefit = useCallback(\n    async (values: DataBenefitType) => {\n      const dataUpdateStatusBenefit = convertToUppercaseFirstLetter({\n        id: values.id,\n        applicationUserId: values.applicationUser?.id,\n        status: StatusBenefit.Confirm,\n      });\n\n      const { data, succeeded } = await caller(\n        () => api.put(`/Benefit/update-status-by-id?tenant=${tenant}`, dataUpdateStatusBenefit),\n        { loadingKey: 'refuseEdit-benefit' },\n      );\n\n      if (succeeded) {\n        dispatch(updateBenefitAction(data));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const getAllStatusBenefit = useCallback(async () => {\n    const { data, succeeded } = await caller(\n      () => api.get(`/BenefitStatus/get-all?tenant=${tenant}`),\n      {\n        loadingKey: 'status-benefit',\n      },\n    );\n\n    if (succeeded) {\n      dispatch(setDataStatusAction(data));\n    }\n  }, [api, caller]);\n\n  const getUsersBenefit = useCallback(async () => {\n    const { data, succeeded } = await caller(() => api.get(`/Benefit/get-user?tenant=${tenant}`), {\n      loadingKey: 'getUsers-benefit',\n    });\n\n    if (succeeded) {\n      dispatch(setDataUserBenefitAction(data));\n    }\n  }, [api, caller]);\n\n  return {\n    getAllBenefit,\n    addBenefit,\n    updateBenefit,\n    deleteBenefit,\n    updateStatusBenefit,\n    getAllStatusBenefit,\n    getBenefitById,\n    getUsersBenefit,\n    refuseEditBenefit,\n    updateTotalBenefit,\n    updateStatusById,\n  };\n};\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { useBenefit } from '@/modules/sales/services/benefit.service';\nimport { css } from '@emotion/react';\nimport { Button, Form, FormProps, InputNumber, Row, Select, Space } from 'antd';\nimport { Fragment, useEffect, useMemo } from 'react';\n\ntype FieldType = {\n  applicationUserId: string;\n  monthlySalary: string;\n  targetSalary: string;\n  totalSalary: string;\n};\n\ntype AddPrivilegesProps = {\n  closeModal: () => void;\n};\n\nexport const AddPrivileges = ({ closeModal }: AddPrivilegesProps) => {\n  const { formatMessage } = useLocale();\n  const { getUsersBenefit, addBenefit } = useBenefit();\n  const [loading] = useWatchLoading(['add-benefit', false]);\n  const [form] = Form.useForm();\n  const users = useRootSelector((state) => state.sale.benefit.users);\n\n  const userOptions =\n    useMemo(\n      () =>\n        users?.map((user) => ({\n          value: user.id,\n          label: user.fullName,\n        })),\n      [users],\n    ) ?? [];\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const { monthlySalary, targetSalary, totalSalary } = values;\n    const dataAddBenefit = {\n      ...values,\n      monthlySalary: monthlySalary.toString(),\n      targetSalary: targetSalary.toString(),\n      totalSalary: totalSalary.toString(),\n    };\n    const add = await addBenefit(dataAddBenefit);\n    if (add) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n\n  useEffect(() => {\n    getUsersBenefit();\n  }, []);\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Thêm đề xuất quyền lợi</h3>\n      <Form\n        form={form}\n        css={formAddPrivilegeStyle}\n        name=\"add-privileges\"\n        onFinish={onFinish}\n        layout=\"vertical\"\n      >\n        <Form.Item<FieldType>\n          label={\n            <span css={labelFormItem}>\n              {formatMessage({ id: 'form.input.addPrivileges.beneficiaryName' })}\n            </span>\n          }\n          name=\"applicationUserId\"\n          rules={[\n            {\n              required: true,\n              message: formatMessage({ id: 'form.input.addPrivileges.require.beneficiaryName' }),\n            },\n          ]}\n        >\n          <Select size=\"large\" placeholder=\"Người hưởng quyền lợi\" options={userOptions} />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={\n            <span css={labelFormItem}>\n              {formatMessage({ id: 'form.input.addPrivileges.baseSalary' })}\n            </span>\n          }\n          name=\"monthlySalary\"\n          rules={[\n            {\n              required: true,\n              message: formatMessage({ id: 'form.input.addPrivileges.require.baseSalary' }),\n            },\n          ]}\n        >\n          <InputNumber\n            css={inputStyle}\n            size=\"large\"\n            placeholder={formatMessage({ id: 'form.input.addPrivileges.placeholder.NETRevenue' })}\n          />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={\n            <span css={labelFormItem}>\n              {formatMessage({ id: 'form.input.addPrivileges.totalSalaryVariation' })}\n            </span>\n          }\n          name=\"targetSalary\"\n          rules={[\n            {\n              required: true,\n              message: formatMessage({\n                id: 'form.input.addPrivileges.require.totalSalaryVariation',\n              }),\n            },\n          ]}\n        >\n          <InputNumber\n            css={inputStyle}\n            size=\"large\"\n            placeholder={formatMessage({ id: 'form.input.addPrivileges.placeholder.NETRevenue' })}\n          />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={\n            <span css={labelFormItem}>\n              {formatMessage({ id: 'form.input.addPrivileges.variesActualSalary' })}\n            </span>\n          }\n          name=\"totalSalary\"\n          rules={[\n            {\n              required: true,\n              message: formatMessage({\n                id: 'form.input.addPrivileges.require.variesActualSalary',\n              }),\n            },\n          ]}\n        >\n          <InputNumber\n            css={inputStyle}\n            size=\"large\"\n            placeholder={formatMessage({ id: 'form.input.addPrivileges.placeholder.NETRevenue' })}\n          />\n        </Form.Item>\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formAddPrivilegeStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem;\n`;\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n  color: #101828;\n`;\n\nconst inputStyle = css`\n  width: 100%;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, Col, Row } from 'antd';\nimport { LocaleFormatter } from '@/components/locale-formatter';\nimport { StatusBenefit } from '@/modules/sales/enum/status.enum';\nimport { Message } from '@/components/message';\n\ntype ReportPrivilegesProps = {\n  closeModal: () => void;\n  data: DataBenefitType;\n};\n\nexport const ReportPrivileges = ({ closeModal, data }: ReportPrivilegesProps) => {\n  let messageType: MessageType;\n  switch (data.benefitStatus?.code) {\n    case StatusBenefit.Updated:\n      messageType = 'success';\n      break;\n    case StatusBenefit.Request:\n    case StatusBenefit.Confirm:\n      messageType = 'info';\n      break;\n    default:\n      messageType = 'warning';\n  }\n\n  return (\n    <div css={rootStyle}>\n      <h3 css={titleStyle}>Báo cáo</h3>\n      <div css={contentStyle}>\n        <Row justify=\"space-between\" align=\"bottom\">\n          <Col>\n            <LocaleFormatter id=\"title.employee.reportPrivileges.nameBenifitsProposer\" />\n          </Col>\n          <Col>{data.applicationUser?.fullName}</Col>\n        </Row>\n        <Row justify=\"space-between\" align=\"bottom\">\n          <Col>\n            <LocaleFormatter id=\"title.employee.reportPrivileges.baseSalary\" />\n          </Col>\n          <Col>{data.monthlySalary}</Col>\n        </Row>\n        <Row justify=\"space-between\" align=\"bottom\">\n          <Col>\n            <LocaleFormatter id=\"title.employee.reportPrivileges.totalChangesTarget\" />\n          </Col>\n          <Col>{data.targetSalary}</Col>\n        </Row>\n\n        <Row justify=\"space-between\" align=\"bottom\">\n          <Col>\n            <LocaleFormatter id=\"title.employee.reportPrivileges.actualSalaryFluctuates\" />\n          </Col>\n          <Col>{data.totalSalary}</Col>\n        </Row>\n\n        <Row justify=\"space-between\" align=\"bottom\">\n          <Col>\n            <LocaleFormatter id=\"title.status\" />\n          </Col>\n          <Col>\n            {data.benefitStatus ? (\n              <Message hasBackground type={messageType}>\n                {data.benefitStatus.name!}\n              </Message>\n            ) : (\n              ''\n            )}\n          </Col>\n        </Row>\n\n        <Button css={btnConfirmReport} type=\"primary\" onClick={() => closeModal()}>\n          Xác nhận\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nconst rootStyle = css`\n  padding: 1rem;\n`;\n\nconst contentStyle = css`\n  display: flex;\n  flex-direction: column;\n  gap: 1.4rem;\n  font-weight: 500;\n`;\n\nconst titleStyle = css`\n  font-size: 2rem;\n  line-height: 2.2rem;\n  text-align: center;\n  margin-bottom: 2rem;\n  font-weight: 500;\n`;\n\nconst btnConfirmReport = css`\n  width: 100%;\n  margin-top: 2rem;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { usePermission } from '@/hooks/permission.hook';\nimport { StatusBenefit } from '@/modules/sales/enum/status.enum';\nimport { useBenefit } from '@/modules/sales/services/benefit.service';\nimport { css } from '@emotion/react';\nimport { Button, Col, Form, FormProps, Input, InputNumber, Row, Space } from 'antd';\nimport { Fragment } from 'react';\n\ntype SuggestEditPrivilegesProps = {\n  closeModal: () => void;\n  data: DataBenefitType;\n};\ntype FieldType = {\n  monthlySalary: number;\n  targetSalary: number;\n  totalSalary: number;\n};\n\nexport const SuggestEditPrivileges = ({ closeModal, data }: SuggestEditPrivilegesProps) => {\n  const { formatMessage } = useLocale();\n  const { updateStatusById, refuseEditBenefit } = useBenefit();\n  const { isSale, isSaleDirector } = usePermission();\n  const [form] = Form.useForm();\n  const [loading, refuseEditLoading] = useWatchLoading(\n    ['edit-statusBenefit', false],\n    ['refuseEdit-benefit', false],\n  );\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const { monthlySalary, targetSalary, totalSalary } = values;\n    const dataUpdateBenefit = {\n      id: data.id,\n      ...values,\n      monthlySalary: monthlySalary.toString(),\n      targetSalary: targetSalary.toString(),\n      totalSalary: totalSalary.toString(),\n      applicationUserId: data.applicationUser?.id,\n      status: isSale ? StatusBenefit.Request : StatusBenefit.Updated,\n    };\n    const edit = await updateStatusById(dataUpdateBenefit);\n    if (edit) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const handlerefuseEdit = async () => {\n    const refuseEdit = await refuseEditBenefit(data);\n    if (refuseEdit) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Đề xuất chỉnh sửa quyền lợi</h3>\n      <Form\n        form={form}\n        css={formStyle}\n        name=\"requestEdit-privileges\"\n        onFinish={onFinish}\n        layout=\"vertical\"\n      >\n        <Form.Item<FieldType>\n          label={\n            <span css={labelFormItem}>\n              {formatMessage({ id: 'form.input.employeePrivileges.baseSalary' })}\n            </span>\n          }\n        >\n          <Input value={data.monthlySalary} size=\"large\" disabled />\n        </Form.Item>\n\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>\n                  {formatMessage({ id: 'form.input.employeePrivileges.totalChangesTarget' })}\n                </span>\n              }\n            >\n              <Input value={data.targetSalary} size=\"large\" disabled />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>\n                  {formatMessage({ id: 'form.input.employeePrivileges.actualSalaryFluctuates' })}\n                  <br />\n                  <br />\n                </span>\n              }\n            >\n              <Input value={data.totalSalary} size=\"large\" disabled />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Form.Item<FieldType>\n          label={\n            <span css={labelFormItem}>\n              {formatMessage({ id: 'form.input.employeePrivileges.baseSalaryEdit' })}\n            </span>\n          }\n          name=\"monthlySalary\"\n          rules={[\n            {\n              required: true,\n              message: 'Vui lòng nhập mức lương cố định hàng tháng muốn chỉnh sửa',\n            },\n          ]}\n        >\n          <InputNumber css={inputStyle} size=\"large\" />\n        </Form.Item>\n\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>\n                  {formatMessage({ id: 'form.input.employeePrivileges.totalChangesTargetEdit' })}\n                </span>\n              }\n              name=\"targetSalary\"\n              rules={[\n                {\n                  required: true,\n                  message: 'Vui lòng nhập tổng quyền lợi biến động mục tiêu muốn chỉnh sửa',\n                },\n              ]}\n            >\n              <InputNumber css={inputStyle} size=\"large\" />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>\n                  {formatMessage({\n                    id: 'form.input.employeePrivileges.actualSalaryFluctuatesEdit',\n                  })}\n                </span>\n              }\n              name=\"totalSalary\"\n              rules={[\n                {\n                  required: true,\n                  message: 'Vui lòng nhập Mức lương biến động thực tế muốn chỉnh sửa',\n                },\n              ]}\n            >\n              <InputNumber css={inputStyle} size=\"large\" />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row justify=\"end\" css={formFooterStyle}>\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            {isSaleDirector && (\n              <Button loading={refuseEditLoading} onClick={handlerefuseEdit} type=\"primary\" ghost>\n                Từ chối chỉnh sửa\n              </Button>\n            )}\n\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n  color: #101828;\n`;\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst formFooterStyle = css`\n  margin-top: 1rem;\n`;\n\nconst inputStyle = css`\n  width: 100%;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { useBenefit } from '@/modules/sales/services/benefit.service';\nimport { css } from '@emotion/react';\nimport { Button, Form, FormProps, Input, InputNumber, Row, Space } from 'antd';\nimport { Fragment, useEffect } from 'react';\n\ntype FieldType = {\n  applicationUserId: string;\n  monthlySalary: string;\n  targetSalary: string;\n  totalSalary: string;\n};\n\ntype EditPrivilegesProps = {\n  closeModal: () => void;\n  data: DataBenefitType;\n};\n\nexport const EditPrivileges = ({ closeModal, data }: EditPrivilegesProps) => {\n  const { formatMessage } = useLocale();\n  const { getUsersBenefit, updateBenefit } = useBenefit();\n  const [loading] = useWatchLoading(['edit-benefit', false]);\n  const [form] = Form.useForm();\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const { monthlySalary, targetSalary, totalSalary } = values;\n    const dataUpdateBenefit = {\n      id: data.id,\n      applicationUserId: data.applicationUser?.id,\n      monthlySalary: monthlySalary.toString(),\n      targetSalary: targetSalary.toString(),\n      totalSalary: totalSalary.toString(),\n    };\n    const edit = await updateBenefit(dataUpdateBenefit);\n    if (edit) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n\n  useEffect(() => {\n    getUsersBenefit();\n  }, [getUsersBenefit]);\n\n  useEffect(() => {\n    form.setFieldsValue({ ...data, applicationUserId: data.applicationUser?.fullName });\n  }, [data]);\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Chỉnh sửa quyền lợi</h3>\n      <Form form={form} css={formStyle} name=\"add-privileges\" onFinish={onFinish} layout=\"vertical\">\n        <Form.Item<FieldType>\n          label={\n            <span css={labelFormItem}>\n              {formatMessage({ id: 'form.input.addPrivileges.beneficiaryName' })}\n            </span>\n          }\n        >\n          <Input value={data.applicationUser?.fullName} disabled size=\"large\" />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={\n            <span css={labelFormItem}>\n              {formatMessage({ id: 'form.input.addPrivileges.baseSalary' })}\n            </span>\n          }\n          name=\"monthlySalary\"\n          rules={[\n            {\n              required: true,\n              message: formatMessage({ id: 'form.input.addPrivileges.require.baseSalary' }),\n            },\n          ]}\n        >\n          <InputNumber\n            css={inputStyle}\n            size=\"large\"\n            placeholder={formatMessage({ id: 'form.input.addPrivileges.placeholder.NETRevenue' })}\n          />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={\n            <span css={labelFormItem}>\n              {formatMessage({ id: 'form.input.addPrivileges.totalSalaryVariation' })}\n            </span>\n          }\n          name=\"targetSalary\"\n          rules={[\n            {\n              required: true,\n              message: formatMessage({\n                id: 'form.input.addPrivileges.require.totalSalaryVariation',\n              }),\n            },\n          ]}\n        >\n          <InputNumber\n            css={inputStyle}\n            size=\"large\"\n            placeholder={formatMessage({ id: 'form.input.addPrivileges.placeholder.NETRevenue' })}\n          />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={\n            <span css={labelFormItem}>\n              {formatMessage({ id: 'form.input.addPrivileges.variesActualSalary' })}\n            </span>\n          }\n          name=\"totalSalary\"\n          rules={[\n            {\n              required: true,\n              message: formatMessage({\n                id: 'form.input.addPrivileges.require.variesActualSalary',\n              }),\n            },\n          ]}\n        >\n          <InputNumber\n            css={inputStyle}\n            size=\"large\"\n            placeholder={formatMessage({ id: 'form.input.addPrivileges.placeholder.NETRevenue' })}\n          />\n        </Form.Item>\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem;\n`;\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n  color: #101828;\n`;\n\nconst inputStyle = css`\n  width: 100%;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { Pagination } from '@/constants/pagination';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { useBenefit } from '@/modules/sales/services/benefit.service';\nimport { css } from '@emotion/react';\nimport { Button, Row, Space } from 'antd';\nimport { useLocation } from 'react-router-dom';\n\ntype DeletePrivilegesProps = {\n  closeModal: () => void;\n  benefitIds: string[];\n  data?: DataBenefitType;\n};\nexport const DeletePrivileges = ({ closeModal, benefitIds, data }: DeletePrivilegesProps) => {\n  const { deleteBenefit, getAllBenefit } = useBenefit();\n  const pageIndex = useRootSelector((state) => state.sale.kpi.pagination?.pageIndex) ?? 0;\n  const [loading] = useWatchLoading(['delete-benefit', false]);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const tab = searchParams.get('tab');\n\n  const handleDeletePrivileges = async () => {\n    const deleteGoal = await deleteBenefit(!!data ? [data.id!] : benefitIds);\n    if (deleteGoal) {\n      closeModal();\n      if (benefitIds.length === Pagination.PAGESIZE) {\n        getAllBenefit({\n          pageIndex: pageIndex - 1 || 1,\n          pageSize: Pagination.PAGESIZE,\n          roleType: tab!,\n        });\n      }\n    }\n  };\n\n  return (\n    <div css={rootStyle}>\n      <h3 css={titleStyle}>Đồng ý xoá quyền lợi đã chọn?</h3>\n      <Row justify=\"center\">\n        <Space>\n          <Button onClick={() => closeModal()}>Huỷ</Button>\n          <Button loading={loading} type=\"primary\" danger onClick={handleDeletePrivileges}>\n            Xoá\n          </Button>\n        </Space>\n      </Row>\n    </div>\n  );\n};\n\nconst rootStyle = css`\n  margin-top: 2rem;\n  padding: 0 2rem;\n`;\n\nconst titleStyle = css`\n  font-size: 1.8rem;\n  line-height: 2rem;\n  text-align: center;\n  margin-bottom: 2.4rem;\n  font-weight: 500;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { useBenefit } from '@/modules/sales/services/benefit.service';\nimport { css } from '@emotion/react';\nimport { Button, Form, FormProps, Input, InputNumber, Row, Space } from 'antd';\nimport { Fragment, useEffect } from 'react';\n\ntype FieldType = {\n  applicationUserId: string;\n  totalBenefit: string;\n};\n\ntype UpdateTotalPrivilegesProps = {\n  closeModal: () => void;\n  data: DataBenefitType;\n};\n\nexport const UpdateTotalPrivileges = ({ closeModal, data }: UpdateTotalPrivilegesProps) => {\n  const { formatMessage } = useLocale();\n  const { updateTotalBenefit } = useBenefit();\n  const [loading] = useWatchLoading(['edit-totalBenefit', false]);\n  const [form] = Form.useForm();\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const { totalBenefit } = values;\n    const dataUpdateBenefit = {\n      id: data.id,\n      totalBenefit: totalBenefit.toString(),\n    };\n    const edit = await updateTotalBenefit(dataUpdateBenefit);\n    if (edit) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({ ...data, applicationUserId: data.applicationUser?.fullName });\n  }, [data]);\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Chỉnh sửa quyền lợi</h3>\n      <Form form={form} css={formStyle} name=\"add-privileges\" onFinish={onFinish} layout=\"vertical\">\n        <Form.Item<FieldType>\n          label={\n            <span css={labelFormItem}>\n              {formatMessage({ id: 'form.input.addPrivileges.beneficiaryName' })}\n            </span>\n          }\n        >\n          <Input size=\"large\" value={data.applicationUser?.fullName} disabled />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Tổng quyền lợi hiện tại</span>}\n          name=\"totalBenefit\"\n          rules={[\n            {\n              required: true,\n              message: 'Vui lòng nhập tổng quyền lợi!',\n            },\n          ]}\n        >\n          <InputNumber css={inputStyle} size=\"large\" placeholder=\"Nhập tổng quyền lợi\" />\n        </Form.Item>\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem;\n`;\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n  color: #101828;\n`;\n\nconst inputStyle = css`\n  width: 100%;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { StatusBenefit } from '@/modules/sales/enum/status.enum';\nimport { useBenefit } from '@/modules/sales/services/benefit.service';\nimport { css } from '@emotion/react';\nimport { Button, Row, Space } from 'antd';\n\ntype FinalizePrivilegesProps = {\n  closeModal: () => void;\n  data: DataBenefitType;\n};\nexport const FinalizePrivileges = ({ closeModal, data }: FinalizePrivilegesProps) => {\n  const { updateStatusById } = useBenefit();\n  const [loading] = useWatchLoading(['edit-statusBenefit', false]);\n\n  const handleFinalizePrivileges = async () => {\n    const editStatus = await updateStatusById({\n      id: data.id,\n      applicationUserId: data.applicationUser?.id,\n      status: StatusBenefit.Confirm,\n    } as DataBenefitType);\n\n    if (editStatus) {\n      closeModal();\n    }\n  };\n\n  return (\n    <div css={rootStyle}>\n      <h3 css={titleStyle}>Đồng ý chốt quyền lợi này</h3>\n      <Row justify=\"center\">\n        <Space>\n          <Button onClick={() => closeModal()}>Huỷ</Button>\n          <Button loading={loading} type=\"primary\" onClick={handleFinalizePrivileges}>\n            Xác nhận\n          </Button>\n        </Space>\n      </Row>\n    </div>\n  );\n};\n\nconst rootStyle = css`\n  margin-top: 2rem;\n  padding: 0 2rem;\n`;\n\nconst titleStyle = css`\n  font-size: 1.8rem;\n  line-height: 2rem;\n  text-align: center;\n  margin-bottom: 2.4rem;\n  font-weight: 500;\n`;\n","import { Modal } from 'antd';\nimport { ReactNode, createContext, useContext, useState } from 'react';\nimport { ModalPrivilegesType } from '../../../enum/privileges.enum';\nimport { AddPrivileges } from './add-privileges.modal';\nimport { ReportPrivileges } from './report-privileges';\nimport { SuggestEditPrivileges } from './suggestedEdit-privileges';\nimport { EditPrivileges } from './edit-privileges.modal';\nimport { DeletePrivileges } from './delete-privileges.modal';\nimport { UpdateTotalPrivileges } from './update-totalPrivileges.modal';\nimport { FinalizePrivileges } from './finalize-privileges.modal';\n\ntype ModalContextType = {\n  openModal: (modalName: string, data?: DataBenefitType, benefitIds?: string[]) => void;\n  closeModal: () => void;\n};\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\n\nexport const useModalPrivileges = () => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error('useModalPrivileges must be used within a ModalPrivilegesProvider');\n  }\n  return context;\n};\n\ntype ModalProviderProps = {\n  children?: ReactNode;\n};\nexport const ModalPrivilegesProvider = ({ children }: ModalProviderProps) => {\n  const [currentModal, setCurrentModal] = useState<\n    { modalName: string; data?: DataBenefitType; benefitIds?: string[] } | undefined\n  >();\n  const [open, setOpen] = useState<boolean>(false);\n\n  const openModal = (modalName: string, data?: DataBenefitType, benefitIds?: string[]) => {\n    setCurrentModal({ modalName, data, benefitIds });\n    setOpen(true);\n  };\n\n  const closeModal = () => {\n    setCurrentModal(undefined);\n    setOpen(false);\n  };\n\n  return (\n    <ModalContext.Provider value={{ openModal, closeModal }}>\n      {children}\n      <Modal\n        width={\n          currentModal?.modalName === ModalPrivilegesType.Delete ||\n          currentModal?.modalName === ModalPrivilegesType.FinalizePrivileges\n            ? '38rem'\n            : currentModal?.modalName === ModalPrivilegesType.Report\n              ? '45rem'\n              : '54rem'\n        }\n        open={open}\n        onCancel={closeModal}\n        footer={null}\n      >\n        {currentModal?.modalName === ModalPrivilegesType.Delete && (\n          <DeletePrivileges\n            closeModal={closeModal}\n            data={currentModal.data!}\n            benefitIds={currentModal.benefitIds!}\n          />\n        )}\n        {currentModal?.modalName === ModalPrivilegesType.SuggestedEdit && (\n          <SuggestEditPrivileges closeModal={closeModal} data={currentModal.data!} />\n        )}\n        {currentModal?.modalName === ModalPrivilegesType.Report && (\n          <ReportPrivileges closeModal={closeModal} data={currentModal.data!} />\n        )}\n        {currentModal?.modalName === ModalPrivilegesType.AddPrivileges && (\n          <AddPrivileges closeModal={closeModal} />\n        )}\n        {currentModal?.modalName === ModalPrivilegesType.EditPrivileges && (\n          <EditPrivileges closeModal={closeModal} data={currentModal.data!} />\n        )}\n        {currentModal?.modalName === ModalPrivilegesType.TotalPrivileges && (\n          <UpdateTotalPrivileges closeModal={closeModal} data={currentModal.data!} />\n        )}\n        {currentModal?.modalName === ModalPrivilegesType.FinalizePrivileges && (\n          <FinalizePrivileges closeModal={closeModal} data={currentModal.data!} />\n        )}\n      </Modal>\n    </ModalContext.Provider>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, Dropdown } from 'antd';\nimport type { MenuProps } from 'antd';\nimport { CustomIcon } from '@/components/icons';\nimport { useModalPrivileges } from '../modals/privileges';\nimport { ModalPrivilegesType } from '../../enum/privileges.enum';\nimport { LocaleFormatter } from '@/components/locale-formatter';\nimport { usePermission } from '@/hooks/permission.hook';\nimport { useMemo } from 'react';\nimport { useQuery } from '@/hooks/query.hook';\nimport { RoleType } from '@/enum/role.enum';\nimport { StatusBenefit } from '../../enum/status.enum';\n\nenum MenuItem {\n  EditPrivileges = 1,\n  Report,\n  SuggestedEdit,\n  Delete,\n  TotalPrivileges,\n  FinalizePrivileges,\n}\n\ntype PrivilegesDropdownProps = {\n  data: DataBenefitType;\n};\n\nexport function PrivilegesDropdown({ data }: PrivilegesDropdownProps) {\n  const { openModal } = useModalPrivileges();\n  const { isAdmin, isSale } = usePermission();\n  const { tab } = useQuery();\n\n  const handleItemClick = (key: number) => {\n    switch (key) {\n      case MenuItem.EditPrivileges:\n        openModal(ModalPrivilegesType.EditPrivileges, data);\n        break;\n      case MenuItem.SuggestedEdit:\n        openModal(ModalPrivilegesType.SuggestedEdit, data);\n        break;\n      case MenuItem.Report:\n        openModal(ModalPrivilegesType.Report, data);\n        break;\n      case MenuItem.Delete:\n        openModal(ModalPrivilegesType.Delete, data);\n        break;\n      case MenuItem.TotalPrivileges:\n        openModal(ModalPrivilegesType.TotalPrivileges, data);\n        break;\n      case MenuItem.FinalizePrivileges:\n        openModal(ModalPrivilegesType.FinalizePrivileges, data);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const items: MenuProps['items'] = useMemo(() => {\n    if (tab === RoleType.Employee) {\n      return [\n        {\n          key: MenuItem.EditPrivileges,\n          label: <LocaleFormatter id=\"dropdown.edit\" />,\n          onClick: () => handleItemClick(MenuItem.EditPrivileges),\n        },\n        {\n          key: MenuItem.SuggestedEdit,\n          label: <LocaleFormatter id=\"dropdown.privileges.suggestedEdit\" />,\n          onClick: () => handleItemClick(MenuItem.SuggestedEdit),\n        },\n\n        {\n          key: MenuItem.Report,\n          label: <LocaleFormatter id=\"dropdown.report\" />,\n          onClick: () => handleItemClick(MenuItem.Report),\n        },\n        {\n          key: MenuItem.Delete,\n          label: <LocaleFormatter id=\"dropdown.delete\" />,\n          onClick: () => handleItemClick(MenuItem.Delete),\n        },\n      ];\n    }\n\n    return [];\n  }, []);\n\n  const adminItems: MenuProps['items'] = useMemo(() => {\n    if (tab === RoleType.Manager) {\n      return [\n        {\n          key: MenuItem.EditPrivileges,\n          label: <LocaleFormatter id=\"dropdown.edit\" />,\n          onClick: () => handleItemClick(MenuItem.EditPrivileges),\n        },\n        {\n          key: MenuItem.Delete,\n          label: <LocaleFormatter id=\"dropdown.delete\" />,\n          onClick: () => handleItemClick(MenuItem.Delete),\n        },\n      ];\n    }\n    return [\n      {\n        key: MenuItem.TotalPrivileges,\n        label: 'Cập nhập tổng quyền lợi hiện tại',\n        onClick: () => handleItemClick(MenuItem.TotalPrivileges),\n      },\n    ];\n  }, [tab]);\n\n  const saleItems: MenuProps['items'] = useMemo(() => {\n    if (data.benefitStatus?.code === StatusBenefit.Updated) {\n      return [\n        {\n          key: MenuItem.FinalizePrivileges,\n          label: 'Chốt',\n          onClick: () => handleItemClick(MenuItem.FinalizePrivileges),\n        },\n        {\n          key: MenuItem.Report,\n          label: <LocaleFormatter id=\"dropdown.report\" />,\n          onClick: () => handleItemClick(MenuItem.Report),\n        },\n      ];\n    }\n    return [\n      {\n        key: MenuItem.SuggestedEdit,\n        label: 'Gửi yêu cầu chỉnh sửa',\n        onClick: () => handleItemClick(MenuItem.SuggestedEdit),\n      },\n      {\n        key: MenuItem.Report,\n        label: <LocaleFormatter id=\"dropdown.report\" />,\n        onClick: () => handleItemClick(MenuItem.Report),\n      },\n    ];\n  }, [data.benefitStatus?.code]);\n\n  return (\n    <Dropdown\n      menu={{ items: isAdmin ? adminItems : isSale ? saleItems : items }}\n      placement=\"bottomRight\"\n    >\n      <Button css={actionIconBtn}>\n        <CustomIcon type=\"three-dot\" width={16} height={18} />\n      </Button>\n    </Dropdown>\n  );\n}\n\nconst actionIconBtn = css`\n  background: none;\n  border: none;\n  box-shadow: unset;\n  padding: 0;\n`;\n","import { TableProps } from 'antd';\nimport { LocaleFormatter } from '@/components/locale-formatter';\nimport { PrivilegesDropdown } from '@/modules/sales/components/dropdown/privileges.dropdown';\nimport { StatusBenefit } from '@/modules/sales/enum/status.enum';\nimport { Message } from '@/components/message';\n\ntype ColumnsType<T> = TableProps<T>['columns'];\nexport const columnsEmployee: ColumnsType<DataBenefitType> = [\n  {\n    title: <LocaleFormatter id=\"table.column.privileges.beneficiaryName\" />,\n    dataIndex: ['applicationUser', 'fullName'],\n  },\n  {\n    title: 'Tổng quyền lợi hiện tại',\n    dataIndex: 'totalBenefit',\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.privileges.fixedMonthlySalary\" />,\n    dataIndex: 'monthlySalary',\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.privileges.totalTargetVariableSalary\" />,\n    dataIndex: 'targetSalary',\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.privileges.totalSalary\" />,\n    dataIndex: 'totalSalary',\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.status\" />,\n    dataIndex: ['benefitStatus', 'name'],\n    align: 'center',\n    render: (__, record) => {\n      let messageType: MessageType;\n      switch (record.benefitStatus?.code) {\n        case StatusBenefit.Updated:\n          messageType = 'success';\n          break;\n        case StatusBenefit.Request:\n        case StatusBenefit.Confirm:\n          messageType = 'info';\n          break;\n        default:\n          messageType = 'warning';\n      }\n      return record.benefitStatus ? (\n        <Message hasBackground type={messageType}>\n          {record.benefitStatus.name!}\n        </Message>\n      ) : (\n        ''\n      );\n    },\n  },\n  {\n    title: '',\n    dataIndex: 'calculationMethod',\n    fixed: 'right',\n    width: '6%',\n    render: (__, record) => <PrivilegesDropdown data={record} />,\n  },\n];\n\nexport const columnsManager: ColumnsType<DataBenefitType> = [\n  {\n    title: 'Tổng quyền lợi hiện tại',\n    dataIndex: 'totalBenefit',\n  },\n  {\n    title: 'Tổng mức lương mục tiêu',\n    dataIndex: 'targetSalary',\n  },\n  {\n    title: 'Mức lương cố định hàng tháng',\n    dataIndex: 'monthlySalary',\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.privileges.totalSalary\" />,\n    dataIndex: 'totalSalary',\n  },\n];\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { TableCustom } from '@/components/table';\nimport { columnsEmployee, columnsManager } from './columns';\nimport { Button } from 'antd';\nimport { CustomIcon } from '@/components/icons';\nimport { usePermission } from '@/hooks/permission.hook';\nimport { useModalPrivileges } from '../../components/modals/privileges';\nimport { Search, SearchParams } from '@/components/search';\nimport { Key } from 'antd/es/table/interface';\nimport { Fragment, useEffect, useMemo, useState } from 'react';\nimport { useBenefit } from '../../services/benefit.service';\nimport { Pagination } from '@/constants/pagination';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { RoleType } from '@/enum/role.enum';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { ModalPrivilegesType } from '../../enum/privileges.enum';\nimport { useQuery } from '@/hooks/query.hook';\n\nexport default function TablePrivileges() {\n  const { openModal } = useModalPrivileges();\n  const { getAllStatusBenefit, getAllBenefit } = useBenefit();\n  const [loading, loadingStatus] = useWatchLoading(['get-benefit', true], ['status-benefit', true]);\n  const { isSaleDirector, isAdmin, isSale } = usePermission();\n  const { data, pagination, status } = useRootSelector((state) => state.sale.benefit);\n  const { tab, textSearch, time, statusId } = useQuery();\n\n  const [benefitIds, setBenefitIds] = useState<string[]>();\n\n  const columnTable = useMemo(() => {\n    if (isSaleDirector && tab === RoleType.MySelf) {\n      return columnsManager;\n    }\n    if (isAdmin && tab === RoleType.Manager) {\n      const updatedColumnsEmployee = [...columnsEmployee!];\n      updatedColumnsEmployee.splice(5, 1);\n      return updatedColumnsEmployee;\n    }\n    return columnsEmployee;\n  }, [tab, isSaleDirector]);\n\n  const rowSelection = {\n    onChange: (_selectedRowKeys: Key[], selectedRows: DataKPIType[]) => {\n      setBenefitIds(selectedRows.map((row) => row.id!));\n    },\n  };\n\n  const handleSearch = ({ textSearch, statusId, time }: SearchParams) => {\n    getAllBenefit({\n      pageIndex: pagination?.pageIndex ?? Pagination.PAGEINDEX,\n      pageSize: Pagination.PAGESIZE,\n      textSearch,\n      statusId,\n      time,\n      roleType: tab!,\n    });\n  };\n\n  const handleTableChange = (page: number) => {\n    getAllBenefit({\n      pageIndex: page,\n      pageSize: Pagination.PAGESIZE,\n      roleType: tab!,\n      textSearch: textSearch ? decodeURI(textSearch).replace(/\\+/g, ' ') : undefined,\n      time,\n      statusId,\n    });\n  };\n\n  useEffect(() => {\n    getAllBenefit({\n      pageIndex: Pagination.PAGEINDEX,\n      pageSize: Pagination.PAGESIZE,\n      roleType: tab!,\n    });\n    getAllStatusBenefit();\n  }, [getAllBenefit, getAllStatusBenefit, tab]);\n\n  return (\n    <div css={rootStyle}>\n      {((tab === RoleType.Employee && isSaleDirector) || isAdmin) && (\n        <Fragment>\n          <Button\n            onClick={() => openModal('Add Privileges')}\n            type=\"primary\"\n            css={addKPIBtnStyle}\n            iconPosition=\"start\"\n            size=\"large\"\n          >\n            <CustomIcon color=\"#fff\" width={16} height={16} type=\"circle-plus\" />\n            <span>Thêm Quyền lợi</span>\n          </Button>\n          <div css={[searchContainer, isAdmin && adminSearchStyle]}>\n            <Search\n              onSearch={handleSearch}\n              status={tab === RoleType.Manager ? undefined : (status as any)}\n              loadingStatus={loadingStatus}\n            />\n          </div>\n          <Button\n            css={deleteBtnStyle}\n            onClick={() => openModal(ModalPrivilegesType.Delete, undefined, benefitIds)}\n            size=\"large\"\n            danger\n            disabled={!benefitIds}\n          >\n            Xoá Quyền lợi đã chọn\n          </Button>\n        </Fragment>\n      )}\n\n      <TableCustom\n        css={[isSale && tableStyle]}\n        rowSelection={tab === RoleType.Employee || isAdmin ? rowSelection : undefined}\n        columns={columnTable}\n        dataSource={data}\n        loading={loading}\n        rowKey={(record) => record.id}\n        onTableChange={(page) => handleTableChange(page)}\n        pagination={\n          ((isSaleDirector && tab === RoleType.Employee) || isAdmin) && {\n            current: pagination?.pageIndex,\n            pageSize: Pagination.PAGESIZE,\n            total: pagination?.totalRecords,\n            position: ['bottomCenter'],\n          }\n        }\n        scroll={{ x: tab === RoleType.MySelf ? 1200 : 1800 }}\n      />\n    </div>\n  );\n}\n\nconst rootStyle = css`\n  position: relative;\n`;\n\nconst addKPIBtnStyle = css`\n  position: absolute;\n  right: 0;\n  top: -9rem;\n  background: #0070b8;\n  display: flex;\n  align-items: center;\n  gap: 0.2rem;\n  &:hover {\n    background: #0070b8 !important;\n    opacity: 0.9;\n  }\n`;\n\nconst searchContainer = css`\n  margin-top: 2.6rem;\n`;\n\nconst deleteBtnStyle = css`\n  margin: 2.4rem 0 1.4rem 0;\n`;\n\nconst adminSearchStyle = css`\n  margin-bottom: 2.6rem;\n`;\n\nconst tableStyle = css`\n  margin-top: 2.6rem;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setBreadcrumbItemsAction } from '@/redux/slicers/breadcrumb.slice';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { CustomIcon } from '@/components/icons';\nimport { Tabs, TabsProps } from 'antd';\nimport TablePrivileges from './table-privileges';\nimport { ModalPrivilegesProvider } from '../../components/modals/privileges';\nimport { useQuery } from '@/hooks/query.hook';\nimport { useNavigate } from 'react-router-dom';\nimport { getTenant } from '@/utils/common';\nimport { usePermission } from '@/hooks/permission.hook';\nimport { RoleType } from '@/enum/role.enum';\nimport { useRootSelector } from '@/hooks/selector.hook';\n\nexport default function PrivilegesPage() {\n  const dispatch = useDispatch();\n  const { formatMessage } = useLocale();\n  const navigate = useNavigate();\n  const tenant = getTenant();\n  const totalRecords = useRootSelector((state) => state.sale.benefit.pagination?.totalRecords);\n  const { isAdmin, isSaleDirector } = usePermission();\n  const { tab: activeKey } = useQuery();\n\n  const items: TabsProps['items'] = [\n    {\n      key: isAdmin ? RoleType.Manager : RoleType.MySelf,\n      label: isAdmin ? ' Quyền lợi của giám đốc' : formatMessage({ id: 'title.tab.privileges.my' }),\n      children: <TablePrivileges />,\n    },\n    {\n      key: RoleType.Employee,\n      label: formatMessage({ id: 'title.tab.privileges.employee' }),\n      children: <TablePrivileges />,\n    },\n  ];\n\n  const onChange = (key: string) => {\n    navigate(`?tab=${key}&tenant=${tenant}`);\n  };\n\n  useEffect(() => {\n    if (!activeKey) {\n      navigate(`?tab=${isAdmin ? RoleType.Manager : RoleType.MySelf}&tenant=${tenant}`);\n    }\n  }, [activeKey]);\n\n  useEffect(() => {\n    const breadCrumbItems = [\n      {\n        title: {\n          vi_VN: 'Sale',\n          en_US: 'Sale',\n        },\n      },\n      {\n        title: {\n          vi_VN: 'Cơ hội',\n          en_US: 'Privileges',\n        },\n      },\n    ];\n    dispatch(setBreadcrumbItemsAction(breadCrumbItems));\n  }, [dispatch]);\n\n  return (\n    <ModalPrivilegesProvider>\n      <h3 css={titleStyle}>{formatMessage({ id: 'title.document.privileges' })}</h3>\n      <div css={subTitleStyle}>\n        <span>{formatMessage({ id: 'title.document.privileges' })}</span>\n        <CustomIcon width={8} height={8} type=\"dot\" />\n        <span>\n          {totalRecords} {formatMessage({ id: 'title.document.privileges' })}\n        </span>\n      </div>\n      {(isAdmin || isSaleDirector) && (\n        <Tabs activeKey={activeKey} items={items} onChange={onChange} />\n      )}\n      {!(isAdmin || isSaleDirector) && <TablePrivileges />}\n    </ModalPrivilegesProvider>\n  );\n}\n\nconst subTitleStyle = css`\n  display: flex;\n  align-items: center;\n  margin-top: 0.4rem;\n  gap: 4px;\n  font-size: 1.4rem;\n`;\n\nconst titleStyle = css`\n  font-size: 1.8rem;\n  line-height: 2.3rem;\n  font-weight: 600;\n`;\n"],"names":["ModalPrivilegesType","EditPrivileges","Delete","SuggestedEdit","Report","AddPrivileges","TotalPrivileges","FinalizePrivileges","useBenefit","api","useApi","caller","useCaller","dispatch","useDispatch","tenant","getTenant","user","useRootSelector","state","auth","getAllBenefit","useCallback","pageIndex","Pagination","PAGEINDEX","pageSize","PAGESIZE","textSearch","statusId","time","dayjs","year","toString","roleType","RoleType","MySelf","queryParams","PageIndex","PageSize","UserId","id","RoleId","applicationRoles","StatusId","Time","TextSearch","urlParams","generateUrlParams","data","succeeded","post","loadingKey","items","totalRecords","totalPages","totalExtend","setListBenefitAction","pagination","getBenefitById","get","messageKey","setDataBenefitDetailAction","addBenefit","values","dataAddBenefit","convertToUppercaseFirstLetter","addBenefitAction","updateBenefit","rest","updateBenefitAction","updateTotalBenefit","put","deleteBenefit","benefitIds","deleteIds","join","del","deleteBenefitAction","updateStatusBenefit","dataUpdateStatusBenefit","updateStatusById","refuseEditBenefit","applicationUserId","applicationUser","status","StatusBenefit","Confirm","getAllStatusBenefit","setDataStatusAction","getUsersBenefit","setDataUserBenefitAction","useMemo","closeModal","formatMessage","form","users","sale","userOptions","fullName","onFinish","totalSalary","monthlySalary","targetSalary","add","oncancel","useEffect","Fragment","jsx","formTitleStyle","jsxs","Form","formAddPrivilegeStyle","labelFormItem","_EMOTION_STRINGIFIED_CSS_ERROR__","process","ReportPrivileges","messageType","Updated","rootStyle","titleStyle","contentStyle","Row","LocaleFormatter","_b","Col","NODE_ENV","SuggestEditPrivileges","isSale","isSaleDirector","handlerefuseEdit","refuseEdit","formStyle","required","Input","message","loading","useWatchLoading","dataUpdateBenefit","setFieldsValue","_a","DeletePrivileges","location","Space","Button","deleteGoal","styles","map","totalBenefit","edit","InputNumber","inputStyle","editStatus","name","ModalContext","createContext","context","ModalPrivilegesProvider","currentModal","useState","modalName","setOpen","openModal","setCurrentModal","children","MenuItem","isAdmin","handleItemClick","tab","onClick","key","label","adminItems","saleItems","benefitStatus","columnsEmployee","title","dataIndex","align","render","__","record","code","Request","Message","fixed","width","PrivilegesDropdown","columnsManager","TablePrivileges","columnTable","useQuery","updatedColumnsEmployee","splice","handleTableChange","page","setBenefitIds","addKPIBtnStyle","position","searchContainer","adminSearchStyle","Search","loadingStatus","deleteBtnStyle","PrivilegesPage","navigate","useNavigate","usePermission","Employee","Manager","onChange","setBreadcrumbItemsAction","activeKey","vi_VN","subTitleStyle","CustomIcon","Tabs"],"mappings":"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"}