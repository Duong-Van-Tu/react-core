{"version":3,"file":"gains-question-relationship-BjdVSBDR.js","sources":["../../src/modules/sales/pages/relationship/gains-question-relationship.tsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { CustomIcon } from '@/components/icons';\nimport { LocaleFormatter } from '@/components/locale-formatter';\nimport { getTenant } from '@/utils/common';\nimport { css } from '@emotion/react';\nimport { Button, Form, FormProps, Radio, Row, Spin, message as messageAnt } from 'antd';\nimport { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useRelationship } from '../../services/relationship.service';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { convertToUppercaseFirstLetter } from '@/utils/get-pathCode';\nimport { Messages } from '@/constants/message';\nimport { useWatchMessage } from '@/hooks/message.hook';\nimport { useWatchLoading } from '@/hooks/loading.hook';\n\nexport default function GainsQuestionRelationshipPage() {\n  const { getRelationshipGainsQuestion, updateRelationshipGainsQuestion } = useRelationship();\n  const [messageApi, contextHolder] = messageAnt.useMessage();\n  const gainsQuestion = useRootSelector((state) => state.sale.relationship.gainsQuestion);\n  const [loading, updateLoading] = useWatchLoading(\n    ['relationship-gainsQuestion', true],\n    ['relationship-updateGainsQuestion', false],\n  );\n  const { id: relationshipId } = useParams();\n  const [form] = Form.useForm();\n  const navigate = useNavigate();\n  const tenant = getTenant();\n  const { errors } = useWatchMessage('relationship-updateGainsQuestion');\n\n  const onFinish: FormProps['onFinish'] = async (values) => {\n    const updatedGainsQuestion = gainsQuestion?.map((question) => {\n      if (values.hasOwnProperty(question.id)) {\n        return {\n          data: convertToUppercaseFirstLetter({\n            ...question,\n            answer: `${values[question.id] ?? question.answer}`,\n          }),\n        };\n      }\n      return question;\n    }) as RelationshipGainsQuestion[];\n\n    const update = await updateRelationshipGainsQuestion(updatedGainsQuestion);\n    if (update) {\n      form.resetFields();\n      messageApi.success(Messages.UPDATE_SUCCESS);\n    } else {\n      messageApi.success(errors[0]);\n    }\n  };\n\n  useEffect(() => {\n    getRelationshipGainsQuestion(relationshipId!);\n  }, [getRelationshipGainsQuestion, relationshipId]);\n\n  return (\n    <Spin spinning={loading} size=\"large\">\n      <div css={containerStyle}>\n        {contextHolder}\n        <Button css={closeStyle} onClick={() => navigate(`/sales/relationship?tenant=${tenant}`)}>\n          <CustomIcon type=\"close\" width={16} height={16} color=\"#ccc\" />\n          <LocaleFormatter id=\"title.exit\" />\n        </Button>\n        <h1 css={titleStyle}>Cập nhật kết quả mối quan hệ</h1>\n        <Form\n          form={form}\n          onFinish={onFinish}\n          name=\"question-gains\"\n          layout=\"horizontal\"\n          css={formStyle}\n        >\n          {gainsQuestion?.length! > 0 &&\n            gainsQuestion?.map((question) => (\n              <Form.Item\n                label={<span css={questionStyle}>{question.question}</span>}\n                name={question.id}\n              >\n                <Radio.Group\n                  name={question.id}\n                  css={radioGroupStyle}\n                  defaultValue={question.answer}\n                >\n                  <Radio value={true}>Đồng ý</Radio>\n                  <Radio value={false}>Không đồng ý</Radio>\n                </Radio.Group>\n              </Form.Item>\n            ))}\n          <Row justify=\"end\">\n            <Button loading={updateLoading} size=\"middle\" type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Row>\n        </Form>\n      </div>\n    </Spin>\n  );\n}\n\nconst containerStyle = css`\n  width: 100%;\n  max-width: 80rem;\n  height: 100%;\n  margin: 4rem auto;\n  position: relative;\n`;\n\nconst closeStyle = css`\n  display: flex;\n  align-items: center;\n  gap: 0.4rem;\n  position: absolute;\n  right: 0;\n  top: 0;\n  &:hover {\n    svg {\n      path {\n        fill: #4096ff;\n      }\n    }\n  }\n`;\n\nconst titleStyle = css`\n  font-size: 2.4rem;\n  line-height: 2.6rem;\n  font-weight: 500;\n  color: rgba(16, 24, 40, 1);\n  padding-top: 4rem;\n`;\n\nconst formStyle = css`\n  margin-top: 2rem;\n  display: flex;\n  flex-direction: column;\n\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  .ant-form-item-label {\n    flex: 0 0 70%;\n    max-width: 70%;\n    white-space: normal;\n    text-align: start;\n  }\n\n  .ant-form-item-control {\n    flex: 1 1 30%;\n  }\n`;\n\nconst questionStyle = css`\n  font-weight: 1.4rem;\n  line-height: 1.6rem;\n`;\n\nconst radioGroupStyle = css`\n  width: 100%;\n  text-align: end;\n`;\n"],"names":["GainsQuestionRelationshipPage","getRelationshipGainsQuestion","updateRelationshipGainsQuestion","messageApi","contextHolder","messageAnt","gainsQuestion","useRootSelector","useMessage","relationshipId","loading","form","Form","navigate","tenant","errors","values","question","updatedGainsQuestion","map","Messages","success","useEffect","containerStyle","jsxs","Button","closeStyle","jsx","CustomIcon","LocaleFormatter","process","onFinish","_EMOTION_STRINGIFIED_CSS_ERROR__","NODE_ENV","Radio","Row"],"mappings":"glBAWA,SAAyBA,IAAA,CAEzB,KAAA,CAEA,6BAAAC,EAAAA,gCAAAA,GAAwDC,EAAAA,EAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,WAAA,EAChDC,EAAAC,KAAAC,EAAA,KAAA,aAAA,aAAA,EAAEP,IAAAA,EAAAA,EAAAA,CAAAA,6BAAAA,EAAAA,EAAAA,CAAAA,mCAAAA,EAAAA,CAAAA,EAA8BC,CAGhC,GAAAO,GAACC,EAAAA,EACL,CAAAC,CAAA,EAAAC,EAAA,QAAA,EAGIC,EAAAD,IAAMH,MAA6BK,CACnC,OAAAC,CAAA,EAACJ,EAAAA,kCAAAA,UAAqBK,GAAA,CAEtBF,MAAAA,EAAmBR,GAAA,YAAAA,EAAA,IAAAW,GACnBC,EAAAA,eAAAA,EAAAC,EAAAA,EAAEJ,cAGAG,OAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,EAAAA,CAAAA,CAAAA,EAGoCD,GAEgB,MAAAf,EAAAgB,CAAA,GAIjDD,EAAAA,YAAAA,EACRd,EAAA,QAAAiB,EAAA,cAAA,GAGWjB,EAAA,QAAAY,EAAA,CAAA,CAAA,CACOM,EACyBC,OAAAA,EAAAA,UAAA,IAAA,CAG5CA,EAAAb,CAAA,CAAA,EACFR,CAAAA,EAAAQ,CAAA,CAAA,IAEgBA,EAAAA,CAKd,SAAAC,EAGIN,KAAAA,QACG,WAAA,MAAA,CACD,IAAAmB,EACF,SAAA,CAAAnB,EAAAoB,EAAAC,EAAA,CACC,IAAAC,EACD,QAAA,IAAAb,EAAA,8BAIEC,CAAA,EAAA,EAGCR,SAAAA,CAYQqB,EAAAC,GAanBtB,KAAAA,QAUgB,MAAA,GAAA,OAAA,SAAA,MAAA,CAAA,EAAAqB,EAAAE,EAAA,CAgBA,GAAA,YAAA,CAAA,CAAA,CAAA,CAAA,EAAAF,EAAA,KAAA,CAAAG,IAAAA,EAAA,SAAA,8BAAA,CAAA,EAAAN,EAAAZ,EAAA,CAAA,KAAAD,EAAA,SAAAoB,EAAA,KAAA,iBAAA,OAAA,aAAAC,IAAAA,EAAA,SAAA,EAAA1B,GAAA,YAAAA,EAAA,QAAA,IAAAA,GAAA,YAAAA,EAAA,IAAAW,GAAAU,EAAAf,EAAA,KAAA,CAQDoB,QAAAA,OAAAA,CAAAA,IAAAA,EAAAA,SAAAA,EAAAA,QAAAA,CAAAA,EAAAA,KAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,MAAAA,CAAAA,KAAAA,EAAAA,GAAAA,IAAAA,EAAAA,aAAAA,EAAAA,OAyBMF,SAAAA,CAAAG,EAAAA,EAAA,CAAA,MAAA,GAAA,SAAA,QAAA,CAAA,EAAAN,EAAAO,EAAA,CAAA,MAAA,GAAA,SAAA,cAAA,CAAA,CAAA,CAAA,CAAAF,CAAAA,CAAA,IAAAL,EAAAQ,EAAA"}