{"version":3,"file":"edit-opportunity-CeIQZjlw.js","sources":["../../src/modules/sales/pages/opportunity/edit-opportunity.tsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect } from 'react';\nimport dayjs from 'dayjs';\nimport {\n  Button,\n  Col,\n  DatePicker,\n  Form,\n  FormProps,\n  Input,\n  InputNumber,\n  Row,\n  Spin,\n  message as messageAnt,\n} from 'antd';\nimport Close from '@/assets/svg/close.svg?react';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { LocaleFormatter } from '@/components/locale-formatter';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { getTenant } from '@/utils/common';\nimport { useOpportunity } from '@/modules/sales/services/opportunity.service';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { Messages } from '@/constants/message';\nimport { useWatchMessage } from '@/hooks/message.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\n\ntype FieldType = {\n  customerName: string;\n  accountable: string;\n  technicalLead: string;\n  beneficiary: string;\n  need: string;\n  estimatedTime: string;\n  budget: number;\n  estimatedMoney: number;\n  commissionMoney: number;\n  opponent1: string;\n  opponent1Attribute: string;\n  opponent2: string;\n  opponent2Attribute: string;\n  strategy: string;\n  lastTimeInteract: string;\n  winningOpportunity: string;\n};\n\nexport default function EditOpportunityPage() {\n  const { formatMessage } = useLocale();\n  const { updateOpportunity, getOpportunityById } = useOpportunity();\n  const { id: opportunityId } = useParams();\n  const [loading, opportunityDetailLoading] = useWatchLoading(\n    ['edit-opportunity', false],\n    ['get-opportunityDetail', true],\n  );\n  const [form] = Form.useForm();\n  const [messageApi, contextHolder] = messageAnt.useMessage();\n  const { errors } = useWatchMessage('editOpportunity-message');\n  const navigate = useNavigate();\n  const tenant = getTenant();\n  const dataOpportunity = useRootSelector((state) => state.sale.opportunity.detail);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const dataUpdateOpportunity = {\n      id: opportunityId,\n      ...values,\n      estimatedMoney: values.estimatedMoney.toString(),\n      budget: values.budget.toString(),\n      commissionMoney: values.commissionMoney.toString(),\n      estimatedTime: dayjs(values.estimatedTime).format('DD/MM/YYYY'),\n      lastTimeInteract: dayjs(values.lastTimeInteract).format('DD/MM/YYYY'),\n    };\n    const edit = await updateOpportunity(dataUpdateOpportunity);\n    if (edit) {\n      messageApi.success(Messages.UPDATE_SUCCESS);\n    } else {\n      messageApi.success(errors[0]);\n    }\n  };\n\n  useEffect(() => {\n    if (opportunityId) {\n      getOpportunityById(opportunityId);\n    }\n  }, [getOpportunityById, opportunityId]);\n\n  useEffect(() => {\n    if (dataOpportunity) {\n      const formatData = {\n        ...dataOpportunity,\n        estimatedTime: dayjs(dataOpportunity.estimatedTime),\n        lastTimeInteract: dayjs(dataOpportunity.lastTimeInteract),\n      };\n      form.setFieldsValue(formatData);\n    }\n  }, [dataOpportunity]);\n\n  return (\n    <Spin spinning={opportunityDetailLoading} size=\"large\">\n      <div css={containerStyle}>\n        {contextHolder}\n        <Button css={closeStyle} onClick={() => navigate(`/sales/opportunity?tenant=${tenant}`)}>\n          <Close width={16} height={16} color=\"#ccc\" />\n          <LocaleFormatter id=\"title.exit\" />\n        </Button>\n        <h1 css={titleStyle}>{formatMessage({ id: 'title.editOpportuity' })}</h1>\n        <Form\n          form={form}\n          css={formUpdateResultStyle}\n          name=\"add-opportunity\"\n          onFinish={onFinish}\n          layout=\"vertical\"\n        >\n          <Row gutter={[20, 0]}>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>{formatMessage({ id: 'form.input.customer' })}</span>\n                }\n                name=\"customerName\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({ id: 'form.input.require.customer' }),\n                  },\n                ]}\n              >\n                <Input\n                  size=\"large\"\n                  placeholder={formatMessage({ id: 'form.input.placeholder.customer' })}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>\n                    {formatMessage({ id: 'form.input.decisionMaker' })}\n                  </span>\n                }\n                name=\"accountable\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({ id: 'form.input.require.decisionMaker' }),\n                  },\n                ]}\n              >\n                <Input\n                  size=\"large\"\n                  placeholder={formatMessage({ id: 'form.input.placeholder.decisionMaker' })}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n\n          <Row gutter={[20, 0]}>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>\n                    {formatMessage({ id: 'form.input.technicalPerson' })}\n                  </span>\n                }\n                name=\"technicalLead\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({ id: 'form.input.require.technicalPerson' }),\n                  },\n                ]}\n              >\n                <Input\n                  size=\"large\"\n                  placeholder={formatMessage({ id: 'form.input.placeholder.technicalPerson' })}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>{formatMessage({ id: 'form.input.beneficiary' })}</span>\n                }\n                name=\"beneficiary\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({ id: 'form.input.require.beneficiary' }),\n                  },\n                ]}\n              >\n                <Input\n                  size=\"large\"\n                  placeholder={formatMessage({ id: 'form.input.placeholder.beneficiary' })}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n\n          <Form.Item<FieldType>\n            label={\n              <span css={labelFormItem}>{formatMessage({ id: 'form.input.customerNeeds' })}</span>\n            }\n            name=\"need\"\n            rules={[\n              {\n                required: true,\n                message: formatMessage({ id: 'form.input.require.customerNeeds' }),\n              },\n            ]}\n          >\n            <Input.TextArea\n              placeholder={formatMessage({ id: 'form.input.placeholder.customerNeeds' })}\n            />\n          </Form.Item>\n\n          <Row gutter={[20, 0]}>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>\n                    {formatMessage({ id: 'form.input.OpportunityTimeline' })}\n                  </span>\n                }\n                name=\"estimatedTime\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({ id: 'form.input.require.OpportunityTimeline' }),\n                  },\n                ]}\n              >\n                <DatePicker\n                  css={inputStyle}\n                  size=\"large\"\n                  format={['DD/MM/YYYY']}\n                  placeholder=\"DD/MM/YYYY\"\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>{formatMessage({ id: 'form.input.budget' })}</span>\n                }\n                name=\"budget\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({ id: 'form.input.require.budget' }),\n                  },\n                ]}\n              >\n                <InputNumber\n                  css={inputStyle}\n                  size=\"large\"\n                  placeholder={formatMessage({ id: 'form.input.placeholder.budget' })}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n\n          <Row gutter={[20, 0]}>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>\n                    {formatMessage({ id: 'form.input.estimatedPrice' })}\n                  </span>\n                }\n                name=\"estimatedMoney\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({ id: 'form.input.require.estimatedPrice' }),\n                  },\n                ]}\n              >\n                <InputNumber\n                  css={inputStyle}\n                  size=\"large\"\n                  placeholder={formatMessage({ id: 'form.input.placeholder.estimatedPrice' })}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>\n                    {formatMessage({ id: 'form.input.commissionConsultant' })}\n                  </span>\n                }\n                name=\"commissionMoney\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({ id: 'form.input.require.commissionConsultant' }),\n                  },\n                ]}\n              >\n                <InputNumber\n                  css={inputStyle}\n                  size=\"large\"\n                  placeholder={formatMessage({ id: 'form.input.placeholder.commissionConsultant' })}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n\n          <Row gutter={[20, 0]}>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>\n                    {formatMessage({ id: 'form.input.oneCompetitor' })}\n                  </span>\n                }\n                name=\"opponent1\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({ id: 'form.input.require.oneCompetitor' }),\n                  },\n                ]}\n              >\n                <Input\n                  size=\"large\"\n                  placeholder={formatMessage({ id: 'form.input.placeholder.oneCompetitor' })}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>\n                    {formatMessage({ id: 'form.input.strengthsAndWeaknesses' })}\n                  </span>\n                }\n                name=\"opponent1Attribute\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({ id: 'form.input.require.strengthsAndWeaknesses' }),\n                  },\n                ]}\n              >\n                <Input\n                  size=\"large\"\n                  placeholder={formatMessage({\n                    id: 'form.input.placeholder.strengthsAndWeaknesses',\n                  })}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n\n          <Row gutter={[20, 0]}>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>\n                    {formatMessage({ id: 'form.input.twoCompetitor' })}\n                  </span>\n                }\n                name=\"opponent2\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({ id: 'form.input.require.twoCompetitor' }),\n                  },\n                ]}\n              >\n                <Input\n                  size=\"large\"\n                  placeholder={formatMessage({\n                    id: 'form.input.placeholder.twoCompetitor',\n                  })}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>\n                    {formatMessage({ id: 'form.input.strengthsAndWeaknesses' })}\n                  </span>\n                }\n                name=\"opponent2Attribute\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({ id: 'form.input.require.strengthsAndWeaknesses' }),\n                  },\n                ]}\n              >\n                <Input\n                  size=\"large\"\n                  placeholder={formatMessage({\n                    id: 'form.input.placeholder.strengthsAndWeaknesses',\n                  })}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n\n          <Form.Item<FieldType>\n            label={<span css={labelFormItem}>{formatMessage({ id: 'form.input.strategy' })}</span>}\n            name=\"strategy\"\n            rules={[\n              {\n                required: true,\n                message: formatMessage({ id: 'form.input.require.strategy' }),\n              },\n            ]}\n          >\n            <Input.TextArea\n              placeholder={formatMessage({\n                id: 'form.input.placeholder.strategy',\n              })}\n            />\n          </Form.Item>\n\n          <Row gutter={[20, 0]}>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>\n                    {formatMessage({ id: 'form.input.interactionBetweenCompanyAndCustomer' })}\n                  </span>\n                }\n                name=\"lastTimeInteract\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({\n                      id: 'form.input.require.interactionBetweenCompanyAndCustomer',\n                    }),\n                  },\n                ]}\n              >\n                <DatePicker\n                  format={['DD/MM/YYYY']}\n                  css={inputStyle}\n                  size=\"large\"\n                  placeholder={formatMessage({\n                    id: 'form.input.placeholder.interactionBetweenCompanyAndCustomer',\n                  })}\n                />\n              </Form.Item>\n            </Col>\n            <Col span={12}>\n              <Form.Item<FieldType>\n                label={\n                  <span css={labelFormItem}>\n                    {formatMessage({ id: 'form.input.WinProbabilityEvaluation' })}\n                  </span>\n                }\n                name=\"winningOpportunity\"\n                rules={[\n                  {\n                    required: true,\n                    message: formatMessage({\n                      id: 'form.input.require.WinProbabilityEvaluation',\n                    }),\n                  },\n                ]}\n              >\n                <Input\n                  size=\"large\"\n                  placeholder={formatMessage({\n                    id: 'form.input.placeholder.WinProbabilityEvaluation',\n                  })}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n\n          <Row justify=\"end\">\n            <Button loading={loading} size=\"large\" type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Row>\n        </Form>\n      </div>\n    </Spin>\n  );\n}\n\nconst containerStyle = css`\n  width: 100%;\n  max-width: 90rem;\n  height: 100%;\n  margin: 3rem auto;\n  position: relative;\n`;\n\nconst closeStyle = css`\n  display: flex;\n  align-items: center;\n  gap: 0.4rem;\n  position: absolute;\n  right: 0;\n  top: 0;\n  &:hover {\n    svg {\n      path {\n        fill: #4096ff;\n      }\n    }\n  }\n`;\n\nconst titleStyle = css`\n  font-size: 2.4rem;\n  line-height: 2.4rem;\n  font-weight: 600;\n  color: rgba(16, 24, 40, 1);\n`;\n\nconst formUpdateResultStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n  color: rgba(16, 24, 40, 1);\n`;\n\nconst inputStyle = css`\n  width: 100%;\n`;\n"],"names":["EditOpportunityPage","edit","updateOpportunity","getOpportunityById","success","loading","opportunityDetailLoading","useWatchLoading","useEffect","Form","messageAnt","opportunityId","navigate","state","onFinish","dataOpportunity","estimatedTime","lastTimeInteract","estimatedMoney","form","commissionMoney","values","contextHolder","messageApi","Messages","errors","formatData","Spin","jsxs","Button","closeStyle","jsx","Close","LocaleFormatter","id","formatMessage","formUpdateResultStyle","Row","Col","Input","labelFormItem","required","_EMOTION_STRINGIFIED_CSS_ERROR__","NODE_ENV","process"],"mappings":"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"}