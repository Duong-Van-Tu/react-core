{"version":3,"file":"index-J7vuBU6J.js","sources":["../../src/modules/sales/services/kpi.service.ts","../../src/modules/sales/components/modals/kpi/edit-kpi.modal.tsx","../../src/modules/sales/components/modals/kpi/finalize-kpi.modal.tsx","../../src/modules/sales/components/modals/kpi/request-edit-kpi.modal.tsx","../../src/modules/sales/components/modals/kpi/report-kpi.modal.tsx","../../src/modules/sales/components/modals/kpi/modify-kpi.modal.tsx","../../src/modules/sales/components/modals/kpi/add-kpi.modal.tsx","../../src/modules/sales/components/modals/kpi/delete-kpi.modal.tsx","../../src/modules/sales/components/modals/kpi/update-request-kpi.tsx","../../src/modules/sales/components/modals/kpi/index.tsx","../../src/modules/sales/components/dropdown/kpi.dropdown.tsx","../../src/modules/sales/pages/kpi/columns/index.tsx","../../src/modules/sales/pages/kpi/table-kpi.tsx","../../src/modules/sales/pages/kpi/index.tsx"],"sourcesContent":["import { useApi, useCaller } from '@/hooks/api.hook';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  addKPIAction,\n  deleteKPIAction,\n  setDataReportAction,\n  setDataStatusAction,\n  setListKPIAction,\n  updateKPIAction,\n} from '../reducers/slicers/kpi.slice';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { convertToUppercaseFirstLetter } from '@/utils/get-pathCode';\nimport { Pagination } from '@/constants/pagination';\nimport { Status } from '../enum/status.enum';\nimport { generateUrlParams, getTenant } from '@/utils/common';\nimport dayjs from 'dayjs';\n\ntype FilterKPIType = {\n  pageIndex: number;\n  pageSize: number;\n  textSearch?: string;\n  statusId?: string;\n  time?: string;\n  roleType: string;\n};\nexport const useKPI = () => {\n  const api = useApi('');\n  const caller = useCaller();\n  const dispatch = useDispatch();\n  const tenant = getTenant();\n  const user = useRootSelector((state) => state.auth.user);\n\n  const getAllKPI = useCallback(\n    async ({\n      pageIndex = Pagination.PAGEINDEX,\n      pageSize = Pagination.PAGESIZE,\n      textSearch,\n      statusId,\n      time = dayjs().year().toString(),\n      roleType,\n    }: FilterKPIType) => {\n      const queryParams: { [key: string]: string | undefined } = {\n        PageIndex: pageIndex.toString(),\n        PageSize: pageSize.toString(),\n        UserId: user?.id,\n        RoleId: user?.applicationRoles[0].id,\n        StatusId: statusId,\n        Time: `1-1-${time}`, // value is first day Of year\n        TextSearch: textSearch,\n        tenant: tenant,\n        roleType,\n      };\n\n      const urlParams = generateUrlParams(queryParams);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/Goal/get-list-with-pagination?${urlParams}`),\n        {\n          loadingKey: 'get-kpi',\n        },\n      );\n      if (succeeded) {\n        const { items, totalRecords, pageIndex, totalPages, totalExtend } = data;\n        dispatch(\n          setListKPIAction({\n            data: items,\n            pagination: {\n              pageIndex,\n              totalRecords,\n              totalPages,\n            },\n            totalExtend,\n          }),\n        );\n      }\n    },\n    [caller, api],\n  );\n\n  const addKPI = useCallback(\n    async (values: DataKPIType) => {\n      const dataAddKPI = convertToUppercaseFirstLetter({ ...values, userSuggestId: user?.id });\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/Goal/add-or-update?tenant=${tenant}`, [{ data: dataAddKPI }]),\n        { loadingKey: 'add-kpi' },\n      );\n\n      if (succeeded) {\n        dispatch(addKPIAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const updateKPI = useCallback(\n    async (values: DataKPIType) => {\n      const { id, ...rest } = values;\n      const dataAddKPI = convertToUppercaseFirstLetter({ ...rest, userSuggestId: user?.id });\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/Goal/add-or-update?tenant=${tenant}`, [{ id, data: dataAddKPI }]),\n        { loadingKey: 'edit-kpi' },\n      );\n\n      if (succeeded) {\n        dispatch(updateKPIAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const deleteKPI = useCallback(\n    async (goalIds: string[]) => {\n      const deleteIds = goalIds.join(',');\n      const { succeeded } = await caller(\n        () => api.del(`/Goal/delete-by-ids/${deleteIds}/${user?.id}?tenant=${tenant}`),\n        { loadingKey: 'delete-kpi' },\n      );\n\n      if (succeeded) {\n        dispatch(deleteKPIAction(goalIds));\n\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  // status\n  const updateStatusKPI = useCallback(\n    async (values: DataKPIType) => {\n      const dataUpdateStatusKPI = convertToUppercaseFirstLetter({\n        ...values,\n      });\n\n      const { data, succeeded } = await caller(\n        () => api.put(`/Goal/update-status-by-id?tenant=${tenant}`, dataUpdateStatusKPI),\n        { loadingKey: 'edit-status' },\n      );\n\n      if (succeeded) {\n        dispatch(updateKPIAction(data));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const refuseEditKPI = useCallback(\n    async (values: DataKPIType) => {\n      const dataUpdateStatusKPI = convertToUppercaseFirstLetter({\n        id: values.id,\n        applicationUserId: values.userSuggest?.id,\n        status: Status.Updated,\n      });\n\n      const { data, succeeded } = await caller(\n        () => api.put(`/Goal/update-status-by-id?tenant=${tenant}`, dataUpdateStatusKPI),\n        { loadingKey: 'refuse-edit' },\n      );\n\n      if (succeeded) {\n        dispatch(updateKPIAction(data));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const showReport = useCallback(\n    async (values: DataKPIType) => {\n      const { data, succeeded } = await caller(\n        () => api.get(`/Goal/get-by-id/${values.id}?tenant=${tenant}`),\n        {\n          loadingKey: 'report-kpi',\n        },\n      );\n\n      if (succeeded) {\n        dispatch(setDataReportAction(data));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const getAllStatusKPI = useCallback(async () => {\n    const { data, succeeded } = await caller(\n      () => api.get(`/GoalStatus/get-all?tenant=${tenant}`),\n      {\n        loadingKey: 'status-kpi',\n      },\n    );\n\n    if (succeeded) {\n      dispatch(setDataStatusAction(data));\n    }\n  }, [api, caller]);\n\n  return {\n    getAllKPI,\n    addKPI,\n    deleteKPI,\n    updateKPI,\n    updateStatusKPI,\n    refuseEditKPI,\n    showReport,\n    getAllStatusKPI,\n  };\n};\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useKPI } from '@/modules/sales/services/kpi.service';\nimport { css } from '@emotion/react';\nimport { Button, Col, Form, FormProps, Input, Row, Space } from 'antd';\nimport { Fragment, useEffect } from 'react';\n\ntype FieldType = {\n  id?: string;\n  criteria: string;\n  targetKPI: string;\n  targetPoint: number;\n  calculate: string;\n};\n\ntype EditKPIProps = {\n  closeModal: () => void;\n  data: DataKPIType;\n};\n\nexport const EditKPI = ({ closeModal, data }: EditKPIProps) => {\n  const { updateKPI } = useKPI();\n  const [form] = Form.useForm();\n  const [loading] = useWatchLoading(['edit-kpi', false]);\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const dataUpdateKPI = {\n      ...values,\n      id: data.id,\n      targetKPI: values.targetKPI.toString(),\n      targetPoint: values.targetPoint.toString(),\n    };\n\n    const edit = await updateKPI(dataUpdateKPI);\n    if (edit) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n  useEffect(() => {\n    form.setFieldsValue(data);\n  }, [data]);\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Chỉnh sửa mục tiêu</h3>\n      <Form form={form} css={formStyle} name=\"edit-kpi\" onFinish={onFinish} layout=\"vertical\">\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Tiêu chí</span>}\n          name=\"criteria\"\n          rules={[{ required: true, message: 'Vui lòng nhập tiêu chí!' }]}\n        >\n          <Input.TextArea placeholder=\"Nhập tiêu chí\" />\n        </Form.Item>\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Mục tiêu</span>}\n              name=\"targetKPI\"\n              rules={[{ required: true, message: 'Vui lòng nhập mục tiêu!' }]}\n            >\n              <Input size=\"large\" placeholder=\"Nhập mục tiêu\" />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Điểm mục tiêu</span>}\n              name=\"targetPoint\"\n              rules={[{ required: true, message: 'Vui lòng nhập điểm mục tiêu!' }]}\n            >\n              <Input size=\"large\" placeholder=\"Nhập điểm mục tiêu\" />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Cách tính</span>}\n          name=\"calculate\"\n          rules={[{ required: true, message: 'Vui lòng nhập cách tính!' }]}\n        >\n          <Input.TextArea\n            size=\"large\"\n            placeholder=\"Nếu vượt mục tiêu 1 khách hàng + 100 cho mỗi khách hàng. Nếu thiếu 1 khách hàng thì - 100 điểm\"\n          />\n        </Form.Item>\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n`;\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { usePermission } from '@/hooks/permission.hook';\nimport { Status } from '@/modules/sales/enum/status.enum';\nimport { useKPI } from '@/modules/sales/services/kpi.service';\nimport { css } from '@emotion/react';\nimport { Button, Row, Space } from 'antd';\n\ntype FinalizeKPIProps = {\n  closeModal: () => void;\n  data: DataKPIType;\n};\nexport const FinalizeKPI = ({ closeModal, data }: FinalizeKPIProps) => {\n  const { updateStatusKPI } = useKPI();\n  const [loading] = useWatchLoading(['edit-status', false]);\n  const { isSale, isSaleDirector } = usePermission();\n\n  const handleFinalizeKPI = async () => {\n    const editStatus = await updateStatusKPI({\n      id: data.id,\n      applicationUserId: data.userSuggest?.id,\n      status: Status.Processing,\n    } as DataKPIType);\n\n    if (editStatus) {\n      closeModal();\n    }\n  };\n\n  const disableBtn = isSale\n    ? data.goalStatus?.code !== Status.Updated\n    : isSaleDirector && data.goalStatus?.code !== Status.Pending;\n\n  return (\n    <div css={rootStyle}>\n      <h3 css={titleStyle}>Đồng ý chốt mục tiêu này</h3>\n      <Row justify=\"center\">\n        <Space>\n          <Button onClick={() => closeModal()}>Huỷ</Button>\n          <Button\n            disabled={disableBtn}\n            loading={loading}\n            type=\"primary\"\n            onClick={handleFinalizeKPI}\n          >\n            Xác nhận\n          </Button>\n        </Space>\n      </Row>\n    </div>\n  );\n};\n\nconst rootStyle = css`\n  margin-top: 2rem;\n  padding: 0 2rem;\n`;\n\nconst titleStyle = css`\n  font-size: 1.8rem;\n  line-height: 2rem;\n  text-align: center;\n  margin-bottom: 2.4rem;\n  font-weight: 500;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { usePermission } from '@/hooks/permission.hook';\nimport { Status } from '@/modules/sales/enum/status.enum';\nimport { useKPI } from '@/modules/sales/services/kpi.service';\nimport { css } from '@emotion/react';\nimport { Button, Col, DatePicker, Form, FormProps, Input, InputNumber, Row, Space } from 'antd';\nimport dayjs from 'dayjs';\nimport { Fragment, useEffect } from 'react';\n\ntype FieldType = {\n  endTime: string;\n  targetKPI: number;\n  targetPoint: number;\n  suggestEndTime: string;\n  suggestTargetKPI: number;\n  suggestTargetPoint: number;\n};\n\ntype RequestEditProps = {\n  closeModal: () => void;\n  data: DataKPIType;\n};\n\nexport const RequestEdit = ({ closeModal, data }: RequestEditProps) => {\n  const { refuseEditKPI, updateStatusKPI } = useKPI();\n  const [form] = Form.useForm();\n  const [loading] = useWatchLoading(['edit-status', false]);\n  const { isSaleDirector, isSale } = usePermission();\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const { suggestEndTime, suggestTargetKPI, suggestTargetPoint } = values;\n    const dataUpdateKPI = {\n      id: data.id,\n      suggestEndTime: dayjs(suggestEndTime).format('DD/MM/YYYY'),\n      suggestTargetKPI: suggestTargetKPI.toString(),\n      suggestTargetPoint: suggestTargetPoint.toString(),\n      applicationUserId: data.userSuggest?.id,\n      status: isSale ? Status.Request : Status.Updated,\n    } as DataKPIType;\n\n    const editStatus = await updateStatusKPI(dataUpdateKPI);\n    if (editStatus) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const handleRefuseEditKPI = async () => {\n    const refuseEdit = await refuseEditKPI(data);\n    if (refuseEdit) {\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      ...data,\n      endTime: dayjs(data.endTime).format('DD/MM/YYYY'),\n      suggestEndTime: null,\n      suggestTargetKPI: null,\n      suggestTargetPoint: null,\n    });\n  }, [data]);\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>\n        {isSaleDirector ? 'Xem đề xuất chỉnh sửa' : 'Đề xuất chỉnh sửa mục tiêu'}\n      </h3>\n      <Form form={form} css={formStyle} name=\"edit-kpi\" onFinish={onFinish} layout=\"vertical\">\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Thời gian kết thúc mục tiêu hiện tại</span>}\n          name=\"endTime\"\n        >\n          <Input css={inputStyle} size=\"large\" disabled />\n        </Form.Item>\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Mục tiêu hiện tại</span>}\n              name=\"targetKPI\"\n            >\n              <InputNumber css={inputStyle} size=\"large\" disabled />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Điểm Mục tiêu hiên tại</span>}\n              name=\"targetPoint\"\n            >\n              <InputNumber css={inputStyle} size=\"large\" disabled />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Thơi gian kết thúc mục tiêu muốn chỉnh sửa</span>}\n          name=\"suggestEndTime\"\n        >\n          <DatePicker size=\"large\" format={['DD/MM/YYYY']} css={inputStyle} />\n        </Form.Item>\n\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Mục tiêu muốn chỉnh sửa</span>}\n              name=\"suggestTargetKPI\"\n              rules={[{ required: true, message: 'Vui lòng nhập mục tiêu muốn chỉnh sửa!' }]}\n            >\n              <InputNumber\n                size=\"large\"\n                css={inputStyle}\n                placeholder=\"Nhập mục tiêu muốn chỉnh sửa\"\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Điểm mục tiêu muốn chỉnh sửa</span>}\n              name=\"suggestTargetPoint\"\n              rules={[{ required: true, message: 'Vui lòng nhập điểm mục tiêu muốn chỉnh sửa!' }]}\n            >\n              <InputNumber\n                size=\"large\"\n                css={inputStyle}\n                placeholder=\"Nhập điểm mục tiêu muốn chỉnh sửa\"\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Row justify=\"end\" css={formFooterStyle}>\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            {isSaleDirector && (\n              <Button ghost type=\"primary\" onClick={handleRefuseEditKPI}>\n                Từ chối chỉnh sửa\n              </Button>\n            )}\n            <Button\n              disabled={\n                isSaleDirector\n                  ? data.goalStatus?.code !== Status.Request\n                  : data.goalStatus?.code !== Status.Processing\n              }\n              loading={loading}\n              type=\"primary\"\n              htmlType=\"submit\"\n            >\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem 0;\n`;\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n`;\n\nconst formFooterStyle = css`\n  margin-top: 1rem;\n`;\n\nconst inputStyle = css`\n  width: 100%;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect } from 'react';\nimport { Button, Col, Row, Space } from 'antd';\nimport dayjs from 'dayjs';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { useKPI } from '@/modules/sales/services/kpi.service';\n\ntype ReportProps = {\n  closeModal: () => void;\n  data: DataKPIType;\n};\n\nexport const Report = ({ closeModal, data }: ReportProps) => {\n  const { showReport } = useKPI();\n  const report = useRootSelector((state) => state.sale.kpi.report);\n\n  const oncancel = () => {\n    closeModal();\n  };\n\n  useEffect(() => {\n    showReport(data);\n  }, [data]);\n\n  return (\n    <div css={rootStyle}>\n      <h3 css={titleStyle}>Báo cáo</h3>\n      <div css={contentStyle}>\n        <Row justify=\"space-between\">\n          <Col>Tên người đề xuất</Col>\n          <Col>{`${report?.userSuggest?.firstName ?? ''} ${report?.userSuggest?.lastName ?? ''}`}</Col>\n        </Row>\n        <Row justify=\"space-between\">\n          <Col>Tiêu chí</Col>\n          <Col>{report?.criteria}</Col>\n        </Row>\n        <Row justify=\"space-between\">\n          <Col>Điểm mục tiêu</Col>\n          <Col>{report?.targetKPI}</Col>\n        </Row>\n        <Row justify=\"space-between\">\n          <Col>Thời gian thực hiện</Col>\n          <Col>{`${dayjs(report?.startTime).format('DD/MM/YYYY')} - ${dayjs(report?.endTime).format('DD/MM/YYYY')}`}</Col>\n        </Row>\n        <Row justify=\"space-between\">\n          <Col>Thực tế</Col>\n          <Col>{report?.actualKPI}</Col>\n        </Row>\n        <Row justify=\"space-between\">\n          <Col>Điểm thực tế</Col>\n          <Col>{report?.actualPoint}</Col>\n        </Row>\n        <Row justify=\"space-between\">\n          <Col>Trạng thái</Col>\n          <Col>{report?.goalStatus?.name}</Col>\n        </Row>\n        <Row justify=\"end\">\n          <Space css={reportFooter}>\n            <Button onClick={oncancel}>Chia sẻ</Button>\n            <Button type=\"primary\" onClick={oncancel}>\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </div>\n    </div>\n  );\n};\n\nconst rootStyle = css`\n  padding: 1rem;\n`;\n\nconst contentStyle = css`\n  display: flex;\n  flex-direction: column;\n  gap: 1.4rem;\n  font-weight: 500;\n`;\n\nconst reportFooter = css`\n  margin-top: 1rem;\n`;\n\nconst titleStyle = css`\n  font-size: 2rem;\n  line-height: 2.2rem;\n  text-align: center;\n  margin-bottom: 2rem;\n  font-weight: 500;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { Status } from '@/modules/sales/enum/status.enum';\nimport { useKPI } from '@/modules/sales/services/kpi.service';\nimport { css } from '@emotion/react';\nimport { Button, Col, Form, FormProps, Input, Row, Space } from 'antd';\nimport { Fragment, useEffect } from 'react';\n\ntype FieldType = {\n  objectiveProposer: string;\n  criteria: string;\n  targetKPI: string;\n  targetPoint: number;\n  calculate: string;\n};\n\ntype ModifyKPIProps = {\n  closeModal: () => void;\n  data: DataKPIType;\n};\n\nexport const ModifyKPI = ({ closeModal, data }: ModifyKPIProps) => {\n  const { updateStatusKPI } = useKPI();\n  const [form] = Form.useForm();\n  const [loading] = useWatchLoading(['edit-status', false]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const { targetKPI, targetPoint, calculate, criteria } = values;\n    const dataUpdateKPI = {\n      id: data.id,\n      targetKPI: targetKPI.toString(),\n      targetPoint: targetPoint.toString(),\n      criteria,\n      calculate,\n      startTime: data.startTime,\n      endTime: data.endTime,\n      applicationUserId: data.userSuggest?.id,\n      status: Status.Updated,\n    } as DataKPIType;\n\n    const editStatus = await updateStatusKPI(dataUpdateKPI);\n    if (editStatus) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      objectiveProposer: `${data.userSuggest?.firstName} ${data.userSuggest?.lastName}`,\n      ...data,\n    });\n  }, [data]);\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Điều chỉnh mục tiêu</h3>\n      <Form form={form} css={formStyle} name=\"edit-kpi\" onFinish={onFinish} layout=\"vertical\">\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Người đề xuất mục tiêu</span>}\n          name=\"objectiveProposer\"\n        >\n          <Input size=\"large\" disabled allowClear />\n        </Form.Item>\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Tiêu chí</span>}\n          name=\"criteria\"\n          rules={[{ required: true, message: 'Vui lòng nhập tiêu chí!' }]}\n        >\n          <Input.TextArea placeholder=\"Nhập tiêu chí\" allowClear />\n        </Form.Item>\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Mục tiêu</span>}\n              name=\"targetKPI\"\n              rules={[{ required: true, message: 'Vui lòng nhập mục tiêu!' }]}\n            >\n              <Input size=\"large\" placeholder=\"Nhập mục tiêu\" allowClear />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Điểm mục tiêu</span>}\n              name=\"targetPoint\"\n              rules={[{ required: true, message: 'Vui lòng nhập điểm mục tiêu!' }]}\n            >\n              <Input size=\"large\" placeholder=\"Nhập điểm mục tiêu\" allowClear />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Cách tính</span>}\n          name=\"calculate\"\n          rules={[{ required: true, message: 'Vui lòng nhập cách tính!' }]}\n        >\n          <Input size=\"large\" placeholder=\"Nhập cách tính\" allowClear />\n        </Form.Item>\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n`;\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useKPI } from '@/modules/sales/services/kpi.service';\nimport { css } from '@emotion/react';\nimport { Button, Col, DatePicker, Form, FormProps, Input, InputNumber, Row, Space } from 'antd';\nimport dayjs from 'dayjs';\nimport { Fragment } from 'react';\n\ntype FieldType = {\n  criteria: string;\n  targetKPI: number;\n  targetPoint: number;\n  startTime: string;\n  endTime: string;\n  calculate: string;\n};\n\ntype AddKPIProps = {\n  closeModal: () => void;\n};\n\nexport const AddKPI = ({ closeModal }: AddKPIProps) => {\n  const { addKPI } = useKPI();\n  const [form] = Form.useForm();\n  const [loading] = useWatchLoading(['add-kpi', false]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const dataAddKPI = {\n      ...values,\n      targetKPI: values.targetKPI.toString(),\n      targetPoint: values.targetPoint.toString(),\n      startTime: dayjs(values.startTime).format('DD/MM/YYYY'),\n      endTime: dayjs(values.endTime).format('DD/MM/YYYY'),\n    };\n    const add = await addKPI(dataAddKPI);\n    if (add) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Thêm đề xuất mục tiêu</h3>\n      <Form form={form} css={formEditKPIStyle} name=\"add-kpi\" onFinish={onFinish} layout=\"vertical\">\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Tiêu chí</span>}\n          name=\"criteria\"\n          rules={[{ required: true, message: 'Vui lòng nhập tiêu chí!' }]}\n        >\n          <Input.TextArea placeholder=\"Nhập tiêu chí\" allowClear />\n        </Form.Item>\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Mục tiêu</span>}\n              name=\"targetKPI\"\n              rules={[{ required: true, message: 'Vui lòng nhập mục tiêu!' }]}\n            >\n              <InputNumber css={inputStyle} size=\"middle\" placeholder=\"Nhập mục tiêu\" />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Điểm mục tiêu</span>}\n              name=\"targetPoint\"\n              rules={[{ required: true, message: 'Vui lòng nhập điểm mục tiêu!' }]}\n            >\n              <InputNumber css={inputStyle} size=\"middle\" placeholder=\"Nhập điểm mục tiêu\" />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Ngày bắt đầu mục tiêu</span>}\n              name=\"startTime\"\n              rules={[{ required: true, message: 'Vui lòng nhập ngày bắt đầu mục tiêu!' }]}\n            >\n              <DatePicker\n                css={inputStyle}\n                format={['DD/MM/YYYY']}\n                placeholder=\"Nhập ngày bắt đầu mục tiêu\"\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>Thời gian kết thúc</span>}\n              name=\"endTime\"\n              rules={[{ required: true, message: 'Vui lòng nhập thời gian kết thúc!' }]}\n            >\n              <DatePicker\n                css={inputStyle}\n                format={['DD/MM/YYYY']}\n                placeholder=\"Nhập thời gian kết thúc\"\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Cách tính</span>}\n          name=\"calculate\"\n          rules={[{ required: true, message: 'Vui lòng nhập cách tính!' }]}\n        >\n          <Input.TextArea placeholder=\"Nhập cách tính\" allowClear />\n        </Form.Item>\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formEditKPIStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem;\n`;\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n`;\n\nconst inputStyle = css`\n  width: 100%;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { Pagination } from '@/constants/pagination';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { useKPI } from '@/modules/sales/services/kpi.service';\nimport { css } from '@emotion/react';\nimport { Button, Row, Space } from 'antd';\nimport { useLocation } from 'react-router-dom';\n\ntype DeleteKPIProps = {\n  closeModal: () => void;\n  goalIds: string[];\n  data?: DataKPIType;\n};\nexport const DeleteKPI = ({ closeModal, goalIds }: DeleteKPIProps) => {\n  const { deleteKPI, getAllKPI } = useKPI();\n  const pageIndex = useRootSelector((state) => state.sale.kpi.pagination?.pageIndex) ?? 0;\n  const [loading] = useWatchLoading(['delete-kpi', false]);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const tab = searchParams.get('tab');\n\n  const handleDeleteKPI = async () => {\n    const deleteGoal = await deleteKPI(goalIds);\n    if (deleteGoal) {\n      if (goalIds.length === Pagination.PAGESIZE) {\n        getAllKPI({ pageIndex: pageIndex - 1 || 1, pageSize: Pagination.PAGESIZE, roleType: tab! });\n      }\n      closeModal();\n    }\n  };\n  return (\n    <div css={rootStyle}>\n      <h3 css={titleStyle}>Đồng ý xoá các mục tiêu đã chọn?</h3>\n      <Row justify=\"center\">\n        <Space>\n          <Button onClick={() => closeModal()}>Huỷ</Button>\n          <Button loading={loading} type=\"primary\" danger onClick={handleDeleteKPI}>\n            Xoá\n          </Button>\n        </Space>\n      </Row>\n    </div>\n  );\n};\n\nconst rootStyle = css`\n  margin-top: 2rem;\n  padding: 0 2rem;\n`;\n\nconst titleStyle = css`\n  font-size: 1.8rem;\n  line-height: 2rem;\n  text-align: center;\n  margin-bottom: 2.4rem;\n  font-weight: 500;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useKPI } from '@/modules/sales/services/kpi.service';\nimport { css } from '@emotion/react';\nimport { Button, Form, FormProps, Input, InputNumber, Row, Space } from 'antd';\nimport { Fragment, useEffect } from 'react';\n\ntype FieldType = {\n  actualKPI: string;\n  actualPoint: number;\n};\n\ntype UpdateRequestProps = {\n  closeModal: () => void;\n  data: DataKPIType;\n};\n\nexport const UpdateRequest = ({ closeModal, data }: UpdateRequestProps) => {\n  const { updateKPI } = useKPI();\n  const [form] = Form.useForm();\n  const [loading] = useWatchLoading(['edit-status', false]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const { actualKPI, actualPoint } = values;\n    const dataUpdateKPI = {\n      id: data.id,\n      actualKPI: actualKPI.toString(),\n      actualPoint: actualPoint.toString(),\n    } as DataKPIType;\n\n    const update = await updateKPI(dataUpdateKPI);\n    if (update) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n\n  useEffect(() => {\n    form.setFieldsValue(data);\n  }, [data]);\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Cập nhất kết quả</h3>\n      <Form form={form} css={formStyle} name=\"edit-kpi\" onFinish={onFinish} layout=\"vertical\">\n        <Form.Item label={<span css={labelFormItem}>Họ tên</span>}>\n          <Input\n            value={`${data.userSuggest?.firstName} ${data.userSuggest?.lastName}`}\n            size=\"large\"\n            disabled\n            allowClear\n          />\n        </Form.Item>\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Thực tế</span>}\n          name=\"actualKPI\"\n          rules={[{ required: true, message: 'Vui lòng nhập mục tiêu!' }]}\n        >\n          <InputNumber css={inputStyle} size=\"large\" placeholder=\"Nhập mục tiêu thực tế\" />\n        </Form.Item>\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Mục tiêu</span>}\n          name=\"actualPoint\"\n          rules={[{ required: true, message: 'Vui lòng nhập mục tiêu!' }]}\n        >\n          <InputNumber size=\"large\" css={inputStyle} placeholder=\"Nhập điểm thực tế\" />\n        </Form.Item>\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n`;\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n`;\n\nconst inputStyle = css`\n  width: 100%;\n`;\n","import { Modal } from 'antd';\nimport { ReactNode, createContext, useContext, useState } from 'react';\nimport { EditKPI } from './edit-kpi.modal';\nimport { FinalizeKPI } from './finalize-kpi.modal';\nimport { RequestEdit } from './request-edit-kpi.modal';\nimport { Report } from './report-kpi.modal';\nimport { ModifyKPI } from './modify-kpi.modal';\nimport { AddKPI } from './add-kpi.modal';\nimport { DeleteKPI } from './delete-kpi.modal';\nimport { UpdateRequest } from './update-request-kpi';\nimport { ModalKPIType } from '@/modules/sales/enum/modal.enum';\n\ntype ModalContextType = {\n  openModal: (modalName: string, data?: DataKPIType, goalIds?: string[]) => void;\n  closeModal: () => void;\n};\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\n\nexport const useModalKPI = () => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error('useModal must be used within a ModalProvider');\n  }\n  return context;\n};\n\ntype ModalProviderProps = {\n  children?: ReactNode;\n};\n\nexport const ModalProvider = ({ children }: ModalProviderProps) => {\n  const [currentModal, setCurrentModal] = useState<\n    { modalName: string; data?: DataKPIType; goalIds?: string[] } | undefined\n  >();\n  const [open, setOpen] = useState<boolean>(false);\n\n  const openModal = (modalName: string, data?: DataKPIType, goalIds?: string[]) => {\n    setCurrentModal({ modalName, data, goalIds });\n    setOpen(true);\n  };\n\n  const closeModal = () => {\n    setCurrentModal(undefined);\n    setOpen(false);\n  };\n\n  return (\n    <ModalContext.Provider value={{ openModal, closeModal }}>\n      {children}\n      <Modal\n        width={\n          currentModal?.modalName === ModalKPIType.FinalizeKPI ||\n          currentModal?.modalName === ModalKPIType.DeleteKPI\n            ? '38rem'\n            : currentModal?.modalName === ModalKPIType.RequestEdit\n              ? '68rem'\n              : '54rem'\n        }\n        open={open}\n        onCancel={closeModal}\n        footer={null}\n      >\n        {currentModal?.modalName === ModalKPIType.EditKPI && (\n          <EditKPI closeModal={closeModal} data={currentModal.data!} />\n        )}\n        {currentModal?.modalName === ModalKPIType.AddKPI && <AddKPI closeModal={closeModal} />}\n        {currentModal?.modalName === ModalKPIType.FinalizeKPI && (\n          <FinalizeKPI closeModal={closeModal} data={currentModal.data!} />\n        )}\n        {currentModal?.modalName === ModalKPIType.RequestEdit && (\n          <RequestEdit closeModal={closeModal} data={currentModal.data!} />\n        )}\n        {currentModal?.modalName === ModalKPIType.Report && (\n          <Report closeModal={closeModal} data={currentModal.data!} />\n        )}\n        {currentModal?.modalName === ModalKPIType.ModifyKPI && (\n          <ModifyKPI closeModal={closeModal} data={currentModal.data!} />\n        )}\n        {currentModal?.modalName === ModalKPIType.DeleteKPI && (\n          <DeleteKPI\n            closeModal={closeModal}\n            goalIds={currentModal.goalIds!}\n            data={currentModal.data!}\n          />\n        )}\n        {currentModal?.modalName === ModalKPIType.UpdateRequest && (\n          <UpdateRequest closeModal={closeModal} data={currentModal.data!} />\n        )}\n      </Modal>\n    </ModalContext.Provider>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Dropdown } from 'antd';\nimport type { MenuProps } from 'antd';\nimport { CustomIcon } from '@/components/icons';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { useModalKPI } from '../modals/kpi';\nimport { usePermission } from '@/hooks/permission.hook';\nimport { useQuery } from '@/hooks/query.hook';\nimport { RoleType } from '@/enum/role.enum';\nimport { useMemo } from 'react';\nimport { Status } from '../../enum/status.enum';\nimport { ModalKPIType } from '../../enum/modal.enum';\n\nenum MenuItem {\n  EditKPI = 1,\n  ModifyKPI,\n  RequestEdit,\n  FinalizeKPI,\n  ReviewEdit,\n  Report,\n  UpdateRequest,\n}\ntype KPIDropdownProps = {\n  data?: DataKPIType;\n};\n\nexport function KPIDropdown({ data }: KPIDropdownProps) {\n  const { openModal } = useModalKPI();\n  const { formatMessage } = useLocale();\n  const { isSale, isAdmin, isSaleDirector } = usePermission();\n  const { tab } = useQuery();\n\n  const handleItemClick = (key: number) => {\n    switch (key) {\n      case MenuItem.EditKPI:\n        openModal(ModalKPIType.EditKPI, data);\n        break;\n      case MenuItem.FinalizeKPI:\n        openModal(ModalKPIType.FinalizeKPI, data);\n        break;\n      case MenuItem.RequestEdit:\n        openModal(ModalKPIType.RequestEdit, data);\n        break;\n      case MenuItem.Report:\n        openModal(ModalKPIType.Report, data);\n        break;\n      case MenuItem.ModifyKPI:\n        openModal(ModalKPIType.ModifyKPI, data);\n        break;\n      default:\n      case MenuItem.UpdateRequest:\n        openModal(ModalKPIType.UpdateRequest, data);\n        break;\n    }\n  };\n\n  const items: MenuProps['items'] = useMemo(() => {\n    if (isSaleDirector) {\n      return tab === RoleType.MySelf\n        ? [\n            {\n              key: MenuItem.EditKPI,\n              label: formatMessage({ id: 'title.dropdown.kpi.editKPI' }),\n              onClick: () => handleItemClick(MenuItem.EditKPI),\n            },\n            {\n              key: MenuItem.Report,\n              label: formatMessage({ id: 'title.dropdown.kpi.report' }),\n              onClick: () => handleItemClick(MenuItem.Report),\n            },\n          ]\n        : data?.goalStatus?.code === Status.Pending\n          ? [\n              {\n                key: MenuItem.FinalizeKPI,\n                label: formatMessage({ id: 'title.dropdown.finalize' }),\n                onClick: () => handleItemClick(MenuItem.FinalizeKPI),\n              },\n              {\n                key: MenuItem.RequestEdit,\n                label: isSaleDirector\n                  ? 'Xem đề xuất chỉnh sửa'\n                  : formatMessage({ id: 'title.dropdown.requestEdit' }),\n                onClick: () => handleItemClick(MenuItem.RequestEdit),\n              },\n              {\n                key: MenuItem.ModifyKPI,\n                label: formatMessage({ id: 'title.dropdown.kpi.modifyKPI' }),\n                onClick: () => handleItemClick(MenuItem.ModifyKPI),\n              },\n              {\n                key: MenuItem.Report,\n                label: formatMessage({ id: 'title.dropdown.kpi.report' }),\n                onClick: () => handleItemClick(MenuItem.Report),\n              },\n            ]\n          : data?.goalStatus?.code === Status.Request\n            ? [\n                {\n                  key: MenuItem.RequestEdit,\n                  label: isSaleDirector\n                    ? 'Xem đề xuất chỉnh sửa'\n                    : formatMessage({ id: 'title.dropdown.requestEdit' }),\n                  onClick: () => handleItemClick(MenuItem.RequestEdit),\n                },\n                {\n                  key: MenuItem.ModifyKPI,\n                  label: formatMessage({ id: 'title.dropdown.kpi.modifyKPI' }),\n                  onClick: () => handleItemClick(MenuItem.ModifyKPI),\n                },\n                {\n                  key: MenuItem.Report,\n                  label: formatMessage({ id: 'title.dropdown.kpi.report' }),\n                  onClick: () => handleItemClick(MenuItem.Report),\n                },\n              ]\n            : [\n                {\n                  key: MenuItem.ModifyKPI,\n                  label: formatMessage({ id: 'title.dropdown.kpi.modifyKPI' }),\n                  onClick: () => handleItemClick(MenuItem.ModifyKPI),\n                },\n                {\n                  key: MenuItem.Report,\n                  label: formatMessage({ id: 'title.dropdown.kpi.report' }),\n                  onClick: () => handleItemClick(MenuItem.Report),\n                },\n              ];\n    }\n\n    if (isSale) {\n      return data?.goalStatus?.code === Status.Updated\n        ? [\n            {\n              key: MenuItem.FinalizeKPI,\n              label: formatMessage({ id: 'title.dropdown.finalize' }),\n              onClick: () => handleItemClick(MenuItem.FinalizeKPI),\n            },\n            {\n              key: MenuItem.EditKPI,\n              label: formatMessage({ id: 'title.dropdown.kpi.editKPI' }),\n              onClick: () => handleItemClick(MenuItem.EditKPI),\n            },\n            {\n              key: MenuItem.Report,\n              label: formatMessage({ id: 'title.dropdown.kpi.report' }),\n              onClick: () => handleItemClick(MenuItem.Report),\n            },\n          ]\n        : [\n            {\n              key: MenuItem.RequestEdit,\n              label: isSaleDirector\n                ? 'Xem đề xuất chỉnh sửa'\n                : formatMessage({ id: 'title.dropdown.requestEdit' }),\n              onClick: () => handleItemClick(MenuItem.RequestEdit),\n            },\n            {\n              key: MenuItem.EditKPI,\n              label: formatMessage({ id: 'title.dropdown.kpi.editKPI' }),\n              onClick: () => handleItemClick(MenuItem.EditKPI),\n            },\n            {\n              key: MenuItem.Report,\n              label: formatMessage({ id: 'title.dropdown.kpi.report' }),\n              onClick: () => handleItemClick(MenuItem.Report),\n            },\n          ];\n    }\n    if (isAdmin) {\n      return [\n        {\n          key: MenuItem.UpdateRequest,\n          label: formatMessage({ id: 'title.dropdown.updateResult' }),\n          onClick: () => handleItemClick(MenuItem.UpdateRequest),\n        },\n      ];\n    }\n    return [];\n  }, [isSaleDirector, tab, data, formatMessage]);\n\n  return (\n    <Dropdown\n      menu={{\n        items,\n      }}\n      placement=\"bottomRight\"\n    >\n      <span css={dropdownIcon}>\n        <CustomIcon type=\"three-dot\" width={16} height={18} />\n      </span>\n    </Dropdown>\n  );\n}\n\nconst dropdownIcon = css`\n  cursor: pointer;\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n","import { TableProps } from 'antd';\nimport { LocaleFormatter } from '@/components/locale-formatter';\nimport { KPIDropdown } from '@/modules/sales/components/dropdown/kpi.dropdown';\nimport dayjs from 'dayjs';\nimport { Message } from '@/components/message';\nimport { Status } from '@/modules/sales/enum/status.enum';\n\ntype ColumnsType<T> = TableProps<T>['columns'];\n\nconst columns: ColumnsType<DataKPIType> = [\n  {\n    title: <LocaleFormatter id=\"table.column.kpi.proposer\" />,\n    dataIndex: ['userSuggest'],\n    render: (user: UserSuggest) => `${user.firstName} ${user.lastName}`,\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.kpi.criteria\" />,\n    dataIndex: 'criteria',\n    render: (criteria) => criteria,\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.kpi.objective\" />,\n    dataIndex: 'targetKPI',\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.kpi.reality\" />,\n    dataIndex: 'actualKPI',\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.targetPoint\" />,\n    dataIndex: 'targetPoint',\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.kpi.implementationTime\" />,\n    dataIndex: 'implementationTime',\n    render: (__, record) => {\n      return `${dayjs(record.startTime).format('DD/MM/YYYY')} đến ${dayjs(record.endTime).format('DD/MM/YYYY')} `;\n    },\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.kpi.calculationMethod\" />,\n    dataIndex: 'calculate',\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.kpi.actualPoint\" />,\n    dataIndex: 'actualPoint',\n  },\n  {\n    title: 'Trạng thái',\n    align: 'center',\n    dataIndex: ['goalStatus', 'name'],\n    render: (__, record) => {\n      let messageType: MessageType;\n      switch (record.goalStatus?.code) {\n        case Status.Completed:\n        case Status.Updated:\n          messageType = 'success';\n          break;\n        case Status.Request:\n        case Status.Processing:\n          messageType = 'info';\n          break;\n        case Status.Failed:\n          messageType = 'error';\n          break;\n        default:\n          messageType = 'warning';\n      }\n      return record.goalStatus ? (\n        <Message hasBackground type={messageType}>\n          {record.goalStatus.name!}\n        </Message>\n      ) : (\n        ''\n      );\n    },\n  },\n  {\n    title: '',\n    fixed: 'right',\n    width: '6%',\n    render: (__, record) => <KPIDropdown data={record} />,\n  },\n];\n\nexport default columns;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect, useMemo, useState } from 'react';\nimport { TableCustom } from '@/components/table';\nimport columns from './columns';\nimport { Search, SearchParams } from '@/components/search';\nimport { Button, Col, Row } from 'antd';\nimport { useModalKPI } from '../../components/modals/kpi';\nimport { CustomIcon } from '@/components/icons';\nimport { useKPI } from '../../services/kpi.service';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { Pagination } from '@/constants/pagination';\nimport { Key } from 'antd/es/table/interface';\nimport { usePermission } from '@/hooks/permission.hook';\nimport { RoleType } from '@/enum/role.enum';\nimport { useQuery } from '@/hooks/query.hook';\nimport { ModalKPIType } from '../../enum/modal.enum';\n\nexport default function TableKPI() {\n  const { openModal } = useModalKPI();\n  const { getAllKPI, getAllStatusKPI } = useKPI();\n  const [loading, loadingStatus] = useWatchLoading(['get-kpi', true], ['status-kpi', true]);\n\n  const { data, pagination, status, totalExtend } = useRootSelector((state) => state.sale.kpi);\n  const { isSaleDirector, isSale } = usePermission();\n  const [goalIds, setGoalIds] = useState<string[]>();\n  const { tab, textSearch, time, statusId } = useQuery();\n\n  const columnTable = useMemo(() => {\n    if (isSaleDirector && tab === RoleType.MySelf) {\n      return columns?.slice(1);\n    }\n    return columns;\n  }, [tab, isSaleDirector]);\n\n  const rowSelection = {\n    onChange: (_selectedRowKeys: Key[], selectedRows: DataKPIType[]) => {\n      setGoalIds(selectedRows.map((row) => row.id!));\n    },\n  };\n\n  const handleSearch = ({ textSearch, statusId, time }: SearchParams) => {\n    getAllKPI({\n      pageIndex: pagination?.pageIndex ?? Pagination.PAGEINDEX,\n      pageSize: Pagination.PAGESIZE,\n      textSearch,\n      statusId,\n      time,\n      roleType: tab!,\n    });\n  };\n\n  const handleTableChange = (page: number) => {\n    getAllKPI({\n      pageIndex: page,\n      pageSize: Pagination.PAGESIZE,\n      roleType: tab!,\n      textSearch: textSearch ? decodeURI(textSearch).replace(/\\+/g, ' ') : undefined,\n      time,\n      statusId,\n    });\n  };\n\n  useEffect(() => {\n    getAllKPI({\n      pageIndex: Pagination.PAGEINDEX,\n      pageSize: Pagination.PAGESIZE,\n      roleType: tab!,\n    });\n    getAllStatusKPI();\n  }, [getAllKPI, getAllStatusKPI, tab]);\n\n  const addKPIBtnStyle = isSale ? addKPIBtnStyleSale : addKPIBtnStyleBase;\n  return (\n    <div css={rootStyle}>\n      {(isSaleDirector || isSale) && tab !== RoleType.Employee && (\n        <Button\n          onClick={() => openModal(ModalKPIType.AddKPI)}\n          type=\"primary\"\n          css={addKPIBtnStyle}\n          iconPosition=\"start\"\n          size=\"large\"\n        >\n          <CustomIcon color=\"#fff\" width={16} height={16} type=\"circle-plus\" />\n          <span>Thêm mục tiêu</span>\n        </Button>\n      )}\n\n      <div css={searchContainer}>\n        <Search onSearch={handleSearch} status={status as any} loadingStatus={loadingStatus} />\n      </div>\n      <Row css={rowHeaderStyle} justify=\"space-between\" align=\"bottom\">\n        <Col>\n          <Button\n            disabled={!goalIds}\n            onClick={() => openModal(ModalKPIType.DeleteKPI, undefined, goalIds)}\n            size=\"middle\"\n            danger\n          >\n            Xoá mục tiêu đã chọn\n          </Button>\n        </Col>\n        <Col>Tổng điểm đạt được: {totalExtend ?? 0}</Col>\n      </Row>\n      <TableCustom\n        rowSelection={rowSelection}\n        columns={columnTable}\n        dataSource={data}\n        loading={loading}\n        rowKey={(record) => record.id}\n        onTableChange={(page) => handleTableChange(page)}\n        pagination={{\n          current: pagination?.pageIndex,\n          pageSize: Pagination.PAGESIZE,\n          total: pagination?.totalRecords,\n          position: ['bottomCenter'],\n        }}\n        scroll={{ x: 1450 }}\n      />\n    </div>\n  );\n}\n\nconst rootStyle = css`\n  position: relative;\n`;\n\nconst addKPIBtnStyleBase = css`\n  position: absolute;\n  right: 0;\n  top: -9rem;\n  background: #0070b8;\n  display: flex;\n  align-items: center;\n  gap: 0.2rem;\n  &:hover {\n    background: #0070b8 !important;\n    opacity: 0.9;\n  }\n`;\n\nconst addKPIBtnStyleSale = css`\n  ${addKPIBtnStyleBase}\n  top: -5rem;\n`;\n\nconst rowHeaderStyle = css`\n  margin: 2.4rem 0 1.4rem 0;\n`;\n\nconst searchContainer = css`\n  margin-top: 2.6rem;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setBreadcrumbItemsAction } from '@/redux/slicers/breadcrumb.slice';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { CustomIcon } from '@/components/icons';\nimport { Tabs, TabsProps } from 'antd';\nimport TableKPI from './table-kpi';\nimport { ModalProvider } from '../../components/modals/kpi';\nimport { usePermission } from '@/hooks/permission.hook';\nimport { useNavigate } from 'react-router-dom';\nimport { useQuery } from '@/hooks/query.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { getTenant } from '@/utils/common';\nimport { RoleType } from '@/enum/role.enum';\n\nexport default function KPIPage() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { formatMessage } = useLocale();\n  const { isAdmin, isSaleDirector } = usePermission();\n  const tenant = getTenant();\n  const totalRecords = useRootSelector((state) => state.sale.kpi.pagination?.totalRecords);\n  const { tab: activeKey } = useQuery();\n\n  const items: TabsProps['items'] = [\n    {\n      key: isAdmin ? RoleType.Manager : RoleType.MySelf,\n      label: isAdmin\n        ? formatMessage({ id: 'title.tab.kpi.manager' })\n        : formatMessage({ id: 'title.tab.kpi.my' }),\n      children: <TableKPI />,\n    },\n    {\n      key: RoleType.Employee,\n      label: formatMessage({ id: 'title.tab.kpi.employee' }),\n      children: <TableKPI />,\n    },\n  ];\n\n  const onChange = (key: string) => {\n    navigate(`?tab=${key}&tenant=${tenant}`);\n  };\n\n  useEffect(() => {\n    if (!activeKey) {\n      navigate(`?tab=${isAdmin ? RoleType.Manager : RoleType.MySelf}&tenant=${tenant}`);\n    }\n  }, [activeKey]);\n\n  useEffect(() => {\n    const breadCrumbItems = [\n      {\n        title: {\n          vi_VN: 'Sale',\n          en_US: 'Sale',\n        },\n      },\n      {\n        title: {\n          vi_VN: 'KPI',\n          en_US: 'KPI',\n        },\n      },\n    ];\n    dispatch(setBreadcrumbItemsAction(breadCrumbItems));\n  }, [dispatch]);\n\n  return (\n    <ModalProvider>\n      <h3 css={titleStyle}>{formatMessage({ id: 'title.document.kpi' })}</h3>\n      <div css={subTitleStyle}>\n        <span>{formatMessage({ id: 'title.document.kpi' })}</span>\n        <CustomIcon width={8} height={8} type=\"dot\" />\n        <span>\n          {totalRecords} {formatMessage({ id: 'title.document.kpi' })}\n        </span>\n      </div>\n      {(isAdmin || isSaleDirector) && (\n        <Tabs activeKey={activeKey} items={items} onChange={onChange} />\n      )}\n      {!(isAdmin || isSaleDirector) && <TableKPI />}\n    </ModalProvider>\n  );\n}\n\nconst subTitleStyle = css`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  font-size: 1.4rem;\n`;\nconst titleStyle = css`\n  font-size: 1.8rem;\n  line-height: 2.3rem;\n  font-weight: 600;\n`;\n"],"names":["useKPI","api","useApi","caller","useCaller","dispatch","useDispatch","tenant","getTenant","user","useRootSelector","state","auth","getAllKPI","useCallback","pageIndex","Pagination","PAGEINDEX","pageSize","PAGESIZE","textSearch","statusId","time","dayjs","year","toString","roleType","queryParams","PageIndex","PageSize","UserId","id","RoleId","applicationRoles","StatusId","Time","TextSearch","urlParams","generateUrlParams","data","succeeded","post","loadingKey","items","totalRecords","totalPages","totalExtend","setListKPIAction","pagination","addKPI","values","dataAddKPI","convertToUppercaseFirstLetter","userSuggestId","addKPIAction","updateKPI","rest","updateKPIAction","deleteKPI","goalIds","deleteIds","join","del","deleteKPIAction","updateStatusKPI","dataUpdateStatusKPI","put","refuseEditKPI","applicationUserId","userSuggest","status","Status","Updated","showReport","get","setDataReportAction","getAllStatusKPI","setDataStatusAction","targetKPI","targetPoint","onFinish","edit","form","dataUpdateKPI","useEffect","oncancel","Fragment","jsx","formTitleStyle","jsxs","Form","process","_EMOTION_STRINGIFIED_CSS_ERROR__","message","Input","closeModal","loading","useWatchLoading","isSale","isSaleDirector","handleFinalizeKPI","usePermission","Processing","disableBtn","_a","_b","code","rootStyle","titleStyle","Space","Button","NODE_ENV","suggestEndTime","suggestTargetKPI","suggestTargetPoint","Request","editStatus","refuseEdit","setFieldsValue","required","labelFormItem","inputStyle","Report","report","contentStyle","Row","Col","goalStatus","_c","reportFooter","calculate","criteria","startTime","endTime","objectiveProposer","formStyle","env","DatePicker","add","formEditKPIStyle","DeleteKPI","location","useLocation","searchParams","deleteGoal","length","actualKPI","actualPoint","InputNumber","ModalContext","createContext","context","ModalProvider","children","currentModal","setCurrentModal","useState","setOpen","modalName","openModal","ModalKPIType","FinalizeKPI","MenuItem","formatMessage","isAdmin","handleItemClick","tab","useMemo","RoleType","key","onClick","label","dropdownIcon","CustomIcon","columns","title","LocaleFormatter","dataIndex","render","firstName","lastName","__","record","format","align","messageType","Completed","Failed","Message","name","fixed","width","KPIDropdown","TableKPI","loadingStatus","columnTable","handleSearch","useQuery","handleTableChange","page","onChange","setGoalIds","addKPIBtnStyleBase","addKPIBtnStyle","current","total","position","Search","TableCustom","rowSelection","addKPIBtnStyleSale","rowHeaderStyle","KPIPage","navigate","useNavigate","activeKey","Manager","Employee","setBreadcrumbItemsAction","vi_VN","subTitleStyle","Tabs"],"mappings":"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"}