{"version":3,"file":"index-CwinAcH6.js","sources":["../../src/modules/category/enum/service-category.enum.ts","../../src/modules/category/services/service-category.service.ts","../../src/modules/category/components/modals/service-category/add-service.modal.tsx","../../src/modules/category/components/modals/service-category/delete-service.modal.tsx","../../src/modules/category/components/modals/service-category/update-service.modal.tsx","../../src/modules/category/components/modals/service-category/index.tsx","../../src/modules/category/components/dropdown/service.dropdown.tsx","../../src/modules/category/pages/service-category/column/service.column.tsx","../../src/modules/category/pages/service-category/table-service.tsx","../../src/modules/category/pages/service-category/index.tsx"],"sourcesContent":["export enum ModalServiceType {\n  EditService = 'Edit Service',\n  DeleteService = 'Delete Service',\n  AddService = 'Add Service',\n}\n","import { useApi, useCaller } from '@/hooks/api.hook';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  setListServiceAction,\n  deleteServiceAction,\n  addServiceAction,\n  updateServiceAction,\n} from '../reducers/slicers/service.slice';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { convertToUppercaseFirstLetter } from '@/utils/get-pathCode';\nimport { Pagination } from '@/constants/pagination';\nimport { generateUrlParams, getTenant } from '@/utils/common';\nimport dayjs from 'dayjs';\n\ntype FilterKPIType = {\n  pageIndex: number;\n  pageSize: number;\n  textSearch?: string;\n  statusId?: string;\n  time?: string;\n  roleType: string;\n};\n\nexport const useService = () => {\n  const api = useApi('');\n  const caller = useCaller();\n  const dispatch = useDispatch();\n  const tenant = getTenant();\n  const user = useRootSelector((state) => state.auth.user);\n\n  const getAllService = useCallback(\n    async ({\n      pageIndex = Pagination.PAGEINDEX,\n      pageSize = Pagination.PAGESIZE,\n      textSearch,\n      statusId,\n      time = dayjs().year().toString(),\n      roleType,\n    }: FilterKPIType) => {\n      const queryParams: { [key: string]: string | undefined } = {\n        PageIndex: pageIndex.toString(),\n        PageSize: pageSize.toString(),\n        UserId: user?.id,\n        RoleId: user?.applicationRoles[0].id,\n        StatusId: statusId,\n        Time: `1-1-${time}`, // value is first day Of year\n        TextSearch: textSearch,\n        tenant: tenant,\n        roleType,\n      };\n\n      const urlParams = generateUrlParams(queryParams);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/Service/get-list-with-pagination?${urlParams}`),\n        {\n          loadingKey: 'get-service',\n        },\n      );\n      if (succeeded) {\n        const { items, totalRecords, pageIndex, totalPages, totalExtend } = data;\n        dispatch(\n          setListServiceAction({\n            data: items,\n            pagination: {\n              pageIndex,\n              totalRecords,\n              totalPages,\n            },\n            totalExtend,\n          }),\n        );\n      }\n    },\n    [caller, api],\n  );\n\n  const addKService = useCallback(\n    async (values: DataServiceCategoryType) => {\n      const dataAddService = convertToUppercaseFirstLetter({ ...values });\n\n      console.log('Payload for API: ', [{ data: dataAddService }]);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/Service/add-or-update?tenant=${tenant}`, [{ data: dataAddService }]),\n        { loadingKey: 'add-service' },\n      );\n\n      if (succeeded) {\n        dispatch(addServiceAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const deleteService = useCallback(\n    async (serviceIds: string[]) => {\n      const ids = serviceIds.join(',');\n      const ApplicationUserId = `${user?.id}?tenant=${tenant}`;\n      const { succeeded } = await caller(\n        () => api.del(`/Service/delete-by-ids/${ids}/${ApplicationUserId}`),\n        { loadingKey: 'delete-service' },\n      );\n\n      if (succeeded !== null && succeeded) {\n        dispatch(deleteServiceAction(serviceIds));\n        return true;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const updateService = useCallback(\n    async (values: DataServiceCategoryType) => {\n      const dataUpdateService = convertToUppercaseFirstLetter({ ...values });\n\n      const { data, succeeded } = await caller(\n        () =>\n          api.post(`/Service/add-or-update?tenant=${tenant}`, [\n            { id: values.id, data: dataUpdateService },\n          ]),\n        { loadingKey: 'edit-service' },\n      );\n\n      if (succeeded) {\n        dispatch(updateServiceAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  return { getAllService, deleteService, addKService, updateService };\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Fragment } from 'react';\nimport { Button, Form, FormProps, Input, Row, Space } from 'antd';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useService } from '@/modules/category/services/service-category.service';\n\ntype FieldType = {\n  code: string;\n  name: string;\n  shortName: string;\n};\n\ntype AddServiceProps = {\n  closeModal: () => void;\n};\n\nexport const AddService = ({ closeModal }: AddServiceProps) => {\n  const [form] = Form.useForm();\n  const { addKService } = useService();\n  const [loading] = useWatchLoading(['add-service', false]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const dataAddService = {\n      ...values,\n    };\n    const add = await addKService(dataAddService);\n    if (add) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n    form.resetFields();\n  };\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Thêm mảng dịch vụ</h3>\n      <Form\n        form={form}\n        css={formAddServicetyle}\n        name=\"add-service\"\n        onFinish={onFinish}\n        layout=\"vertical\"\n      >\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Mã mảng DV</span>}\n          name=\"code\"\n          rules={[{ required: true, message: 'Vui lòng nhập mảng DV!' }]}\n        >\n          <Input placeholder=\"Nhập mã mảng DV\" />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Tên mảng DV</span>}\n          name=\"name\"\n          rules={[{ required: true, message: 'Vui lòng nhập tên mảng DV!' }]}\n        >\n          <Input placeholder=\"Nhập tên mảng DV\" />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Tên viết tắt</span>}\n          name=\"shortName\"\n          rules={[{ required: true, message: 'Vui lòng nhập tên viết tắt!' }]}\n        >\n          <Input placeholder=\"Nhập tên viết tắt\" />\n        </Form.Item>\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst formAddServicetyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { Pagination } from '@/constants/pagination';\n\nimport { css } from '@emotion/react';\nimport { Button, Row, Space } from 'antd';\nimport { useLocation } from 'react-router-dom';\nimport { useService } from '@/modules/category/services/service-category.service';\ntype DeleteServiceProps = {\n  closeModal: () => void;\n  data?: DataServiceCategoryType;\n  serviceIds: string[];\n};\nexport const DeleteService = ({ closeModal, serviceIds }: DeleteServiceProps) => {\n  const { deleteService, getAllService } = useService();\n  const pageIndex = useRootSelector((state) => state.category.sevice.pagination?.pageIndex) ?? 0;\n  const [loading] = useWatchLoading(['delete-service', false]);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const tab = searchParams.get('tab');\n  const handleDeleteService = async () => {\n    const deleteclient = await deleteService(serviceIds);\n    if (deleteclient) {\n      getAllService({\n        pageIndex: pageIndex || 1,\n        pageSize: Pagination.PAGESIZE,\n        roleType: tab!,\n      });\n\n      closeModal();\n    } else {\n      console.error('Failed to delete service');\n    }\n  };\n  return (\n    <div css={rootStyle}>\n      <h3 css={titleStyle}>Đồng ý xoá các mục tiêu đã chọn?</h3>\n      <Row justify=\"center\">\n        <Space>\n          <Button onClick={() => closeModal()}>Huỷ</Button>\n          <Button loading={loading} type=\"primary\" danger onClick={handleDeleteService}>\n            Xoá\n          </Button>\n        </Space>\n      </Row>\n    </div>\n  );\n};\n\nconst rootStyle = css`\n  margin-top: 2rem;\n  padding: 0 2rem;\n`;\n\nconst titleStyle = css`\n  font-size: 1.8rem;\n  line-height: 2rem;\n  text-align: center;\n  margin-bottom: 2.4rem;\n  font-weight: 500;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Fragment, useEffect } from 'react';\nimport { Button, Form, FormProps, Input, Row, Space } from 'antd';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useService } from '@/modules/category/services/service-category.service';\n\ntype FieldType = {\n  id?: string;\n  code: string;\n  name: string;\n  shortName: string;\n};\n\ntype UpdateServiceProps = {\n  closeModal: () => void;\n  data: DataServiceCategoryType;\n};\n\nexport const UpdateService = ({ closeModal, data }: UpdateServiceProps) => {\n  const [form] = Form.useForm();\n  const { updateService } = useService();\n  const [loading] = useWatchLoading(['edit-service', false]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const dataUpdateService = {\n      ...values,\n      id: data.id,\n    };\n    const edit = await updateService(dataUpdateService);\n    if (edit) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n\n  useEffect(() => {\n    form.setFieldsValue(data);\n  }, [data]);\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Chỉnh sửa mảng dịch vụ</h3>\n      <Form\n        form={form}\n        css={formUpdateServicetyle}\n        name=\"add-service\"\n        onFinish={onFinish}\n        layout=\"vertical\"\n      >\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Mã mảng DV</span>}\n          name=\"code\"\n          rules={[{ required: true, message: 'Vui lòng nhập mảng DV!' }]}\n        >\n          <Input placeholder=\"Nhập mã mảng DV\" />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Tên mảng DV</span>}\n          name=\"name\"\n          rules={[{ required: true, message: 'Vui lòng nhập tên mảng DV!' }]}\n        >\n          <Input placeholder=\"Nhập tên mảng DV\" />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Tên viết tắt</span>}\n          name=\"shortName\"\n          rules={[{ required: true, message: 'Vui lòng nhập tên viết tắt!' }]}\n        >\n          <Input placeholder=\"Nhập tên viết tắt\" />\n        </Form.Item>\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst formUpdateServicetyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n`;\n","import { ModalServiceType } from '@/modules/category/enum/service-category.enum';\nimport { Modal } from 'antd';\nimport { ReactNode, createContext, useContext, useState } from 'react';\nimport { AddService } from './add-service.modal';\nimport { DeleteService } from './delete-service.modal';\nimport { UpdateService } from './update-service.modal';\n\ntype ModalContexttype = {\n  openModal: (modalName: string, data?: DataServiceCategoryType, serviceIds?: string[]) => void;\n  closeModal: () => void;\n};\nconst ModalContext = createContext<ModalContexttype | undefined>(undefined);\n\nexport const useModalService = () => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error('useModalService must be used within a ModalServiceProvider');\n  }\n  return context;\n};\n\ntype ModalServiceProviderProps = {\n  children?: ReactNode;\n};\n\nexport const ModalServiceProvider = ({ children }: ModalServiceProviderProps) => {\n  const [currentModal, setCurrentModal] = useState<\n    { modalName: string; data?: DataServiceCategoryType; serviceIds?: string[] } | undefined\n  >();\n  const [open, setOpen] = useState<boolean>(false);\n\n  const openModal = (modalName: string, data?: DataServiceCategoryType, serviceIds?: string[]) => {\n    setCurrentModal({ modalName, data, serviceIds });\n    setOpen(true);\n  };\n\n  const closeModal = () => {\n    setCurrentModal(undefined);\n    setOpen(false);\n  };\n\n  return (\n    <ModalContext.Provider value={{ openModal, closeModal }}>\n      {children}\n      <Modal open={open} onCancel={closeModal} footer={null}>\n        {currentModal?.modalName === ModalServiceType.EditService && (\n          <UpdateService closeModal={closeModal} data={currentModal.data!} />\n        )}\n        {currentModal?.modalName === ModalServiceType.DeleteService && (\n          <DeleteService\n            closeModal={closeModal}\n            data={currentModal.data!}\n            serviceIds={currentModal.serviceIds!}\n          />\n        )}\n        {currentModal?.modalName === ModalServiceType.AddService && (\n          <AddService closeModal={closeModal} />\n        )}\n      </Modal>\n    </ModalContext.Provider>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, Dropdown } from 'antd';\nimport type { MenuProps } from 'antd';\nimport { CustomIcon } from '@/components/icons';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { useModalService } from '../modals/service-category';\nimport { ModalServiceType } from '../../enum/service-category.enum';\n\nenum MenuItem {\n  EditService = 1,\n}\n\ntype ServiceDropdownProps = {\n  data?: DataServiceCategoryType;\n  ServiceIds?: string[];\n};\n\nexport function ServiceDropdown({ data }: ServiceDropdownProps) {\n  const { openModal } = useModalService();\n  const { formatMessage } = useLocale();\n\n  const handleItemClick = (key: number) => {\n    switch (key) {\n      case MenuItem.EditService:\n        openModal(ModalServiceType.EditService, data);\n        break;\n      default:\n        break;\n    }\n  };\n  const items: MenuProps['items'] = [\n    {\n      key: '1',\n      label: <span>{formatMessage({ id: 'dropdown.edit' })}</span>,\n      onClick: () => handleItemClick(MenuItem.EditService),\n    },\n  ];\n\n  return (\n    <Dropdown menu={{ items }} placement=\"bottomRight\">\n      <Button css={actionIconBtn}>\n        <CustomIcon type=\"three-dot\" width={16} height={18} />\n      </Button>\n    </Dropdown>\n  );\n}\n\nconst actionIconBtn = css`\n  background: none;\n  border: none;\n  box-shadow: unset;\n  padding: 0;\n`;\n","import { TableProps } from 'antd';\nimport { LocaleFormatter } from '@/components/locale-formatter';\nimport { ServiceDropdown } from '@/modules/category/components/dropdown/service.dropdown';\n\ntype ColumnsType<T> = TableProps<T>['columns'];\nexport const serviceColumns: ColumnsType<DataServiceCategoryType> = [\n  {\n    title: <LocaleFormatter id=\"table.column.serviceCode\" />,\n    dataIndex: 'code',\n    render: (code) => code,\n  },\n\n  {\n    title: <LocaleFormatter id=\"table.column.serviceName\" />,\n    dataIndex: 'name',\n    render: (name) => name,\n  },\n\n  {\n    title: <LocaleFormatter id=\"table.column.serviceShortName\" />,\n    dataIndex: 'shortName',\n    render: (shortName) => shortName,\n  },\n\n  {\n    title: '',\n    dataIndex: 'calculationMethod',\n    fixed: 'right',\n    width: '6%',\n    render: (__, record) => <ServiceDropdown data={record} />,\n  },\n];\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { TableCustom } from '@/components/table';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Button } from 'antd';\nimport { Search, SearchParams } from '@/components/search';\nimport { CustomIcon } from '@/components/icons';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { Key } from 'antd/es/table/interface';\nimport { Pagination } from '@/constants/pagination';\nimport { useRootSelector } from '@/hooks/selector.hook';\n\nimport { serviceColumns } from './column/service.column';\nimport { useModalService } from '../../components/modals/service-category';\nimport { useService } from '../../services/service-category.service';\n\nexport default function TableService() {\n  const [serviceIds, setServiceIds] = useState<string[]>();\n  const { openModal } = useModalService();\n  const { getAllService } = useService();\n  const [loading] = useWatchLoading(['get-service', true]);\n  const { data, pagination } = useRootSelector((state) => state.category.sevice);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const tab = searchParams.get('tab');\n  const handleSearch = ({ textSearch, time }: SearchParams) => {\n    getAllService({\n      pageIndex: pagination?.pageIndex ?? Pagination.PAGEINDEX,\n      pageSize: Pagination.PAGESIZE,\n      textSearch,\n      time,\n      roleType: tab!,\n    });\n  };\n\n  const handleTableChange = (page: number) => {\n    getAllService({\n      pageIndex: page,\n      pageSize: Pagination.PAGESIZE,\n      roleType: tab!,\n    });\n  };\n\n  const rowSelection = {\n    onChange: (_selectedRowKeys: Key[], selectedRows: DataServiceCategoryType[]) => {\n      setServiceIds(selectedRows.map((row) => row.id!));\n    },\n  };\n\n  const handleDeleteSupplier = () => {\n    openModal('Delete Service', undefined, serviceIds);\n  };\n\n  useEffect(() => {\n    getAllService({\n      pageIndex: Pagination.PAGEINDEX,\n      pageSize: Pagination.PAGESIZE,\n      roleType: tab!,\n    });\n  }, [getAllService, tab]);\n\n  return (\n    <div css={rootStyle}>\n      <Button\n        onClick={() => openModal('Add Service')}\n        type=\"primary\"\n        css={addKCustomerStyle}\n        iconPosition=\"start\"\n        size=\"large\"\n      >\n        <CustomIcon color=\"#fff\" width={16} height={16} type=\"circle-plus\" />\n        <span>Thêm mảng dịch vụ</span>\n      </Button>\n\n      <div css={searchContainer}>\n        <Search onSearch={handleSearch} />\n      </div>\n      <div css={checkBoxStyle}>\n        <Button disabled={!serviceIds} onClick={() => handleDeleteSupplier()} size=\"large\" danger>\n          Xoá mục tiêu đã chọn\n        </Button>\n      </div>\n      <TableCustom\n        rowSelection={rowSelection}\n        columns={serviceColumns}\n        dataSource={data}\n        loading={loading}\n        rowKey={(record) => record.id}\n        onTableChange={(page) => handleTableChange(page)}\n        pagination={{\n          current: pagination?.pageIndex,\n          pageSize: Pagination.PAGESIZE,\n          total: pagination?.totalRecords,\n          position: ['bottomCenter'],\n        }}\n        scroll={{ x: 1450 }}\n      />\n    </div>\n  );\n}\n\nconst rootStyle = css`\n  position: relative;\n`;\n\nconst addKCustomerStyle = css`\n  position: absolute;\n  right: 0;\n  top: -9rem;\n  background: #0070b8;\n  display: flex;\n  align-items: center;\n  gap: 0.2rem;\n  &:hover {\n    background: #0070b8 !important;\n    opacity: 0.9;\n  }\n`;\n\nconst searchContainer = css`\n  margin-top: 2.6rem;\n`;\n\nconst checkBoxStyle = css`\n  margin: 1.1rem 0;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect } from 'react';\nimport { setBreadcrumbItemsAction } from '@/redux/slicers/breadcrumb.slice';\nimport { useDispatch } from 'react-redux';\nimport { ModalServiceProvider } from '../../components/modals/service-category';\nimport { CustomIcon } from '@/components/icons';\nimport TableService from './table-service';\nexport default function ServicePage() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const breadCrumbItems = [\n      {\n        title: {\n          vi_VN: 'Danh mục',\n          en_US: 'Category',\n        },\n      },\n      {\n        title: {\n          vi_VN: 'Mảng dịch vụ',\n          en_US: 'Service category',\n        },\n      },\n    ];\n    dispatch(setBreadcrumbItemsAction(breadCrumbItems));\n  }, [dispatch]);\n  return (\n    <ModalServiceProvider>\n      <h3 css={titleStyle}>Mảng dịch vụ</h3>\n      <div css={subTitleStyle}>\n        <CustomIcon width={8} height={8} type=\"dot\" />\n        <span>\n          <span css={subTitleStyle}>10 mảng dịch vụ</span>\n        </span>\n      </div>\n      <TableService />\n    </ModalServiceProvider>\n  );\n}\n\nconst titleStyle = css`\n  font-size: 2.4rem;\n  line-height: 2.8rem;\n  font-weight: 600;\n  color: rgba(16, 24, 40, 1);\n  margin-bottom: 0.5rem;\n`;\nconst subTitleStyle = css`\n  font-size: 1.2rem;\n  font-weight: 500;\n  line-height: 1.8rem;\n  color: rgba(84, 104, 129, 1);\n`;\n"],"names":["ModalServiceType","EditService","DeleteService","AddService","useService","api","useApi","caller","useCaller","dispatch","useDispatch","tenant","getTenant","user","useRootSelector","state","auth","getAllService","useCallback","pageIndex","Pagination","PAGEINDEX","pageSize","PAGESIZE","textSearch","statusId","time","dayjs","year","toString","roleType","queryParams","PageIndex","PageSize","UserId","id","RoleId","applicationRoles","StatusId","Time","TextSearch","urlParams","generateUrlParams","data","succeeded","post","loadingKey","items","totalRecords","totalPages","totalExtend","setListServiceAction","pagination","addKService","values","dataAddService","convertToUppercaseFirstLetter","log","addServiceAction","deleteService","serviceIds","ids","join","ApplicationUserId","del","deleteServiceAction","updateService","dataUpdateService","updateServiceAction","Row","closeModal","form","Form","loading","useWatchLoading","add","oncancel","Fragment","jsx","formTitleStyle","jsxs","formAddServicetyle","onFinish","_EMOTION_STRINGIFIED_CSS_ERROR__","process","labelFormItem","location","useLocation","searchParams","rootStyle","titleStyle","Space","Button","NODE_ENV","get","deleteclient","console","styles","map","edit","useEffect","formUpdateServicetyle","ModalContext","createContext","context","ModalServiceProvider","children","currentModal","setCurrentModal","useState","setOpen","modalName","openModal","MenuItem","formatMessage","handleItemClick","label","onClick","actionIconBtn","CustomIcon","serviceColumns","title","LocaleFormatter","dataIndex","render","code","name","shortName","fixed","width","__","record","ServiceDropdown","TableService","setServiceIds","tab","handleTableChange","onChange","_selectedRowKeys","selectedRows","row","position","searchContainer","handleSearch","checkBoxStyle","TableCustom","rowSelection","ServicePage","setBreadcrumbItemsAction","vi_VN","en_US","subTitleStyle"],"mappings":"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"}