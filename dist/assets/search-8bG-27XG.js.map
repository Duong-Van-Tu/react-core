{"version":3,"file":"search-8bG-27XG.js","sources":["../../src/components/search.tsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Button, Col, Input, Row, Select } from 'antd';\nimport { useMemo, useState } from 'react';\nimport dayjs from 'dayjs';\nimport { OptionProps } from 'antd/es/select';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { useNavigate } from 'react-router-dom';\n\nexport type SearchParams = {\n  textSearch?: string;\n  statusId?: string;\n  time?: string;\n};\n\ntype SearchProps = {\n  onSearch: (values: SearchParams) => void;\n  loadingStatus?: boolean;\n  status?: OptionProps[];\n};\n\nexport const Search = ({ onSearch, status, loadingStatus }: SearchProps) => {\n  const { formatMessage } = useLocale();\n\n  const [textSearch, setSearchers] = useState<string>();\n  const [statusId, SetStatusId] = useState<string>();\n  const [time, setTime] = useState<string>();\n  const navigate = useNavigate();\n  let queryParams = new URLSearchParams(location.search);\n\n  const handleSearch = (values?: SearchParams) => {\n    onSearch({ textSearch, statusId, time, ...values });\n\n    Object.entries({ textSearch, statusId, time, ...values }).forEach(([key, value]) => {\n      if (value) {\n        queryParams.set(key, Array.isArray(value) ? value.join(',') : value);\n      } else {\n        queryParams.delete(key);\n      }\n    });\n    navigate(`?${queryParams.toString()}`);\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  const statusOptions =\n    useMemo(\n      () =>\n        status?.map((status: OptionProps) => ({\n          value: status.id,\n          label: status.name,\n        })),\n      [status],\n    ) ?? [];\n\n  const startYear = 2015;\n  const currentYear = dayjs().year();\n  const years = Array.from({ length: currentYear - startYear + 1 }, (_, i) => startYear + i);\n\n  return (\n    <Row justify=\"space-between\" align=\"middle\" gutter={[20, 0]} css={searchStyle}>\n      <Col span={16}>\n        <Input\n          css={searchInputStyle}\n          size=\"large\"\n          prefix={\n            <Button css={searchBtnStyle} icon={<SearchOutlined onClick={() => handleSearch()} />} />\n          }\n          onChange={(e) => setSearchers(e.target.value)}\n          onKeyPress={handleKeyPress}\n          allowClear\n        />\n      </Col>\n      {status && (\n        <Col span={4}>\n          <Select\n            loading={loadingStatus}\n            css={selectStyle}\n            size=\"large\"\n            defaultValue={''}\n            options={[{ value: '', label: 'Tất cả trạng thái' }, ...statusOptions]}\n            onChange={(value) => SetStatusId(value)}\n            onSelect={(value) => {\n              handleSearch({ statusId: value });\n            }}\n          />\n        </Col>\n      )}\n\n      <Col span={4}>\n        <Select\n          css={selectStyle}\n          size=\"large\"\n          defaultValue={currentYear.toString()}\n          onChange={(value) => setTime(value)}\n          onSelect={(value) => handleSearch({ time: value })}\n        >\n          {years.map((year) => (\n            <Select.Option key={year} value={year.toString()}>\n              {formatMessage({ id: 'title.year' })} {year}\n            </Select.Option>\n          ))}\n        </Select>\n      </Col>\n    </Row>\n  );\n};\n\nconst searchBtnStyle = css`\n  border: none;\n  padding: none;\n  background: none;\n`;\n\nconst searchStyle = css`\n  padding: 1rem 1.4rem;\n  box-shadow: 0.04px 0.01px 6px #eff1f4;\n  border-radius: 0.8rem;\n`;\n\nconst searchInputStyle = css`\n  border: none;\n  outline: none;\n`;\n\nconst selectStyle = css`\n  width: 100%;\n`;\n"],"names":["Search","onSearch","location","handleSearch","textSearch","setSearchers","useState","statusId","time","values","key","set","queryParams","navigate","handleKeyPress","statusOptions","useMemo","status","status2","currentYear","id","name","i","dayjs","years","startYear","length","Row","process","searchStyle","jsx","Col","NODE_ENV","Button","searchBtnStyle","value","map","_EMOTION_STRINGIFIED_CSS_ERROR__","year"],"mappings":"4LAOA,MAA0BA,EAAA,CAAA,CAsBN,SAAAC,EAAoBC,OAAAA,EAAAA,cAAAA,CAAAA,IAAAA,CAAe,KAAA,CAE/CC,cAAAA,GAAAA,EAAAA,EAA0C,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EACnCF,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAYG,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,SAAAA,EAAUC,EAAAA,IAAAA,IAAAA,EAASC,IAAAA,gBAAAA,SAAAA,MAAAA,EAAAA,MAAQN,EAAAD,GAAAA,CAEjCE,EAAAA,CAAYG,WAAAA,EAAAA,SAAAA,EAAAA,KAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,OAAAA,QAAAA,CAAUC,WAAAA,EAASC,SAAAA,EAAAA,KAAAA,EAAAA,GAAAA,CAAAA,CAAAA,EAAAA,QAAAA,CAAAA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,EAAoBC,EAAAA,IAAAA,EAAAA,MAAAA,QAAAA,CAAAA,EAAAA,EAAAA,KAAAA,GAAAA,EAAAA,CAAAA,EAEpDC,EAAAA,OAAAA,CAAAA,CACPC,CACLA,EACFC,EAAA,IAAAD,EAAA,SAAA,CAAA,EAAA,CAAA,EAEFC,EAAAA,GAAAA,CAGIC,EAAAA,MAAAA,YAEW,EAEjBC,EAAAC,EAAAA,QAAA,IAAAC,GAAA,YAAAA,EAAA,IAAAC,IAAA,CAK4C,WAQtCC,MAAAA,EAAoBC,UACDC,CAAAA,GAAAA,CAAAA,EAA6CC,EAGpE,OAcKC,IAAA,OAMsBJ,EAAAA,MAAAI,KAAA,CAAWC,OAAAA,EAAAC,EAAA,CAAAC,EAAAA,CAAAA,EAAAA,MAAAJ,CAAA,EAAA,SAAAK,EAAA,CAGf,QAAA,gBAAkB,MAAA,SAuB7CV,WAEoBW,CAAAA,EAAA,IAAAC,EAAA,SAAA,CAAAC,EAAAC,EAAA,CAAA,KAAAhB,GAMHa,WAAAA,EAAAA,CAAAI,IAAAA,EAAA,KAAA,QAAA,SAAAC,EAAA,CAAA,IAAAC,EAMKC,OAAAA,EAAAA,CAAAC,QAAAA,IAAAA,EAAA,CAAA,CAAAC,CAAAA,CAAAA,EAAAA,SAAAA,GAAAA,EAAAA,EAAAA,OAAAA,KAAAA,EAAAA,WAAAA,EAAAA,WAAAA,EAAAA,CAAAC,CAAAA,CAKL,EAAArB,GAAAa,EAAAC,EAAA,CAAA,KAAA,EAAAM,WAAAA,EAAAA,CAAAA,QAAAA,EAAAA,IAAAA,EAAAA,KAAAA,QAAAA,aAAAA,GAAAA,QAAAA,CAAAA,CAAAA,MAAAA,GAAAA,MAAAA,mBAAAA,EAAAA,GAAAA,CAAAA"}