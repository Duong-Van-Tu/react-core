{"version":3,"file":"email-verification.page-D54IQjKu.js","sources":["../../src/pages/email-verification.page.tsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, Form, Input } from 'antd';\nimport type { FormProps, GetProp } from 'antd';\nimport type { OTPProps } from 'antd/es/input/OTP';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { CustomIcon } from '@/components/icons';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { LocaleFormatter } from '@/components/locale-formatter';\n\ntype FieldType = {\n  otp?: string;\n};\n\nexport default function EmailVerificationPage() {\n  const { formatMessage } = useLocale();\n  const navigate = useNavigate();\n\n  const onChange: GetProp<typeof Input.OTP, 'onChange'> = (text) => {\n    console.log('onChange:', text);\n  };\n\n  const sharedProps: OTPProps = {\n    onChange,\n  };\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    console.log('Success:', values);\n    navigate('/auth/reset-password');\n  };\n\n  const onFinishFailed: FormProps<FieldType>['onFinishFailed'] = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <div css={formContainerStyle}>\n      <div css={formContentStyle}>\n        <div css={goBackStyle}>\n          <CustomIcon width={12} height={14} type=\"prev\" />\n          <Link css={goBackLinkStyle} to=\"/auth/forgot-password\">\n            {formatMessage({ id: 'title.back' })}\n          </Link>\n        </div>\n        <h3 css={loginTitleStyle}>{formatMessage({ id: 'title.form.emailVerification' })}</h3>\n        <LocaleFormatter id=\"description.auth.emailVerification\" email=\"tu@gmail.com\" />\n        <Form\n          name=\"basic\"\n          layout=\"vertical\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          autoComplete=\"off\"\n          css={formStyle}\n        >\n          <Form.Item<FieldType>\n            name=\"otp\"\n            rules={[{ required: true, message: formatMessage({ id: 'form.input.require.otp' }) }]}\n          >\n            <Input.OTP formatter={(str) => str.toUpperCase()} {...sharedProps} />\n          </Form.Item>\n          <Button css={resendCodeBtn}>{formatMessage({ id: 'form.input.auth.resendCode' })}</Button>\n          <Form.Item>\n            <Button size=\"large\" css={submitBtnStyle} type=\"primary\" htmlType=\"submit\">\n              {formatMessage({ id: 'title.continue' })}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nconst formContainerStyle = css`\n  display: flex;\n  justify-content: center;\n`;\n\nconst formContentStyle = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  border-radius: 0.8rem;\n  padding: 2rem;\n  box-shadow: 0.04px 0.1px 6px #d9dadb;\n  background: #fff;\n  min-width: 34rem;\n  max-width: 34rem;\n`;\n\nconst submitBtnStyle = css`\n  margin-top: 2rem;\n  width: 100%;\n  background: #0070b8;\n\n  &:hover {\n    background: #0070b8 !important;\n    opacity: 0.9;\n  }\n`;\n\nconst formStyle = css`\n  margin-top: 4rem;\n  width: 100%;\n  .ant-otp {\n    width: 100%;\n    gap: 1.2rem;\n    input {\n      padding: 1rem;\n    }\n  }\n`;\n\nconst loginTitleStyle = css`\n  font-weight: 500;\n  font-size: 2.6rem;\n  line-height: 2.6rem;\n  margin: 2rem 0;\n`;\n\nconst goBackStyle = css`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  gap: 0.3rem;\n  &:hover {\n    svg {\n      path {\n        fill: #1677ff;\n      }\n    }\n  }\n`;\n\nconst goBackLinkStyle = css`\n  font-size: 1.4rem;\n  color: #000;\n`;\n\nconst resendCodeBtn = css`\n  background: none;\n  border: none;\n  padding: 0;\n  box-shadow: none;\n  color: #0070b8;\n`;\n"],"names":["EmailVerificationPage","log","navigate","useNavigate","sharedProps","text","onChange","onFinish","values","onFinishFailed","errorInfo","formContainerStyle","formContentStyle","jsxs","goBackStyle","jsx","CustomIcon","message","Link","goBackLinkStyle","formatMessage","loginTitleStyle","LocaleFormatter","Form","process","formStyle","_EMOTION_STRINGIFIED_CSS_ERROR__","NODE_ENV","Input","str","Button","styles"],"mappings":"mQAQA,SAAgCA,GAAA,CAU9B,KAAA,CACUC,cAAAA,GAAAA,EAAAA,EAAqBC,EAAAC,IAO/BC,EAAA,CAEEF,SARFG,GAAA,yBAGEC,CAAAA,CAAAA,CAKAJ,EAGFK,EAAAC,GAAA,wBAEAA,CAAA,0BAGO,CAAA,EAGCC,EAAAC,GAAA,uBAEuBA,CAAA,CAAA,EAEzB,SAAA,MAAA,CACyC,IAAqCC,mBAKjD,CAAA,IAAAC,EAE3B,UAAAC,EAAA,MACa,KAGZC,EAEqB,SAAA,CAAAC,EAAAC,EAAA,CAAMC,MAAAA,GAAuB,OAAA,GAAM,KAAA,MAAA,CAAA,EAAAF,EAAAG,EAAA,CAA0B,IAAAC,6BAIF,SAAAC,EAAA,CAGxD,GAAA,YAAA,CAOnC,CAAA,CAEwB,CAAA,CAAA,CAAA,EAAAL,EAAA,KAAA,CAAA,IAAAM,EAAA,SAAAD,EAAA,CAAA,GAAA,8BAAA,CAAA,CAAA,CAAA,EAAAL,EAAAO,EAAA,CAAA,GAAA,qCAAA,MAAA,cAAA,CAAA,EAAAT,EAAAU,EAAA,MAKF,QAAA,OAAA,WAAA,cAAA,CAAA,SAAA,EAAAC,EAAA,SAAAjB,EAAA,eAAAE,EAAA,aAAA,MAAA,IAAAgB,EAAA,SAAA,CAAAV,EAAAQ,EAAA,KAAA,CAAA,KAAA,MAAAG,MAAAA,CAAAA,CAAA,SAAA,GAaFF,QAAAA,EAAAG,CAAA,GAAA,wBAAA,CAAA,CAAA,CAAA,EAAA,SAAAZ,EAAAa,EAAA,IAAA,CAAA,UAAAC,GAAAA,EAAA,YAAA,EAAA,GAAAzB,CAAA,CAAAsB,CAAAA,CAAA,EAAAX,EAAAe,EAAA,CAWLN,IAAAA,EAAA,SAAAJ,EAAA,CAAA,GAAA,4BAAA,CAAA,CAAA,CAAA,EAAAL,EAAAQ,EAAA,KAAA,CAAA,WAAAO,EAAA,CAAA,KAAA,QAAAJ,IAAAA,EAAA,KAAA,UAmBEF,SAAAA,SAAA,SAAAJ,EAAA,CAAA,GAAA,gBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAM,CAAAA,CAAA,CAeI,CAAA,MAAAf,EAAA,CAAAoB,KAAA,SAAA,OAAA,qCAAA,EAKFnB,EAAA,CAAAmB,KAAA,UAAA,OAAA,oMAAA"}