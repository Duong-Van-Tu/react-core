{"version":3,"file":"opportunity.service-Ce2J1PJa.js","sources":["../../src/modules/sales/services/opportunity.service.ts"],"sourcesContent":["import { Pagination } from '@/constants/pagination';\nimport { useApi, useCaller } from '@/hooks/api.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { generateUrlParams, getTenant } from '@/utils/common';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport dayjs from 'dayjs';\nimport {\n  addHistoryOpportunityAction,\n  addOpportunityAction,\n  deleteOpportunityAction,\n  setDataOpportunityDetailAction,\n  setDataSaleAndSupplierAction,\n  setDataStatusAction,\n  setListHistoryOpportunityAction,\n  setListOpportunityAction,\n  updateOpportunityAction,\n} from '../reducers/slicers/opportunity.slice';\nimport { convertToUppercaseFirstLetter } from '@/utils/get-pathCode';\n\ntype FilterPrivilegesType = {\n  pageIndex: number;\n  pageSize: number;\n  textSearch?: string;\n  statusId?: string;\n  time?: string;\n};\n\nexport const useOpportunity = () => {\n  const api = useApi('');\n  const caller = useCaller();\n  const dispatch = useDispatch();\n  const tenant = getTenant();\n  const user = useRootSelector((state) => state.auth.user);\n\n  const getAllOpportunity = useCallback(\n    async ({\n      pageIndex = Pagination.PAGEINDEX,\n      pageSize = Pagination.PAGESIZE,\n      textSearch,\n      statusId,\n      time = dayjs().year().toString(),\n    }: FilterPrivilegesType) => {\n      const queryParams: { [key: string]: string | undefined } = {\n        PageIndex: pageIndex.toString(),\n        PageSize: pageSize.toString(),\n        UserId: user?.id,\n        RoleId: user?.applicationRoles[0].id,\n        StatusId: statusId,\n        Time: `1-1-${time}`, // value is first day Of year\n        TextSearch: textSearch,\n        tenant: tenant,\n      };\n\n      const urlParams = generateUrlParams(queryParams);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/Opportunity/get-list-with-pagination?${urlParams}`),\n        {\n          loadingKey: 'get-opportunity',\n        },\n      );\n      if (succeeded) {\n        const { items, totalRecords, pageIndex, totalPages, totalExtend } = data;\n        dispatch(\n          setListOpportunityAction({\n            data: items,\n            pagination: {\n              pageIndex,\n              totalRecords,\n              totalPages,\n            },\n            totalExtend,\n          }),\n        );\n      }\n    },\n    [caller, api],\n  );\n\n  const getOpportunityById = useCallback(\n    async (id: string) => {\n      const { data, succeeded } = await caller(() => api.get(`/Opportunity/get-by-id/${id}`), {\n        loadingKey: 'get-opportunityDetail',\n        messageKey: 'opportunityDetail-message',\n      });\n      if (succeeded) {\n        dispatch(setDataOpportunityDetailAction(data));\n      }\n    },\n    [caller, api],\n  );\n\n  const addOpportunity = useCallback(\n    async (values: DataOpportunityType) => {\n      const dataAddOpportunity = convertToUppercaseFirstLetter({\n        ...values,\n      });\n\n      const { data, succeeded } = await caller(\n        () =>\n          api.post(`/Opportunity/add-or-update?tenant=${tenant}`, [{ data: dataAddOpportunity }]),\n        { loadingKey: 'add-opportunity', messageKey: 'addOpportunity-message' },\n      );\n\n      if (succeeded) {\n        dispatch(addOpportunityAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const updateOpportunity = useCallback(\n    async (values: DataOpportunityType) => {\n      const dataAddOpportunity = convertToUppercaseFirstLetter({\n        ...values,\n      });\n\n      const { data, succeeded } = await caller(\n        () =>\n          api.post(`/Opportunity/add-or-update?tenant=${tenant}`, [\n            { id: values.id, data: dataAddOpportunity },\n          ]),\n        { loadingKey: 'edit-opportunity', messageKey: 'editOpportunity-message' },\n      );\n\n      if (succeeded) {\n        dispatch(updateOpportunityAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const deleteOpportunity = useCallback(\n    async (opportunityIds: string[]) => {\n      const deleteIds = opportunityIds.join(',');\n      const { succeeded } = await caller(\n        () => api.del(`/Opportunity/delete-by-ids/${deleteIds}/${user?.id}?tenant=${tenant}`),\n        { loadingKey: 'delete-opportunity' },\n      );\n\n      if (succeeded) {\n        dispatch(deleteOpportunityAction(opportunityIds));\n\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  // status\n  const updateStatusOpportunity = useCallback(\n    async (values: DataOpportunityType) => {\n      const dataUpdateStatusOpportunity = convertToUppercaseFirstLetter(values);\n\n      const { data, succeeded } = await caller(\n        () =>\n          api.put(`/OpportunityStatus/add-or-update?tenant=${tenant}`, dataUpdateStatusOpportunity),\n        { loadingKey: 'edit-statusOpportunity' },\n      );\n\n      if (succeeded) {\n        dispatch(updateOpportunityAction(data));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const updateStatusOpportunityById = useCallback(\n    async (values: DataOpportunityType) => {\n      const dataUpdateStatusOpportunity = convertToUppercaseFirstLetter(values);\n\n      const { data, succeeded } = await caller(\n        () =>\n          api.put(`/Opportunity/update-status-by-id?tenant=${tenant}`, dataUpdateStatusOpportunity),\n        { loadingKey: 'edit-statusOpportunityById' },\n      );\n\n      if (succeeded) {\n        dispatch(updateOpportunityAction(data));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const getAllStatusOpportunity = useCallback(async () => {\n    const { data, succeeded } = await caller(\n      () => api.get(`/OpportunityStatus/get-all?tenant=${tenant}`),\n      {\n        loadingKey: 'status-opportunity',\n      },\n    );\n\n    if (succeeded) {\n      dispatch(setDataStatusAction(data));\n    }\n  }, [api, caller]);\n\n  const getAllSaleAndSupplier = useCallback(async () => {\n    const { data, succeeded } = await caller(\n      () => api.get(`/ApplicationUsers/get-all?tenant=${tenant}`),\n      {\n        loadingKey: 'getAllSaleAndSupplier-opportunity',\n      },\n    );\n\n    if (succeeded) {\n      dispatch(setDataSaleAndSupplierAction(data));\n    }\n  }, [api, caller]);\n\n  const assignSaleAndSupplier = useCallback(\n    async (values: DataOpportunityType) => {\n      const { data, succeeded } = await caller(\n        () =>\n          api.post(`/Opportunity/assign-user?tenant=${tenant}`, {\n            id: values.id,\n            applicationUserId: values.saleAndSupplierId,\n          }),\n        {\n          loadingKey: 'assignUser-opportunity',\n        },\n      );\n\n      if (succeeded) {\n        dispatch(updateOpportunityAction(data));\n        return succeeded;\n      }\n      return false;\n    },\n    [api, caller],\n  );\n\n  const getAllHistoryOpportunity = useCallback(\n    async ({\n      pageIndex = Pagination.PAGEINDEX,\n      pageSize = Pagination.PAGESIZE,\n      textSearch,\n      statusId,\n      time = dayjs().year().toString(),\n    }: FilterPrivilegesType) => {\n      const queryParams: { [key: string]: string | undefined } = {\n        PageIndex: pageIndex.toString(),\n        PageSize: pageSize.toString(),\n        UserId: user?.id,\n        RoleId: user?.applicationRoles[0].id,\n        StatusId: statusId,\n        Time: `1-1-${time}`, // value is first day Of year\n        TextSearch: textSearch,\n        tenant: tenant,\n      };\n\n      const urlParams = generateUrlParams(queryParams);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/OpportunityHistory/get-list-with-pagination?${urlParams}`),\n        {\n          loadingKey: 'get-historyOpportunity',\n        },\n      );\n      if (succeeded) {\n        const { items, totalRecords, pageIndex, totalPages, totalExtend } = data;\n        dispatch(\n          setListHistoryOpportunityAction({\n            data: items,\n            pagination: {\n              pageIndex,\n              totalRecords,\n              totalPages,\n            },\n            totalExtend,\n          }),\n        );\n      }\n    },\n    [caller, api],\n  );\n\n  const addHistoryOpportunity = useCallback(\n    async (values: HistoryOpportunityType) => {\n      const dataAddOpportunity = convertToUppercaseFirstLetter({\n        ...values,\n      });\n\n      const { data, succeeded } = await caller(\n        () =>\n          api.post(`/OpportunityHistory/add-or-update?tenant=${tenant}`, [\n            { data: dataAddOpportunity },\n          ]),\n        { loadingKey: 'add-historyOpportunity', messageKey: 'addHistoryOpportunity-message' },\n      );\n\n      if (succeeded) {\n        dispatch(addHistoryOpportunityAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  return {\n    getAllOpportunity,\n    addOpportunity,\n    updateOpportunity,\n    deleteOpportunity,\n    updateStatusOpportunity,\n    getAllStatusOpportunity,\n    getOpportunityById,\n    getAllSaleAndSupplier,\n    assignSaleAndSupplier,\n    updateStatusOpportunityById,\n    getAllHistoryOpportunity,\n    addHistoryOpportunity,\n  };\n};\n"],"names":["useOpportunity","api","useApi","caller","useCaller","dispatch","useDispatch","tenant","getTenant","user","useRootSelector","state","auth","getAllOpportunity","useCallback","pageIndex","Pagination","PAGEINDEX","pageSize","PAGESIZE","textSearch","statusId","time","dayjs","year","toString","queryParams","PageIndex","PageSize","UserId","id","RoleId","applicationRoles","StatusId","Time","TextSearch","urlParams","generateUrlParams","data","succeeded","post","loadingKey","items","totalRecords","totalPages","totalExtend","setListOpportunityAction","pagination","getOpportunityById","get","messageKey","setDataOpportunityDetailAction","addOpportunity","values","dataAddOpportunity","convertToUppercaseFirstLetter","addOpportunityAction","updateOpportunity","updateOpportunityAction","deleteOpportunity","opportunityIds","deleteIds","join","del","deleteOpportunityAction","updateStatusOpportunity","dataUpdateStatusOpportunity","put","updateStatusOpportunityById","getAllStatusOpportunity","setDataStatusAction","getAllSaleAndSupplier","setDataSaleAndSupplierAction","assignSaleAndSupplier","applicationUserId","saleAndSupplierId","getAllHistoryOpportunity","setListHistoryOpportunityAction","addHistoryOpportunity","addHistoryOpportunityAction"],"mappings":"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"}