{"version":3,"file":"index-DqPZ214g.js","sources":["../../src/modules/sales/enum/opportunity.enum.ts","../../src/modules/sales/components/modals/opportuity/assign-opportuity.tsx","../../src/modules/sales/components/modals/opportuity/close-opportuity.tsx","../../src/modules/sales/components/modals/opportuity/update-opportuity.tsx","../../src/modules/sales/components/modals/opportuity/index.tsx","../../src/modules/sales/components/dropdown/opportunity.dropdown.tsx","../../src/modules/sales/pages/opportunity/columns/opportunity.column.tsx","../../src/modules/sales/pages/opportunity/index.tsx"],"sourcesContent":["export enum ModalOpportunityType {\n    RequestEdit = 'Request Edit',\n    AssignOpportunity = 'Assign Opportunity',\n    UpdateOpportunity = 'Update Opportunity',\n    CloseOpportunity = 'Close Opportunity',\n    Report = 'Report',\n    Delete='Delete'\n  }","/** @jsxImportSource @emotion/react */\nimport { useLocale } from '@/hooks/locale.hook';\nimport { css } from '@emotion/react';\nimport { Button, Form, FormProps, Row, Space, Select } from 'antd';\nimport { Fragment } from 'react';\n\ntype AssignOpportuityProps = {\n  closeModal: () => void;\n};\ntype FieldType = {\n  customer: string;\n};\n\nexport const AssignOpportuity = ({ ...props }: AssignOpportuityProps) => {\n  const { closeModal } = props;\n  const { Option } = Select;\n  const { formatMessage } = useLocale();\n\n  const onCustomerChange = () => {};\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    console.log('Success:', values);\n    closeModal();\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Gán cơ hội cho Sale/NPP</h3>\n      <Form\n        css={formAssignOpportuityStyle}\n        name=\"assign-opportuity\"\n        onFinish={onFinish}\n        layout=\"vertical\"\n      >\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>{formatMessage({ id: 'title.form.select' })}</span>}\n          name=\"customer\"\n          rules={[\n            { required: true, message: formatMessage({ id: 'form.input.require.selectCustomer' }) },\n          ]}\n        >\n          <Select\n            placeholder={formatMessage({ id: 'title.form.selectCustomer' })}\n            onChange={onCustomerChange}\n            css={selectFormStyle}\n            allowClear\n          >\n            <Option value=\"test\">test</Option>\n          </Select>\n        </Form.Item>\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formAssignOpportuityStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem 0;\n`;\n\nconst formTitleStyle = css`\n  font-weight: 700;\n  font-size: 2.1rem;\n  line-height: 2.6rem;\n  margin-top: 3rem;\n  color: rgba(21, 41, 75, 1);\n  font-family: 'Roboto', sans-serif;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 600;\n  color: rgba(16, 24, 40, 1);\n  font-family: 'Roboto', sans-serif;\n`;\n\nconst selectFormStyle = css`\n  height: 4.5rem;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useLocale } from '@/hooks/locale.hook';\nimport { css } from '@emotion/react';\nimport { Button, Form, FormProps, Input, Row, Space, Select } from 'antd';\nimport { Fragment, useState } from 'react';\n\ntype CloseOpportuityProps = {\n  closeModal: () => void;\n};\ntype FieldType = {\n  customer: string;\n  reason?: string;\n};\n\nexport const CloseOpportuity = ({ ...props }: CloseOpportuityProps) => {\n  const { closeModal } = props;\n  const { Option } = Select;\n  const { formatMessage } = useLocale();\n  const [showReasonInput, setShowReasonInput] = useState(false);\n\n  const onStatusChange = (value: string) => {\n    setShowReasonInput(value === 'Fail');\n  };\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    console.log('Success:', values);\n    closeModal();\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Đóng cơ hội</h3>\n      <Form\n        css={formCLoseOpportuityStyle}\n        name=\"assign-opportuity\"\n        onFinish={onFinish}\n        layout=\"vertical\"\n      >\n        <Form.Item<FieldType>\n          label={\n            <span css={labelFormItem}>{formatMessage({ id: 'title.form.selectStatus' })}</span>\n          }\n          name=\"customer\"\n          rules={[\n            { required: true, message: formatMessage({ id: 'form.input.require.selectStatus' }) },\n          ]}\n        >\n          <Select\n            placeholder={formatMessage({ id: 'title.form.selectStatus' })}\n            onChange={onStatusChange}\n            css={selectFormStyle}\n            allowClear\n          >\n            <Option value=\"Activity\">Đang active</Option>\n            <Option value=\"Close\">Close</Option>\n            <Option value=\"Fail\">Fail</Option>\n            <Option value=\"Cancel\">Cancel</Option>\n            <Option value=\"Hold\">On Hold</Option>\n          </Select>\n        </Form.Item>\n\n        {showReasonInput && (\n          <Form.Item<FieldType>\n            label={<span css={labelFormItem}>{formatMessage({ id: 'title.form.reason' })}</span>}\n            name=\"reason\"\n            rules={[\n              { required: true, message: formatMessage({ id: 'form.input.require.reason' }) },\n            ]}\n          >\n            <Input.TextArea\n              style={{ resize: 'none' }}\n              placeholder={formatMessage({ id: 'form.input.reason' })}\n              css={textAreaStyle}\n            />\n          </Form.Item>\n        )}\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formCLoseOpportuityStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem 0;\n`;\n\nconst formTitleStyle = css`\n  font-weight: 700;\n  font-size: 2.1rem;\n  line-height: 2.6rem;\n  margin-top: 3rem;\n  color: rgba(21, 41, 75, 1);\n  font-family: 'Roboto', sans-serif;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 600;\n  color: rgba(16, 24, 40, 1);\n  font-family: 'Roboto', sans-serif;\n`;\n\nconst selectFormStyle = css`\n  height: 4.5rem;\n`;\nconst textAreaStyle = css`\n  padding: 0.8rem 1.4rem;\n  &::placeholder {\n    color: rgba(208, 213, 221, 1);\n    font-size: 1.4rem;\n    font-family: Roboto, sans-serif;\n    font-weight: 600;\n  }\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useLocale } from '@/hooks/locale.hook';\nimport { css } from '@emotion/react';\nimport { Button, Col, Form, FormProps, Input, Row, Space } from 'antd';\nimport { Fragment } from 'react';\n\ntype UpdateOpportuityProps = {\n  closeModal: () => void;\n};\ntype FieldType = {\n  target: string;\n  activity: string;\n  time: string;\n  result: string;\n};\n\nexport const UpdateOpportuity = ({ ...props }: UpdateOpportuityProps) => {\n  const { closeModal } = props;\n  const { formatMessage } = useLocale();\n\n  const onFinish: FormProps<FieldType>['onFinish'] = (values) => {\n    console.log('Success:', values);\n    closeModal();\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Thêm cập nhật cơ hội</h3>\n      <Form\n        css={formUpdateOpportuityStyle}\n        name=\"update-opportuity\"\n        onFinish={onFinish}\n        layout=\"vertical\"\n      >\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>{formatMessage({ id: 'title.form.target' })}</span>}\n          name=\"target\"\n          rules={[{ required: true, message: formatMessage({ id: 'form.input.require.target' }) }]}\n        >\n          <Input placeholder={formatMessage({ id: 'form.input.target' })} css={inputFormItem} />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>{formatMessage({ id: 'title.form.activity' })}</span>}\n          name=\"activity\"\n          rules={[\n            { required: true, message: formatMessage({ id: 'form.input.require.activity' }) },\n          ]}\n        >\n          <Input.TextArea\n            placeholder={formatMessage({ id: 'form.input.activity' })}\n            style={{ resize: 'none' }}\n            css={textAreaStyle}\n          />\n        </Form.Item>\n\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>{formatMessage({ id: 'title.form.time' })}</span>}\n              name=\"time\"\n              rules={[\n                { required: true, message: formatMessage({ id: 'form.input.require.time' }) },\n              ]}\n            >\n              <Input\n                size=\"middle\"\n                placeholder={formatMessage({ id: 'form.input.target' })}\n                css={inputFormItem}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>{formatMessage({ id: 'title.form.result' })}</span>}\n              name=\"result\"\n              rules={[\n                { required: true, message: formatMessage({ id: 'form.input.require.result' }) },\n              ]}\n            >\n              <Input\n                size=\"middle\"\n                placeholder={formatMessage({ id: 'form.input.realityKPI' })}\n                css={inputFormItem}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formUpdateOpportuityStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem 0;\n`;\n\nconst formTitleStyle = css`\n  font-weight: 700;\n  font-size: 2.1rem;\n  line-height: 2.6rem;\n  margin-top: 3rem;\n  color: rgba(21, 41, 75, 1);\n  font-family: 'Roboto', sans-serif;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 600;\n  color: rgba(16, 24, 40, 1);\n  font-family: 'Roboto', sans-serif;\n`;\n\nconst inputFormItem = css`\n  height: 4.5rem;\n  padding: 0.8rem 1.4rem;\n  &::placeholder {\n    color: rgba(208, 213, 221, 1);\n    font-size: 1.4rem;\n    font-family: Roboto, sans-serif;\n    font-weight: 600;\n  }\n`;\n\nconst textAreaStyle = css`\n  padding: 0.8rem 1.4rem;\n  &::placeholder {\n    color: rgba(208, 213, 221, 1);\n    font-size: 1.4rem;\n    font-family: Roboto, sans-serif;\n    font-weight: 600;\n  }\n`;\n","import { Modal } from 'antd';\nimport { ReactNode, createContext, useContext, useState } from 'react';\nimport { ModalOpportunityType } from '../../../enum/opportunity.enum';\nimport { AssignOpportuity } from './assign-opportuity';\nimport { CloseOpportuity } from './close-opportuity';\nimport { UpdateOpportuity } from './update-opportuity';\n\ntype ModalContexttype = {\n  openModal: (modalName: string) => void;\n  closeModal: () => void;\n};\nconst ModalContext = createContext<ModalContexttype | undefined>(undefined);\n\nexport const useOpportunityModal = () => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error('useOpportunityModal must be used within a ModalOpportunityProvider');\n  }\n  return context;\n};\n\ntype ModalProviderProps = {\n  children?: ReactNode;\n};\nexport const ModalOpportunityProvider = ({ children }: ModalProviderProps) => {\n  const [currentModal, setCurrentModal] = useState<string>();\n  const [open, setOpen] = useState<boolean>(false);\n\n  const openModal = (modalName: string) => {\n    setCurrentModal(modalName);\n    setOpen(true);\n  };\n\n  const closeModal = () => {\n    setCurrentModal(undefined);\n    setOpen(false);\n  };\n\n  return (\n    <ModalContext.Provider value={{ openModal, closeModal }}>\n      {children}\n      <Modal open={open} onCancel={closeModal} footer={null}>\n        {currentModal === ModalOpportunityType.RequestEdit && <div>Request Edit Modal</div>}\n        {currentModal === ModalOpportunityType.AssignOpportunity && (\n          <AssignOpportuity closeModal={closeModal} />\n        )}\n        {currentModal === ModalOpportunityType.UpdateOpportunity && (\n          <UpdateOpportuity closeModal={closeModal} />\n        )}\n        {currentModal === ModalOpportunityType.CloseOpportunity && (\n          <CloseOpportuity closeModal={closeModal} />\n        )}\n        {currentModal === ModalOpportunityType.Report && <div>Report Modal</div>}\n        {currentModal === ModalOpportunityType.Delete && <div>Delete Modal</div>}\n      </Modal>\n    </ModalContext.Provider>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, Dropdown } from 'antd';\nimport type { MenuProps } from 'antd';\nimport { CustomIcon } from '@/components/icons';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { ModalOpportunityType } from '../../enum/opportunity.enum';\nimport { useOpportunityModal } from '../modals/opportuity';\n\nenum MenuItem {\n  RequestEdit = 1,\n  AssignOpportunity,\n  UpdateOpportunity,\n  CloseOpportunity,\n  Report,\n  Delete,\n}\n\nexport function OpportunityDropdown() {\n  const { openModal } = useOpportunityModal();\n  const { formatMessage } = useLocale();\n\n  const handleItemClick = (key: number) => {\n    switch (key) {\n      case MenuItem.RequestEdit:\n        openModal(ModalOpportunityType.RequestEdit);\n        break;\n      case MenuItem.AssignOpportunity:\n        openModal(ModalOpportunityType.AssignOpportunity);\n        break;\n      case MenuItem.UpdateOpportunity:\n        openModal(ModalOpportunityType.UpdateOpportunity);\n        break;\n      case MenuItem.CloseOpportunity:\n        openModal(ModalOpportunityType.CloseOpportunity);\n        break;\n      case MenuItem.Report:\n        openModal(ModalOpportunityType.Report);\n        break;\n      case MenuItem.Delete:\n        openModal(ModalOpportunityType.Delete);\n        break;\n      default:\n        break;\n    }\n  };\n  const items: MenuProps['items'] = [\n    {\n      key: '1',\n      label: <span>{formatMessage({ id: 'title.dropdown.requestEdit' })}</span>,\n      onClick: () => handleItemClick(MenuItem.RequestEdit),\n    },\n    {\n      key: '2',\n      label: <span>{formatMessage({ id: 'title.dropdown.opportunity.assignOpportunity' })}</span>,\n      onClick: () => handleItemClick(MenuItem.AssignOpportunity),\n    },\n    {\n      key: '3',\n      label: <span>{formatMessage({ id: 'title.dropdown.opportunity.updateOpportunity' })}</span>,\n      onClick: () => handleItemClick(MenuItem.UpdateOpportunity),\n    },\n    {\n      key: '4',\n      label: <span>{formatMessage({ id: 'title.dropdown.opportunity.closeOpportunity' })}</span>,\n      onClick: () => handleItemClick(MenuItem.CloseOpportunity),\n    },\n    {\n      key: '5',\n      label: <span>{formatMessage({ id: 'title.dropdown.opportunity.resultReport' })}</span>,\n      onClick: () => handleItemClick(MenuItem.Report),\n    },\n    {\n      key: '6',\n      label: <span>{formatMessage({ id: 'title.dropdown.delete' })}</span>,\n      onClick: () => handleItemClick(MenuItem.Delete),\n    },\n  ];\n\n  return (\n    <Dropdown menu={{ items }} placement=\"bottomRight\">\n      <Button css={actionIconBtn}>\n        <CustomIcon type=\"three-dot\" width={16} height={18} />\n      </Button>\n    </Dropdown>\n  );\n}\n\nconst actionIconBtn = css`\n  background: none;\n  border: none;\n  box-shadow: unset;\n  padding: 0;\n`;\n","import { TableProps } from 'antd';\nimport { DataOpportunityType } from '../type.opportunity';\nimport { LocaleFormatter } from '@/components/locale-formatter';\nimport { OpportunityDropdown } from '@/modules/sales/components/dropdown/opportunity.dropdown';\n\ntype ColumnsType<T> = TableProps<T>['columns'];\nexport const opportunityColumns: ColumnsType<DataOpportunityType> = [\n  {\n    title: <LocaleFormatter id=\"table.column.customers\" />,\n    dataIndex: 'customers',\n    render: (customers) => customers,\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.opportunity.decisionMakers\" />,\n    dataIndex: 'decisionMakers',\n    render: (decisionMakers) => decisionMakers,\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.opportunity.technicalLeads\" />,\n    dataIndex: 'technicalLeads',\n    render: (technicalLeads) => technicalLeads,\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.opportunity.beneficiaries\" />,\n    dataIndex: 'beneficiaries',\n    render: (beneficiaries) => beneficiaries,\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.opportunity.customerNeeds\" />,\n    dataIndex: 'customerNeeds',\n    render: (customerNeeds) => customerNeeds,\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.opportunity.expectedTime\" />,\n    dataIndex: 'expectedTime',\n    render: (expectedTime) => expectedTime,\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.opportunity.budget\" />,\n    dataIndex: 'budget',\n    render: (budget) => budget,\n    width: '8%',\n  },\n  {\n    title: '',\n    dataIndex: 'calculationMethod',\n    fixed: 'right',\n    width: '6%',\n    render: () => <OpportunityDropdown />,\n  },\n];\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setBreadcrumbItemsAction } from '@/redux/slicers/breadcrumb.slice';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { TableCustom } from '@/components/table';\nimport { CustomIcon } from '@/components/icons';\nimport { DataOpportunityType } from './type.opportunity';\nimport { opportunityColumns } from './columns/opportunity.column';\nimport { ModalOpportunityProvider } from '../../components/modals/opportuity';\n\nconst data: DataOpportunityType[] = [\n  {\n    key: 1,\n    customers: 'customers',\n    decisionMakers: 'decisionMakers',\n    technicalLeads: 'technicalLeads',\n    beneficiaries: 'beneficiaries',\n    customerNeeds: 'customerNeeds',\n    expectedTime: 'expectedTime',\n    budget: 'budget',\n  },\n];\n\nexport default function OpportunityPage() {\n  const dispatch = useDispatch();\n  const { formatMessage } = useLocale();\n\n  useEffect(() => {\n    const breadCrumbItems = [\n      {\n        title: {\n          vi_VN: 'Sale',\n          en_US: 'Sale',\n        },\n      },\n      {\n        title: {\n          vi_VN: 'Quyền lợi',\n          en_US: 'Opportunity',\n        },\n      },\n    ];\n    dispatch(setBreadcrumbItemsAction(breadCrumbItems));\n  }, [dispatch]);\n\n  return (\n    <ModalOpportunityProvider>\n      <h3 css={titleStyle}>{formatMessage({ id: 'title.document.opportunity' })}</h3>\n      <div css={subTitleStyle}>\n        <span>{formatMessage({ id: 'title.document.opportunity' })}</span>\n        <CustomIcon width={8} height={8} type=\"dot\" />\n        <span>10 {formatMessage({ id: 'title.document.opportunity' })}</span>\n      </div>\n      <TableCustom\n        columns={opportunityColumns}\n        dataSource={data}\n        loading={false}\n        rowKey={(record) => record.key}\n        pagination={{ current: 1, pageSize: 7 }}\n        scroll={{ x: 1450 }}\n      />\n    </ModalOpportunityProvider>\n  );\n}\n\nconst subTitleStyle = css`\n  display: flex;\n  align-items: center;\n  margin-top: 0.4rem;\n  gap: 4px;\n  font-size: 1.4rem;\n`;\nconst titleStyle = css`\n  font-size: 1.8rem;\n  line-height: 2.3rem;\n  font-weight: 600;\n`;\n"],"names":["ModalOpportunityType","RequestEdit","AssignOpportunity","UpdateOpportunity","CloseOpportunity","Report","Delete","AssignOpportuity","props","Option","Select","formatMessage","onCustomerChange","values","log","closeModal","Fragment","jsx","jsxs","formAssignOpportuityStyle","onFinish","labelFormItem","process","selectFormStyle","_EMOTION_STRINGIFIED_CSS_ERROR__","onStatusChange","value","oncancel","formTitleStyle","Form","formCLoseOpportuityStyle","textAreaStyle","showReasonInput","required","NODE_ENV","Input","UpdateOpportuity","formUpdateOpportuityStyle","inputFormItem","id","message","Row","Col","ModalContext","createContext","undefined","context","ModalOpportunityProvider","children","currentModal","setCurrentModal","useState","setOpen","modalName","openModal","MenuItem","handleItemClick","items","key","label","onClick","env","toString","opportunityColumns","title","LocaleFormatter","dataIndex","render","customers","decisionMakers","technicalLeads","beneficiaries","customerNeeds","expectedTime","budget","width","fixed","OpportunityDropdown","data","OpportunityPage","dispatch","useDispatch","useLocale","useEffect","setBreadcrumbItemsAction","vi_VN","en_US","titleStyle","subTitleStyle","CustomIcon","TableCustom","record","current","pageSize","x","name","styles"],"mappings":"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"}