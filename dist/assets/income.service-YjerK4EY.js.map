{"version":3,"file":"income.service-YjerK4EY.js","sources":["../../src/modules/users/services/income.service.ts"],"sourcesContent":["import { useApi, useCaller } from '@/hooks/api.hook';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  setListIncomeAction,\n  setListIncomeActionWithRoleAdmin,\n  setListIncomeActionWithRoleUser,\n  setListIncomeDetail,\n} from '../reducers/slicers/income.slice';\n// import { useRootSelector } from '@/hooks/selector.hook';\nimport { Pagination } from '@/constants/pagination';\nimport { generateUrlParams, getTenant } from '@/utils/common';\nimport dayjs from 'dayjs';\n\nexport type FilterIncomeType = {\n  pageIndex: number;\n  pageSize: number;\n  month?: string;\n  year?: string;\n  textSearch?: string;\n  orderCol?: string;\n  orderDir?: string;\n  code?: string;\n  userId?: string;\n  statusId?: string;\n  roleId?: string;\n  time?: string;\n  roleType?: string;\n};\n\nexport const useIncome = () => {\n  const api = useApi('');\n  const caller = useCaller();\n  const dispatch = useDispatch();\n  const tenant = getTenant();\n  // const user = useRootSelector((state) => state.auth.user);\n\n  const getListIncome = useCallback(\n    async ({\n      pageIndex = Pagination.PAGEINDEX,\n      pageSize = Pagination.PAGESIZE,\n      textSearch,\n      time = dayjs().year().toString(),\n    }: FilterIncomeType) => {\n      const queryParams: { [key: string]: string | undefined } = {\n        tenant,\n        PageIndex: pageIndex.toString(),\n        PageSize: pageSize.toString(),\n        TextSearch: textSearch,\n        Time: `1-1-${time}`,\n      };\n\n      const urlParams = generateUrlParams(queryParams);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/EmployeeSalary/get-list-with-pagination?${urlParams}`),\n        {\n          loadingKey: 'get-list-income',\n        },\n      );\n      if (succeeded) {\n        const { items, totalRecords, pageIndex, totalPages, totalExtend } = data;\n        dispatch(\n          setListIncomeAction({\n            data: items,\n            pagination: {\n              pageIndex,\n              totalRecords,\n              totalPages,\n            },\n            totalExtend,\n          }),\n        );\n      }\n    },\n    [caller, api],\n  );\n\n  const getListIncomeWithRoleUser = useCallback(\n    async ({\n      pageIndex = Pagination.PAGEINDEX,\n      pageSize = Pagination.PAGESIZE,\n      textSearch,\n      time = dayjs().year().toString(),\n    }: FilterIncomeType) => {\n      const queryParams: { [key: string]: string | undefined } = {\n        tenant,\n        PageIndex: pageIndex.toString(),\n        PageSize: pageSize.toString(),\n        TextSearch: textSearch,\n        Time: `1-1-${time}`,\n      };\n\n      const urlParams = generateUrlParams(queryParams);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/EmployeeSalary/get-list-role-with-pagination?${urlParams}`),\n        {\n          loadingKey: 'get-list-income-with-role-user',\n        },\n      );\n      if (succeeded) {\n        const { items, totalRecords, pageIndex, totalPages, totalExtend } = data;\n        dispatch(\n          setListIncomeActionWithRoleUser({\n            data: items,\n            pagination: {\n              pageIndex,\n              totalRecords,\n              totalPages,\n            },\n            totalExtend,\n          }),\n        );\n      }\n    },\n    [caller, api],\n  );\n\n  const getListIncomeWithRoleAdmin = useCallback(\n    async ({\n      pageIndex = Pagination.PAGEINDEX,\n      pageSize = Pagination.PAGESIZE,\n      textSearch,\n      time = dayjs().year().toString(),\n    }: FilterIncomeType) => {\n      const queryParams: { [key: string]: string | undefined } = {\n        tenant,\n        PageIndex: pageIndex.toString(),\n        PageSize: pageSize.toString(),\n        TextSearch: textSearch,\n        Time: `1-1-${time}`,\n      };\n\n      const urlParams = generateUrlParams(queryParams);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/EmployeeSalary/get-list-admin-role-with-pagination?${urlParams}`),\n        {\n          loadingKey: 'get-list-income-with-role-admin',\n        },\n      );\n      if (succeeded) {\n        const { items, totalRecords, pageIndex, totalPages, totalExtend } = data;\n        dispatch(\n          setListIncomeActionWithRoleAdmin({\n            data: items,\n            pagination: {\n              pageIndex,\n              totalRecords,\n              totalPages,\n            },\n            totalExtend,\n          }),\n        );\n      }\n    },\n    [caller, api],\n  );\n\n  const getListIncomeDetail = useCallback(\n    async ({\n      pageIndex = Pagination.PAGEINDEX,\n      pageSize = Pagination.PAGESIZE,\n      month,\n      year,\n      userId,\n    }: FilterIncomeType) => {\n      const queryParams: { [key: string]: string | undefined } = {\n        tenant,\n        PageIndex: pageIndex.toString(),\n        PageSize: pageSize.toString(),\n        month,\n        year,\n        userId,\n      };\n\n      const urlParams = generateUrlParams(queryParams);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/EmployeeSalaryDetail/get-list-with-pagination?${urlParams}`),\n        {\n          loadingKey: 'get-list-income-detail',\n        },\n      );\n      if (succeeded) {\n        const { items, totalRecords, pageIndex, totalPages, totalExtend } = data;\n\n        dispatch(\n          setListIncomeDetail({\n            data: items,\n            pagination: {\n              pageIndex,\n              totalRecords,\n              totalPages,\n            },\n            totalExtend,\n          }),\n        );\n      }\n    },\n    [caller, api],\n  );\n\n  return {\n    getListIncomeDetail,\n    getListIncome,\n    getListIncomeWithRoleUser,\n    getListIncomeWithRoleAdmin,\n  };\n};\n"],"names":["useIncome","api","useApi","caller","useCaller","dispatch","useDispatch","tenant","getTenant","getListIncome","useCallback","pageIndex","Pagination","PAGEINDEX","pageSize","PAGESIZE","textSearch","time","dayjs","year","toString","queryParams","PageIndex","PageSize","TextSearch","Time","urlParams","generateUrlParams","data","succeeded","post","loadingKey","items","totalRecords","totalPages","totalExtend","setListIncomeAction","pagination","getListIncomeWithRoleUser","setListIncomeActionWithRoleUser","getListIncomeWithRoleAdmin","setListIncomeActionWithRoleAdmin","getListIncomeDetail","month","userId","setListIncomeDetail"],"mappings":"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"}