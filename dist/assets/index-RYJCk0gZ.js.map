{"version":3,"file":"index-RYJCk0gZ.js","sources":["../../src/modules/category/enum/customer.enum.ts","../../src/modules/category/services/customer.service.ts","../../src/modules/category/components/modals/customer/add-customer.modal.tsx","../../src/modules/category/components/modals/customer/delete.customer.modal.tsx","../../src/modules/category/components/modals/customer/update.customer.modal.tsx","../../src/modules/category/components/modals/customer/index.tsx","../../src/modules/category/components/dropdown/customer.dropdown.tsx","../../src/modules/category/pages/customer/column/customer.column.tsx","../../src/modules/category/pages/customer/table-customer.tsx","../../src/modules/category/pages/customer/index.tsx"],"sourcesContent":["export enum ModalCustomerType {\n  Edit = 'Edit',\n  Delete = 'Delete Customer',\n  AddCustomer = 'Add Customer',\n}\n","import { useApi, useCaller } from '@/hooks/api.hook';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  setListCustomerAction,\n  addCustomerAction,\n  deleteCustomerAction,\n  updateCustomerAction,\n} from '../reducers/slicers/customer.slice';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { convertToUppercaseFirstLetter } from '@/utils/get-pathCode';\nimport { Pagination } from '@/constants/pagination';\nimport { generateUrlParams, getTenant } from '@/utils/common';\nimport dayjs from 'dayjs';\n\ntype FilterKPIType = {\n  pageIndex: number;\n  pageSize: number;\n  textSearch?: string;\n  statusId?: string;\n  time?: string;\n  roleType: string;\n};\n\nexport const useCustomer = () => {\n  const api = useApi('');\n  const caller = useCaller();\n  const dispatch = useDispatch();\n  const tenant = getTenant();\n  const user = useRootSelector((state) => state.auth.user);\n\n  const getAllCustomer = useCallback(\n    async ({\n      pageIndex = Pagination.PAGEINDEX,\n      pageSize = Pagination.PAGESIZE,\n      textSearch,\n      statusId,\n      time = dayjs().year().toString(),\n      roleType,\n    }: FilterKPIType) => {\n      const queryParams: { [key: string]: string | undefined } = {\n        PageIndex: pageIndex.toString(),\n        PageSize: pageSize.toString(),\n        UserId: user?.id,\n        RoleId: user?.applicationRoles[0].id,\n        StatusId: statusId,\n        Time: `1-1-${time}`, // value is first day Of year\n        TextSearch: textSearch,\n        tenant: tenant,\n        roleType,\n      };\n\n      const urlParams = generateUrlParams(queryParams);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/Customer/get-list-with-pagination?${urlParams}`),\n        {\n          loadingKey: 'get-customer',\n        },\n      );\n      if (succeeded) {\n        const { items, totalRecords, pageIndex, totalPages, totalExtend } = data;\n        dispatch(\n          setListCustomerAction({\n            data: items,\n            pagination: {\n              pageIndex,\n              totalRecords,\n              totalPages,\n            },\n            totalExtend,\n          }),\n        );\n      }\n    },\n    [caller, api],\n  );\n\n  const addKCustomer = useCallback(\n    async (values: DataCustomerType) => {\n      const dataAddCustomer = convertToUppercaseFirstLetter({ ...values });\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/Customer/add-or-update?tenant=${tenant}`, [{ data: dataAddCustomer }]),\n        { loadingKey: 'add-customer' },\n      );\n\n      if (succeeded) {\n        dispatch(addCustomerAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const deleteCustomer = useCallback(\n    async (customerIds: string[]) => {\n      const ids = customerIds.join(',');\n      const ApplicationUserId = `${user?.id}?tenant=${tenant}`;\n      const { succeeded } = await caller(\n        () => api.del(`/Customer/delete-by-ids/${ids}/${ApplicationUserId}`),\n        { loadingKey: 'delete-customer' },\n      );\n\n      if (succeeded !== null && succeeded) {\n        dispatch(deleteCustomerAction(customerIds));\n        return true;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const updateCustomer = useCallback(\n    async (values: DataCustomerType) => {\n      const dataUpdateCustomer = convertToUppercaseFirstLetter({ ...values });\n\n      const { data, succeeded } = await caller(\n        () =>\n          api.post(`/Customer/add-or-update?tenant=${tenant}`, [\n            { id: values.id, data: dataUpdateCustomer },\n          ]),\n        { loadingKey: 'edit-customer' },\n      );\n\n      if (succeeded) {\n        dispatch(updateCustomerAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  return { getAllCustomer, addKCustomer, deleteCustomer, updateCustomer };\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Fragment } from 'react';\nimport { Button, Form, FormProps, Input, Row, Space } from 'antd';\nimport { useCustomer } from '@/modules/category/services/customer.service';\nimport { useWatchLoading } from '@/hooks/loading.hook';\n\ntype FieldType = {\n  code: string;\n  fullname: string;\n};\n\ntype AddCustomerProps = {\n  closeModal: () => void;\n};\n\nexport const AddCustomer = ({ closeModal }: AddCustomerProps) => {\n  const [form] = Form.useForm();\n  const { addKCustomer } = useCustomer();\n  const [loading] = useWatchLoading(['add-customer', false]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const dataAddCustomer = {\n      ...values,\n    };\n    const add = await addKCustomer(dataAddCustomer);\n    if (add) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n    form.resetFields();\n  };\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Thêm khách hàng</h3>\n      <Form\n        form={form}\n        css={formAddCustomerStyle}\n        name=\"add-customer\"\n        onFinish={onFinish}\n        layout=\"vertical\"\n      >\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Mã KH</span>}\n          name=\"code\"\n          rules={[{ required: true, message: 'Vui lòng nhập mã KH!' }]}\n        >\n          <Input placeholder=\"Nhập mã KH\" />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Tên khách hàng</span>}\n          name=\"fullname\"\n          rules={[{ required: true, message: 'Vui lòng nhập tên khách hàng!' }]}\n        >\n          <Input placeholder=\"Nhập tên khách hàng\" />\n        </Form.Item>\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst formAddCustomerStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { Pagination } from '@/constants/pagination';\nimport { useCustomer } from '@/modules/category/services/customer.service';\nimport { css } from '@emotion/react';\nimport { Button, Row, Space } from 'antd';\nimport { useLocation } from 'react-router-dom';\ntype DeleteCustomerProps = {\n  closeModal: () => void;\n  data?: DataCustomerType;\n  customerIds: string[];\n};\nexport const DeleteCustomer = ({ closeModal, customerIds }: DeleteCustomerProps) => {\n  const { deleteCustomer, getAllCustomer } = useCustomer();\n  const pageIndex = useRootSelector((state) => state.category.customer.pagination?.pageIndex) ?? 0;\n  const [loading] = useWatchLoading(['delete-customer', false]);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const tab = searchParams.get('tab');\n  const handleDeleteCustomer = async () => {\n    const deleteclient = await deleteCustomer(customerIds);\n    if (deleteclient) {\n      getAllCustomer({\n        pageIndex: pageIndex || 1,\n        pageSize: Pagination.PAGESIZE,\n        roleType: tab!,\n      });\n\n      closeModal();\n    } else {\n      console.error('Failed to delete customer');\n    }\n  };\n  return (\n    <div css={rootStyle}>\n      <h3 css={titleStyle}>Đồng ý xoá các mục tiêu đã chọn?</h3>\n      <Row justify=\"center\">\n        <Space>\n          <Button onClick={() => closeModal()}>Huỷ</Button>\n          <Button loading={loading} type=\"primary\" danger onClick={handleDeleteCustomer}>\n            Xoá\n          </Button>\n        </Space>\n      </Row>\n    </div>\n  );\n};\n\nconst rootStyle = css`\n  margin-top: 2rem;\n  padding: 0 2rem;\n`;\n\nconst titleStyle = css`\n  font-size: 1.8rem;\n  line-height: 2rem;\n  text-align: center;\n  margin-bottom: 2.4rem;\n  font-weight: 500;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Fragment, useEffect } from 'react';\nimport { Button, Form, FormProps, Input, Row, Space } from 'antd';\nimport { useCustomer } from '@/modules/category/services/customer.service';\nimport { useWatchLoading } from '@/hooks/loading.hook';\n\ntype FieldType = {\n  id?: string;\n  code: string;\n  fullname: string;\n};\n\ntype UptdaeCustomerProps = {\n  closeModal: () => void;\n  data: DataCustomerType;\n};\n\nexport const UpdateCustomer = ({ closeModal, data }: UptdaeCustomerProps) => {\n  const [form] = Form.useForm();\n  const { updateCustomer } = useCustomer();\n  const [loading] = useWatchLoading(['edit-customer', false]);\n\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const dataUpdateCustomer = {\n      ...values,\n      id: data.id,\n    };\n\n    const edit = await updateCustomer(dataUpdateCustomer);\n    if (edit) {\n      form.resetFields();\n      closeModal();\n    }\n  };\n\n  const oncancel = () => {\n    closeModal();\n  };\n\n  useEffect(() => {\n    form.setFieldsValue(data);\n  }, [data]);\n\n  return (\n    <Fragment>\n      <h3 css={formTitleStyle}>Chỉnh sửa khách hàng</h3>\n      <Form\n        form={form}\n        css={formUpdateCustomertyle}\n        name=\"add-kpi\"\n        onFinish={onFinish}\n        layout=\"vertical\"\n      >\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Mã KH</span>}\n          name=\"code\"\n          rules={[{ required: true, message: 'Vui lòng nhập mã KH!' }]}\n        >\n          <Input placeholder=\"Nhập mã KH\" />\n        </Form.Item>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>Tên khách hàng</span>}\n          name=\"fullname\"\n          rules={[{ required: true, message: 'Vui lòng nhập tên khách hàng!' }]}\n        >\n          <Input placeholder=\"Nhập tên khách hàng\" />\n        </Form.Item>\n\n        <Row justify=\"end\">\n          <Space>\n            <Button onClick={oncancel}>Huỷ</Button>\n            <Button loading={loading} type=\"primary\" htmlType=\"submit\">\n              Xác nhận\n            </Button>\n          </Space>\n        </Row>\n      </Form>\n    </Fragment>\n  );\n};\n\nconst formTitleStyle = css`\n  font-weight: 500;\n  font-size: 2rem;\n  line-height: 2.2rem;\n  margin-top: 2rem;\n`;\n\nconst formUpdateCustomertyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n  padding: 1rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n`;\n","import { Modal } from 'antd';\nimport { ReactNode, createContext, useContext, useState } from 'react';\nimport { ModalCustomerType } from '../../../enum/customer.enum';\nimport { AddCustomer } from './add-customer.modal';\nimport { DeleteCustomer } from './delete.customer.modal';\nimport { UpdateCustomer } from './update.customer.modal';\n\ntype ModalContexttype = {\n  openModal: (modalName: string, data?: DataCustomerType, customerIds?: string[]) => void;\n  closeModal: () => void;\n};\nconst ModalContext = createContext<ModalContexttype | undefined>(undefined);\n\nexport const useModalCustomer = () => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error('useModalCustomer must be used within a ModalCustomerProvider');\n  }\n  return context;\n};\n\ntype ModalCustomerProviderProps = {\n  children?: ReactNode;\n};\n\nexport const ModalCustomerProvider = ({ children }: ModalCustomerProviderProps) => {\n  const [currentModal, setCurrentModal] = useState<\n    { modalName: string; data?: DataCustomerType; customerIds?: string[] } | undefined\n  >();\n  const [open, setOpen] = useState<boolean>(false);\n\n  const openModal = (modalName: string, data?: DataCustomerType, customerIds?: string[]) => {\n    setCurrentModal({ modalName, data, customerIds });\n    setOpen(true);\n  };\n\n  const closeModal = () => {\n    setCurrentModal(undefined);\n    setOpen(false);\n  };\n\n  return (\n    <ModalContext.Provider value={{ openModal, closeModal }}>\n      {children}\n      <Modal open={open} onCancel={closeModal} footer={null}>\n        {currentModal?.modalName === ModalCustomerType.Edit && (\n          <UpdateCustomer closeModal={closeModal} data={currentModal.data!} />\n        )}\n        {currentModal?.modalName === ModalCustomerType.Delete && (\n          <DeleteCustomer\n            closeModal={closeModal}\n            data={currentModal.data!}\n            customerIds={currentModal.customerIds!}\n          />\n        )}\n        {currentModal?.modalName === ModalCustomerType.AddCustomer && (\n          <AddCustomer closeModal={closeModal} />\n        )}\n      </Modal>\n    </ModalContext.Provider>\n  );\n};\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Button, Dropdown } from 'antd';\nimport type { MenuProps } from 'antd';\nimport { CustomIcon } from '@/components/icons';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { ModalCustomerType } from '../../enum/customer.enum';\nimport { useModalCustomer } from '../modals/customer';\n\nenum MenuItem {\n  Edit = 1,\n}\n\ntype CustomerDropdownProps = {\n  data?: DataCustomerType;\n  customerIds?: string[];\n};\n\nexport function CustomerDropdown({ data }: CustomerDropdownProps) {\n  const { openModal } = useModalCustomer();\n  const { formatMessage } = useLocale();\n\n  const handleItemClick = (key: number) => {\n    switch (key) {\n      case MenuItem.Edit:\n        openModal(ModalCustomerType.Edit, data);\n        break;\n      default:\n        break;\n    }\n  };\n  const items: MenuProps['items'] = [\n    {\n      key: '1',\n      label: <span>{formatMessage({ id: 'dropdown.edit' })}</span>,\n      onClick: () => handleItemClick(MenuItem.Edit),\n    },\n  ];\n\n  return (\n    <Dropdown menu={{ items }} placement=\"bottomRight\">\n      <Button css={actionIconBtn}>\n        <CustomIcon type=\"three-dot\" width={16} height={18} />\n      </Button>\n    </Dropdown>\n  );\n}\n\nconst actionIconBtn = css`\n  background: none;\n  border: none;\n  box-shadow: unset;\n  padding: 0;\n`;\n","import { TableProps } from 'antd';\nimport { LocaleFormatter } from '@/components/locale-formatter';\nimport { CustomerDropdown } from '@/modules/category/components/dropdown/customer.dropdown';\n\ntype ColumnsType<T> = TableProps<T>['columns'];\nexport const customerColumns: ColumnsType<DataCustomerType> = [\n  {\n    title: <LocaleFormatter id=\"table.column.customersID\" />,\n    dataIndex: 'code',\n    render: (code) => code,\n  },\n  {\n    title: <LocaleFormatter id=\"table.column.customersName\" />,\n    dataIndex: 'fullname',\n    render: (fullname) => fullname,\n  },\n\n  {\n    title: '',\n    dataIndex: 'calculationMethod',\n    fixed: 'right',\n    width: '6%',\n    render: (__, record) => <CustomerDropdown data={record} />,\n  },\n];\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { TableCustom } from '@/components/table';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Button } from 'antd';\n\nimport { Search, SearchParams } from '@/components/search';\nimport { customerColumns } from './column/customer.column';\nimport { CustomIcon } from '@/components/icons';\nimport { useModalCustomer } from '../../components/modals/customer';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { useCustomer } from '../../services/customer.service';\nimport { Key } from 'antd/es/table/interface';\nimport { Pagination } from '@/constants/pagination';\n\nexport default function TableCustomer() {\n  const { openModal } = useModalCustomer();\n  const { getAllCustomer } = useCustomer();\n  const [customerIds, setCustomerIds] = useState<string[]>();\n\n  const { data, pagination } = useRootSelector((state) => state.category.customer);\n  const [loading] = useWatchLoading(['get-customer', true]);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const tab = searchParams.get('tab');\n\n  const handleSearch = ({ textSearch, time }: SearchParams) => {\n    getAllCustomer({\n      pageIndex: pagination?.pageIndex ?? Pagination.PAGEINDEX,\n      pageSize: Pagination.PAGESIZE,\n      textSearch,\n      time,\n      roleType: tab!,\n    });\n  };\n\n  const rowSelection = {\n    onChange: (_selectedRowKeys: Key[], selectedRows: DataCustomerType[]) => {\n      setCustomerIds(selectedRows.map((row) => row.id!));\n    },\n  };\n\n  const handleTableChange = (page: number) => {\n    getAllCustomer({\n      pageIndex: page,\n      pageSize: Pagination.PAGESIZE,\n      roleType: tab!,\n    });\n  };\n\n  useEffect(() => {\n    getAllCustomer({\n      pageIndex: Pagination.PAGEINDEX,\n      pageSize: Pagination.PAGESIZE,\n      roleType: tab!,\n    });\n  }, [getAllCustomer, tab]);\n\n  const handleDeleteCustomer = () => {\n    openModal('Delete Customer', undefined, customerIds);\n  };\n  return (\n    <div css={rootStyle}>\n      <Button\n        onClick={() => openModal('Add Customer')}\n        type=\"primary\"\n        css={addKCustomerStyle}\n        iconPosition=\"start\"\n        size=\"large\"\n      >\n        <CustomIcon color=\"#fff\" width={16} height={16} type=\"circle-plus\" />\n        <span>Thêm khách hàng</span>\n      </Button>\n\n      <div css={searchContainer}>\n        <Search onSearch={handleSearch} />\n      </div>\n      <div css={checkBoxStyle}>\n        <Button disabled={!customerIds} onClick={() => handleDeleteCustomer()} size=\"large\" danger>\n          Xoá mục tiêu đã chọn\n        </Button>\n      </div>\n      <TableCustom\n        rowSelection={rowSelection}\n        columns={customerColumns}\n        dataSource={data}\n        loading={loading}\n        rowKey={(record) => record.id}\n        onTableChange={(page) => handleTableChange(page)}\n        pagination={{\n          current: pagination?.pageIndex,\n          pageSize: Pagination.PAGESIZE,\n          total: pagination?.totalRecords,\n          position: ['bottomCenter'],\n        }}\n        scroll={{ x: 1450 }}\n      />\n    </div>\n  );\n}\n\nconst rootStyle = css`\n  position: relative;\n`;\n\nconst addKCustomerStyle = css`\n  position: absolute;\n  right: 0;\n  top: -9rem;\n  background: #0070b8;\n  display: flex;\n  align-items: center;\n  gap: 0.2rem;\n  &:hover {\n    background: #0070b8 !important;\n    opacity: 0.9;\n  }\n`;\n\nconst searchContainer = css`\n  margin-top: 2.6rem;\n`;\n\nconst checkBoxStyle = css`\n  margin: 1.1rem 0;\n`;\n","/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { useEffect } from 'react';\nimport { setBreadcrumbItemsAction } from '@/redux/slicers/breadcrumb.slice';\nimport { useDispatch } from 'react-redux';\nimport { ModalCustomerProvider } from '../../components/modals/customer';\nimport { CustomIcon } from '@/components/icons';\nimport TableCustomer from './table-customer';\n\nexport default function CustomerPage() {\n  // const { openModal } = useModalCustomer();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const breadCrumbItems = [\n      {\n        title: {\n          vi_VN: 'Danh mục',\n          en_US: 'Category',\n        },\n      },\n      {\n        title: {\n          vi_VN: 'Khách hàng',\n          en_US: 'Customer',\n        },\n      },\n    ];\n    dispatch(setBreadcrumbItemsAction(breadCrumbItems));\n  }, [dispatch]);\n\n  return (\n    <ModalCustomerProvider>\n      <h3 css={titleStyle}>Khách hàng</h3>\n      <div css={subTitleStyle}>\n        <CustomIcon width={8} height={8} type=\"dot\" />\n        <span>\n          <span css={subTitleStyle}>10 Khách hàng</span>\n        </span>\n      </div>\n      <TableCustomer />\n    </ModalCustomerProvider>\n  );\n}\n\nconst titleStyle = css`\n  font-size: 2.4rem;\n  line-height: 2.8rem;\n  font-weight: 600;\n  color: rgba(16, 24, 40, 1);\n  margin-bottom: 0.5rem;\n`;\nconst subTitleStyle = css`\n  font-size: 1.2rem;\n  font-weight: 500;\n  line-height: 1.8rem;\n  color: rgba(84, 104, 129, 1);\n`;\n"],"names":["ModalCustomerType","Edit","Delete","AddCustomer","useCustomer","api","useApi","caller","useCaller","dispatch","useDispatch","tenant","getTenant","user","useRootSelector","state","auth","getAllCustomer","useCallback","pageIndex","Pagination","PAGEINDEX","pageSize","PAGESIZE","textSearch","statusId","time","dayjs","year","toString","roleType","queryParams","PageIndex","PageSize","UserId","id","RoleId","applicationRoles","StatusId","Time","TextSearch","urlParams","generateUrlParams","data","succeeded","post","loadingKey","items","totalRecords","totalPages","totalExtend","setListCustomerAction","pagination","addKCustomer","values","dataAddCustomer","convertToUppercaseFirstLetter","addCustomerAction","deleteCustomer","customerIds","ids","join","ApplicationUserId","del","deleteCustomerAction","updateCustomer","dataUpdateCustomer","updateCustomerAction","Row","onFinish","closeModal","form","Form","add","oncancel","Fragment","jsx","formTitleStyle","jsxs","formAddCustomerStyle","_EMOTION_STRINGIFIED_CSS_ERROR__","labelFormItem","DeleteCustomer","_a","location","console","rootStyle","titleStyle","Space","Button","process","NODE_ENV","loading","get","deleteclient","styles","map","edit","useEffect","formUpdateCustomertyle","ModalContext","createContext","context","ModalCustomerProvider","children","currentModal","setCurrentModal","useState","setOpen","modalName","openModal","MenuItem","formatMessage","handleItemClick","label","onClick","actionIconBtn","CustomIcon","customerColumns","title","LocaleFormatter","dataIndex","render","code","fullname","fixed","width","__","record","CustomerDropdown","TableCustomer","setCustomerIds","useLocation","tab","rowSelection","_selectedRowKeys","current","total","position","searchContainer","handleSearch","checkBoxStyle","TableCustom","CustomerPage","setBreadcrumbItemsAction","vi_VN","en_US","subTitleStyle","name"],"mappings":"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"}