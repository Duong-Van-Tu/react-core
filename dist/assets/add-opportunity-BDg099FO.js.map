{"version":3,"file":"add-opportunity-BDg099FO.js","sources":["../../src/modules/sales/pages/opportunity/add-opportunity.tsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport dayjs from 'dayjs';\nimport {\n  Button,\n  Col,\n  DatePicker,\n  Form,\n  FormProps,\n  Input,\n  InputNumber,\n  Row,\n  message as messageAnt,\n} from 'antd';\nimport Close from '@/assets/svg/close.svg?react';\nimport { useLocale } from '@/hooks/locale.hook';\nimport { LocaleFormatter } from '@/components/locale-formatter';\nimport { useNavigate } from 'react-router-dom';\nimport { getTenant } from '@/utils/common';\nimport { useOpportunity } from '@/modules/sales/services/opportunity.service';\nimport { useWatchLoading } from '@/hooks/loading.hook';\nimport { Messages } from '@/constants/message';\nimport { useWatchMessage } from '@/hooks/message.hook';\n\ntype FieldType = {\n  customerName: string;\n  accountable: string;\n  technicalLead: string;\n  beneficiary: string;\n  need: string;\n  estimatedTime: string;\n  budget: number;\n  estimatedMoney: number;\n  commissionMoney: number;\n  opponent1: string;\n  opponent1Attribute: string;\n  opponent2: string;\n  opponent2Attribute: string;\n  strategy: string;\n  lastTimeInteract: string;\n  winningOppotunity: string;\n};\n\nexport default function AddOpportunityPage() {\n  const { formatMessage } = useLocale();\n  const { addOpportunity } = useOpportunity();\n  const [loading] = useWatchLoading(['add-opportunity', false]);\n  const [form] = Form.useForm();\n  const [messageApi, contextHolder] = messageAnt.useMessage();\n  const { errors } = useWatchMessage('addOpportunity-message');\n  const navigate = useNavigate();\n  const onFinish: FormProps<FieldType>['onFinish'] = async (values) => {\n    const dataAddOpportunity = {\n      ...values,\n      estimatedMoney: values.estimatedMoney.toString(),\n      budget: values.budget.toString(),\n      commissionMoney: values.commissionMoney.toString(),\n      estimatedTime: dayjs(values.estimatedTime).format('DD/MM/YYYY'),\n      lastTimeInteract: dayjs(values.lastTimeInteract).format('DD/MM/YYYY'),\n    };\n    const add = await addOpportunity(dataAddOpportunity);\n    if (add) {\n      form.resetFields();\n      messageApi.success(Messages.CREATE_SUCCESS);\n    } else {\n      messageApi.success(errors[0]);\n    }\n  };\n\n  return (\n    <div css={containerStyle}>\n      {contextHolder}\n      <Button css={closeStyle} onClick={() => navigate(`/sales/opportunity?tenant=${getTenant()}`)}>\n        <Close width={16} height={16} color=\"#ccc\" />\n        <LocaleFormatter id=\"title.exit\" />\n      </Button>\n      <h1 css={titleStyle}>{formatMessage({ id: 'title.addOpportuity' })}</h1>\n      <Form\n        form={form}\n        css={formUpdateResultStyle}\n        name=\"add-opportunity\"\n        onFinish={onFinish}\n        layout=\"vertical\"\n      >\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>{formatMessage({ id: 'form.input.customer' })}</span>\n              }\n              name=\"customerName\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({ id: 'form.input.require.customer' }),\n                },\n              ]}\n            >\n              <Input\n                size=\"large\"\n                placeholder={formatMessage({ id: 'form.input.placeholder.customer' })}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>{formatMessage({ id: 'form.input.decisionMaker' })}</span>\n              }\n              name=\"accountable\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({ id: 'form.input.require.decisionMaker' }),\n                },\n              ]}\n            >\n              <Input\n                size=\"large\"\n                placeholder={formatMessage({ id: 'form.input.placeholder.decisionMaker' })}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>\n                  {formatMessage({ id: 'form.input.technicalPerson' })}\n                </span>\n              }\n              name=\"technicalLead\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({ id: 'form.input.require.technicalPerson' }),\n                },\n              ]}\n            >\n              <Input\n                size=\"large\"\n                placeholder={formatMessage({ id: 'form.input.placeholder.technicalPerson' })}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>{formatMessage({ id: 'form.input.beneficiary' })}</span>\n              }\n              name=\"beneficiary\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({ id: 'form.input.require.beneficiary' }),\n                },\n              ]}\n            >\n              <Input\n                size=\"large\"\n                placeholder={formatMessage({ id: 'form.input.placeholder.beneficiary' })}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Form.Item<FieldType>\n          label={\n            <span css={labelFormItem}>{formatMessage({ id: 'form.input.customerNeeds' })}</span>\n          }\n          name=\"need\"\n          rules={[\n            {\n              required: true,\n              message: formatMessage({ id: 'form.input.require.customerNeeds' }),\n            },\n          ]}\n        >\n          <Input.TextArea\n            placeholder={formatMessage({ id: 'form.input.placeholder.customerNeeds' })}\n          />\n        </Form.Item>\n\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>\n                  {formatMessage({ id: 'form.input.OpportunityTimeline' })}\n                </span>\n              }\n              name=\"estimatedTime\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({ id: 'form.input.require.OpportunityTimeline' }),\n                },\n              ]}\n            >\n              <DatePicker\n                css={inputStyle}\n                size=\"large\"\n                format={['DD/MM/YYYY']}\n                placeholder=\"DD/MM/YYYY\"\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={<span css={labelFormItem}>{formatMessage({ id: 'form.input.budget' })}</span>}\n              name=\"budget\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({ id: 'form.input.require.budget' }),\n                },\n              ]}\n            >\n              <InputNumber\n                css={inputStyle}\n                size=\"large\"\n                placeholder={formatMessage({ id: 'form.input.placeholder.budget' })}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>\n                  {formatMessage({ id: 'form.input.estimatedPrice' })}\n                </span>\n              }\n              name=\"estimatedMoney\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({ id: 'form.input.require.estimatedPrice' }),\n                },\n              ]}\n            >\n              <InputNumber\n                css={inputStyle}\n                size=\"large\"\n                placeholder={formatMessage({ id: 'form.input.placeholder.estimatedPrice' })}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>\n                  {formatMessage({ id: 'form.input.commissionConsultant' })}\n                </span>\n              }\n              name=\"commissionMoney\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({ id: 'form.input.require.commissionConsultant' }),\n                },\n              ]}\n            >\n              <InputNumber\n                css={inputStyle}\n                size=\"large\"\n                placeholder={formatMessage({ id: 'form.input.placeholder.commissionConsultant' })}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>{formatMessage({ id: 'form.input.oneCompetitor' })}</span>\n              }\n              name=\"opponent1\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({ id: 'form.input.require.oneCompetitor' }),\n                },\n              ]}\n            >\n              <Input\n                size=\"large\"\n                placeholder={formatMessage({ id: 'form.input.placeholder.oneCompetitor' })}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>\n                  {formatMessage({ id: 'form.input.strengthsAndWeaknesses' })}\n                </span>\n              }\n              name=\"opponent1Attribute\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({ id: 'form.input.require.strengthsAndWeaknesses' }),\n                },\n              ]}\n            >\n              <Input\n                size=\"large\"\n                placeholder={formatMessage({\n                  id: 'form.input.placeholder.strengthsAndWeaknesses',\n                })}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>{formatMessage({ id: 'form.input.twoCompetitor' })}</span>\n              }\n              name=\"opponent2\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({ id: 'form.input.require.twoCompetitor' }),\n                },\n              ]}\n            >\n              <Input\n                size=\"large\"\n                placeholder={formatMessage({\n                  id: 'form.input.placeholder.twoCompetitor',\n                })}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>\n                  {formatMessage({ id: 'form.input.strengthsAndWeaknesses' })}\n                </span>\n              }\n              name=\"opponent2Attribute\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({ id: 'form.input.require.strengthsAndWeaknesses' }),\n                },\n              ]}\n            >\n              <Input\n                size=\"large\"\n                placeholder={formatMessage({\n                  id: 'form.input.placeholder.strengthsAndWeaknesses',\n                })}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Form.Item<FieldType>\n          label={<span css={labelFormItem}>{formatMessage({ id: 'form.input.strategy' })}</span>}\n          name=\"strategy\"\n          rules={[\n            {\n              required: true,\n              message: formatMessage({ id: 'form.input.require.strategy' }),\n            },\n          ]}\n        >\n          <Input.TextArea\n            placeholder={formatMessage({\n              id: 'form.input.placeholder.strategy',\n            })}\n          />\n        </Form.Item>\n\n        <Row gutter={[20, 0]}>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>\n                  {formatMessage({ id: 'form.input.interactionBetweenCompanyAndCustomer' })}\n                </span>\n              }\n              name=\"lastTimeInteract\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({\n                    id: 'form.input.require.interactionBetweenCompanyAndCustomer',\n                  }),\n                },\n              ]}\n            >\n              <DatePicker\n                format={['DD/MM/YYYY']}\n                css={inputStyle}\n                size=\"large\"\n                placeholder={formatMessage({\n                  id: 'form.input.placeholder.interactionBetweenCompanyAndCustomer',\n                })}\n              />\n            </Form.Item>\n          </Col>\n          <Col span={12}>\n            <Form.Item<FieldType>\n              label={\n                <span css={labelFormItem}>\n                  {formatMessage({ id: 'form.input.WinProbabilityEvaluation' })}\n                </span>\n              }\n              name=\"winningOppotunity\"\n              rules={[\n                {\n                  required: true,\n                  message: formatMessage({\n                    id: 'form.input.require.WinProbabilityEvaluation',\n                  }),\n                },\n              ]}\n            >\n              <Input\n                size=\"large\"\n                placeholder={formatMessage({\n                  id: 'form.input.placeholder.WinProbabilityEvaluation',\n                })}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n\n        <Row justify=\"end\">\n          <Button loading={loading} size=\"large\" type=\"primary\" htmlType=\"submit\">\n            Xác nhận\n          </Button>\n        </Row>\n      </Form>\n    </div>\n  );\n}\n\nconst containerStyle = css`\n  width: 100%;\n  max-width: 90rem;\n  height: 100%;\n  margin: 4rem auto;\n  position: relative;\n`;\n\nconst closeStyle = css`\n  display: flex;\n  align-items: center;\n  gap: 0.4rem;\n  position: absolute;\n  right: 0;\n  top: 0;\n  &:hover {\n    svg {\n      path {\n        fill: #4096ff;\n      }\n    }\n  }\n`;\n\nconst titleStyle = css`\n  font-size: 2.4rem;\n  line-height: 2.4rem;\n  font-weight: 600;\n  color: rgba(16, 24, 40, 1);\n`;\n\nconst formUpdateResultStyle = css`\n  .ant-form-item-required::before {\n    display: none !important;\n  }\n  margin-top: 2rem;\n`;\n\nconst labelFormItem = css`\n  font-size: 1.4rem;\n  line-height: 1.6rem;\n  font-weight: 500;\n  color: rgba(16, 24, 40, 1);\n`;\n\nconst inputStyle = css`\n  width: 100%;\n`;\n"],"names":["messageApi","formatMessage","addOpportunity","loading","useWatchLoading","Form","contextHolder","errors","navigate","useNavigate","values","onFinish","id","estimatedMoney","budget","commissionMoney","estimatedTime","dataAddOpportunity","form","Messages","success","containerStyle","closeStyle","jsx","Close","LocaleFormatter","titleStyle","jsxs","formUpdateResultStyle","labelFormItem","Col","message","required","Input","Row","NODE_ENV","_EMOTION_STRINGIFIED_CSS_ERROR__","process"],"mappings":"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"}