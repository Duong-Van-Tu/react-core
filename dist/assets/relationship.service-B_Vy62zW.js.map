{"version":3,"file":"relationship.service-B_Vy62zW.js","sources":["../../src/modules/sales/services/relationship.service.ts"],"sourcesContent":["import { useApi, useCaller } from '@/hooks/api.hook';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  addRelationshipAction,\n  deleteRelationshipAction,\n  setDataCustomerAction,\n  setDataLevelAction,\n  setDataGainsRelationshipDetailAction,\n  setDataStatusAction,\n  setListRelationshipAction,\n  updateRelationshipAction,\n  setDataRelationshipGainsQuestionAction,\n} from '../reducers/slicers/relationship.slice';\nimport { useRootSelector } from '@/hooks/selector.hook';\nimport { convertToUppercaseFirstLetter } from '@/utils/get-pathCode';\nimport { Pagination } from '@/constants/pagination';\nimport { generateUrlParams, getTenant } from '@/utils/common';\nimport dayjs from 'dayjs';\n\ntype FilterRelationshipType = {\n  pageIndex: number;\n  pageSize: number;\n  textSearch?: string;\n  statusId?: string;\n  time?: string;\n  roleType: string;\n};\nexport const useRelationship = () => {\n  const api = useApi('');\n  const caller = useCaller();\n  const dispatch = useDispatch();\n  const tenant = getTenant();\n  const user = useRootSelector((state) => state.auth.user);\n\n  const getAllRelationship = useCallback(\n    async ({\n      pageIndex = Pagination.PAGEINDEX,\n      pageSize = Pagination.PAGESIZE,\n      textSearch,\n      statusId,\n      time = dayjs().year().toString(),\n      roleType,\n    }: FilterRelationshipType) => {\n      const queryParams: { [key: string]: string | undefined } = {\n        PageIndex: pageIndex.toString(),\n        PageSize: pageSize.toString(),\n        UserId: user?.id,\n        RoleId: user?.applicationRoles[0].id,\n        StatusId: statusId,\n        Time: `1-1-${time}`, // value is first day Of year\n        TextSearch: textSearch,\n        tenant: tenant,\n        roleType,\n      };\n\n      const urlParams = generateUrlParams(queryParams);\n\n      const { data, succeeded } = await caller(\n        () => api.post(`/Relationship/get-list-with-pagination?${urlParams}`),\n        {\n          loadingKey: 'get-relationship',\n        },\n      );\n      if (succeeded) {\n        const { items, totalRecords, pageIndex, totalPages, totalExtend } = data;\n        dispatch(\n          setListRelationshipAction({\n            data: items,\n            pagination: {\n              pageIndex,\n              totalRecords,\n              totalPages,\n            },\n            totalExtend,\n          }),\n        );\n      }\n    },\n    [caller, api],\n  );\n\n  const getGainsRelationshipById = useCallback(\n    async (id: string) => {\n      const { data, succeeded } = await caller(\n        () => api.get(`/Gains/get-by-relationship-id/${id}`),\n        {\n          loadingKey: 'gainsDetail-loading',\n          messageKey: 'gainsDetail-message',\n        },\n      );\n      if (succeeded) {\n        dispatch(setDataGainsRelationshipDetailAction(data));\n      }\n    },\n    [caller, api],\n  );\n\n  const updateGainsRelationship = useCallback(\n    async (values: GainsRelationshipType) => {\n      const { id, ...rest } = values;\n      const dataUpdateGainsRelationship = convertToUppercaseFirstLetter({\n        ...rest,\n      });\n\n      const { succeeded } = await caller(\n        () => api.post('/Gains/add-or-update', [{ id, data: dataUpdateGainsRelationship }]),\n        {\n          loadingKey: 'updateGainsDetail-loading',\n          messageKey: 'updateGainsDetail-message',\n        },\n      );\n\n      return !!succeeded;\n    },\n    [caller, api],\n  );\n\n  const addRelationship = useCallback(\n    async (values: DataAddRelationship) => {\n      const dataAddRelationship = convertToUppercaseFirstLetter({\n        ...values,\n      });\n\n      const { data, succeeded } = await caller(\n        () =>\n          api.post(`/Relationship/add-or-update?tenant=${tenant}`, [{ data: dataAddRelationship }]),\n        { loadingKey: 'add-relationship' },\n      );\n\n      if (succeeded) {\n        dispatch(addRelationshipAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const updateRelationship = useCallback(\n    async (values: DataRelationshipType) => {\n      const { id, ...rest } = values;\n      const dataAddRelationship = convertToUppercaseFirstLetter({\n        ...rest,\n        userSuggestId: user?.id,\n      });\n\n      const { data, succeeded } = await caller(\n        () =>\n          api.post(`/Relationship/add-or-update?tenant=${tenant}`, [\n            { id, data: dataAddRelationship },\n          ]),\n        { loadingKey: 'edit-relationship' },\n      );\n\n      if (succeeded) {\n        dispatch(updateRelationshipAction(data[0]));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const deleteRelationship = useCallback(\n    async (RelationshipIds: string[]) => {\n      const deleteIds = RelationshipIds.join(',');\n      const { succeeded } = await caller(\n        () => api.del(`/Relationship/delete-by-ids/${deleteIds}/${user?.id}?tenant=${tenant}`),\n        { loadingKey: 'delete-relationship' },\n      );\n\n      if (succeeded) {\n        dispatch(deleteRelationshipAction(RelationshipIds));\n\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  // status\n  const updateStatusRelationship = useCallback(\n    async (values: DataRelationshipType) => {\n      const dataUpdateStatusRelationship = convertToUppercaseFirstLetter({\n        ...values,\n      });\n\n      const { data, succeeded } = await caller(\n        () =>\n          api.put(\n            `/Relationship/update-status-by-id?tenant=${tenant}`,\n            dataUpdateStatusRelationship,\n          ),\n        { loadingKey: 'edit-status' },\n      );\n\n      if (succeeded) {\n        dispatch(updateRelationshipAction(data));\n        return succeeded;\n      }\n      return false;\n    },\n\n    [api, caller],\n  );\n\n  const getAllStatusRelationship = useCallback(async () => {\n    const { data, succeeded } = await caller(\n      () => api.get(`/RelationshipStatus/get-all?tenant=${tenant}`),\n      {\n        loadingKey: 'status-relationship',\n      },\n    );\n\n    if (succeeded) {\n      dispatch(setDataStatusAction(data));\n    }\n  }, [api, caller]);\n\n  const getListCustomer = useCallback(async () => {\n    const { data, succeeded } = await caller(() => api.get(`/Customer/get-all?tenant=${tenant}`), {\n      loadingKey: 'relationship-customer',\n    });\n\n    if (succeeded) {\n      dispatch(setDataCustomerAction(data));\n    }\n  }, [api, caller]);\n\n  const getAllLevel = useCallback(async () => {\n    const { data, succeeded } = await caller(\n      () => api.get(`/RelationshipLevel/get-all?tenant=${tenant}`),\n      {\n        loadingKey: 'relationship-level',\n      },\n    );\n\n    if (succeeded) {\n      dispatch(setDataLevelAction(data));\n    }\n  }, [api, caller]);\n\n  const getRelationshipGainsQuestion = useCallback(\n    async (id: string) => {\n      const { data, succeeded } = await caller(\n        () => api.get(`/RelationshipGainsQuestion/get-by-relationship-id/${id}?tenant=${tenant}`),\n        {\n          loadingKey: 'relationship-gainsQuestion',\n        },\n      );\n\n      if (succeeded) {\n        dispatch(setDataRelationshipGainsQuestionAction(data));\n      }\n    },\n    [api, caller],\n  );\n\n  const updateRelationshipGainsQuestion = useCallback(\n    async (values: RelationshipGainsQuestion[]) => {\n      const { data, succeeded } = await caller(\n        () => api.post(`/RelationshipGainsQuestion/add-or-update?tenant=${tenant}`, values),\n        {\n          loadingKey: 'relationship-updateGainsQuestion',\n        },\n      );\n\n      if (succeeded) {\n        dispatch(setDataRelationshipGainsQuestionAction(data));\n        return succeeded;\n      }\n      return false;\n    },\n    [api, caller],\n  );\n\n  return {\n    getAllRelationship,\n    addRelationship,\n    deleteRelationship,\n    updateRelationship,\n    updateStatusRelationship,\n    getAllStatusRelationship,\n    getListCustomer,\n    getAllLevel,\n    getGainsRelationshipById,\n    updateGainsRelationship,\n    getRelationshipGainsQuestion,\n    updateRelationshipGainsQuestion,\n  };\n};\n"],"names":["useRelationship","api","useApi","caller","useCaller","dispatch","useDispatch","tenant","getTenant","user","useRootSelector","state","auth","getAllRelationship","useCallback","pageIndex","Pagination","PAGEINDEX","pageSize","PAGESIZE","textSearch","statusId","time","dayjs","year","toString","roleType","queryParams","PageIndex","PageSize","UserId","id","RoleId","applicationRoles","StatusId","Time","TextSearch","urlParams","generateUrlParams","data","succeeded","post","loadingKey","items","totalRecords","totalPages","totalExtend","setListRelationshipAction","pagination","getGainsRelationshipById","get","messageKey","setDataGainsRelationshipDetailAction","updateGainsRelationship","values","rest","dataUpdateGainsRelationship","convertToUppercaseFirstLetter","addRelationship","dataAddRelationship","addRelationshipAction","updateRelationship","userSuggestId","updateRelationshipAction","deleteRelationship","RelationshipIds","deleteIds","join","del","deleteRelationshipAction","updateStatusRelationship","dataUpdateStatusRelationship","put","getAllStatusRelationship","setDataStatusAction","getListCustomer","setDataCustomerAction","getAllLevel","setDataLevelAction","getRelationshipGainsQuestion","setDataRelationshipGainsQuestionAction","updateRelationshipGainsQuestion"],"mappings":"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"}